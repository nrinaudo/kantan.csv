/*
 * Copyright 2015 Nicolas Rinaudo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kantan.csv

/** Provides [[RowDecoder]] and [[RowEncoder]] instances for tuples of any arity. */
trait TupleInstances {
  [#/** Provides an instance of [[RowDecoder]] for `Tuple1`, provided all internal types have an instance of [[CellDecoder]].
    *
    * @example
    * {{{
    * scala> RowDecoder[Tuple1[[#Int#]]].decode(Seq([#"1"#]))
    * res0: DecodeResult[Tuple1[[#Int#]]] = Right(([#1#,]))
    * }}}
    */
  implicit def tupleRowDecoder1[[#A1: CellDecoder#]]: RowDecoder[Tuple1[[#A1#]]] =
    RowDecoder.ordered(Tuple1.apply[[#A1#]] _)#

  ]

  /** Provides an instance of [[RowEncoder]] for `Tuple1`, provided all internal types have an instance of [[CellEncoder]].
    *
    * @example
    * {{{
    * scala> RowEncoder[Tuple1[Int]].encode(Tuple1(1))
    * res0: Seq[String] = List(1)
    * }}}
    */
  implicit def tupleRowEncoder1[A1: CellEncoder]: RowEncoder[Tuple1[A1]] =
    RowEncoder.ordered((t: Tuple1[A1]) => t._1)

  [2..#/** Provides an instance of [[RowEncoder]] for `Tuple1`, provided all internal types have an instance of [[CellEncoder]].
    *
    * @example
    * {{{
    * scala> RowEncoder[Tuple1[[#Int#]]].encode(([#1#]))
    * res0: Seq[String] = Vector([#1#])
    * }}}
    */
  implicit def tupleRowEncoder1[[#A1: CellEncoder#]]: RowEncoder[Tuple1[[#A1#]]] =
    RowEncoder.ordered((t: Tuple1[[#A1#]]) => t)#

  ]
}
