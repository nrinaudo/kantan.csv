Index.PACKAGES = {"kantan.csv.laws.discipline" : [{"name" : "kantan.csv.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/csv\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "arbIllegalRow", "tail" : "(arb: Arbitrary[IllegalCell[A]]): Arbitrary[IllegalRow[A]]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbIllegalRow", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbIllegalRow[A](implicitarb:org.scalacheck.Arbitrary[kantan.csv.laws.IllegalCell[A]]):org.scalacheck.Arbitrary[kantan.csv.laws.IllegalRow[A]]", "kind" : "implicit def"}, {"label" : "arbLegalRow", "tail" : "(arb: Arbitrary[LegalCell[A]]): Arbitrary[LegalRow[A]]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbLegalRow", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbLegalRow[A](implicitarb:org.scalacheck.Arbitrary[kantan.csv.laws.LegalCell[A]]):org.scalacheck.Arbitrary[kantan.csv.laws.LegalRow[A]]", "kind" : "implicit def"}, {"label" : "cogenCsvReadError", "tail" : ": Cogen[ReadError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvReadError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenCsvReadError:org.scalacheck.Cogen[kantan.csv.ReadError]", "kind" : "implicit val"}, {"label" : "cogenCsvDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvDecodeError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenCsvDecodeError:org.scalacheck.Cogen[kantan.csv.DecodeError]", "kind" : "implicit val"}, {"label" : "cogenCsvTypeError", "tail" : ": Cogen[TypeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvTypeError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenCsvTypeError:org.scalacheck.Cogen[kantan.csv.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "cogenCsvOutOfBounds", "tail" : ": Cogen[OutOfBounds]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvOutOfBounds", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenCsvOutOfBounds:org.scalacheck.Cogen[kantan.csv.DecodeError.OutOfBounds]", "kind" : "implicit val"}, {"label" : "cogenCsvParseError", "tail" : ": Cogen[ParseError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvParseError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenCsvParseError:org.scalacheck.Cogen[kantan.csv.ParseError]", "kind" : "implicit val"}, {"label" : "cogenCsvNoSuchElement", "tail" : ": Cogen[NoSuchElement.type]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvNoSuchElement", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenCsvNoSuchElement:org.scalacheck.Cogen[kantan.csv.ParseError.NoSuchElement.type]", "kind" : "implicit val"}, {"label" : "cogenCsvIOError", "tail" : ": Cogen[IOError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvIOError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenCsvIOError:org.scalacheck.Cogen[kantan.csv.ParseError.IOError]", "kind" : "implicit val"}, {"label" : "arbReadError", "tail" : ": Arbitrary[ReadError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbReadError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbReadError:org.scalacheck.Arbitrary[kantan.csv.ReadError]", "kind" : "implicit val"}, {"label" : "arbParseError", "tail" : ": Arbitrary[ParseError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbParseError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbParseError:org.scalacheck.Arbitrary[kantan.csv.ParseError]", "kind" : "implicit val"}, {"label" : "arbDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbDecodeError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbDecodeError:org.scalacheck.Arbitrary[kantan.csv.DecodeError]", "kind" : "implicit val"}, {"label" : "arbOutOfBounds", "tail" : ": Arbitrary[OutOfBounds]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbOutOfBounds", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbOutOfBounds:org.scalacheck.Arbitrary[kantan.csv.DecodeError.OutOfBounds]", "kind" : "implicit val"}, {"label" : "arbNoSuchElement", "tail" : ": Arbitrary[NoSuchElement.type]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbNoSuchElement", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbNoSuchElement:org.scalacheck.Arbitrary[kantan.csv.ParseError.NoSuchElement.type]", "kind" : "implicit val"}, {"label" : "arbIOError", "tail" : ": Arbitrary[IOError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbIOError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbIOError:org.scalacheck.Arbitrary[kantan.csv.ParseError.IOError]", "kind" : "implicit val"}, {"label" : "arbTypeError", "tail" : ": Arbitrary[TypeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbTypeError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbTypeError:org.scalacheck.Arbitrary[kantan.csv.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "genReadError", "tail" : ": Gen[ReadError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genReadError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genReadError:org.scalacheck.Gen[kantan.csv.ReadError]", "kind" : "val"}, {"label" : "genParseError", "tail" : ": Gen[ParseError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genParseError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genParseError:org.scalacheck.Gen[kantan.csv.ParseError]", "kind" : "val"}, {"label" : "genNoSuchElement", "tail" : ": Gen[NoSuchElement.type]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genNoSuchElement", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genNoSuchElement:org.scalacheck.Gen[kantan.csv.ParseError.NoSuchElement.type]", "kind" : "val"}, {"label" : "genIOError", "tail" : ": Gen[IOError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genIOError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIOError:org.scalacheck.Gen[kantan.csv.ParseError.IOError]", "kind" : "val"}, {"label" : "genDecodeError", "tail" : ": Gen[DecodeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genDecodeError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genDecodeError:org.scalacheck.Gen[kantan.csv.DecodeError]", "kind" : "val"}, {"label" : "genTypeError", "tail" : ": Gen[TypeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genTypeError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genTypeError:org.scalacheck.Gen[kantan.csv.DecodeError.TypeError]", "kind" : "val"}, {"label" : "genOutOfBoundsError", "tail" : ": Gen[OutOfBounds]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genOutOfBoundsError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genOutOfBoundsError:org.scalacheck.Gen[kantan.csv.DecodeError.OutOfBounds]", "kind" : "val"}, {"label" : "arbTuple1", "tail" : "(arg0: Arbitrary[A]): Arbitrary[(A)]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbTuple1", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbTuple1[A](implicitevidence$1:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[(A,)]", "kind" : "implicit def"}, {"label" : "csv", "tail" : ": Gen[List[List[String]]]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.csv", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#csv:org.scalacheck.Gen[List[List[String]]]", "kind" : "val"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$7:org.scalacheck.Arbitrary[E],implicitevidence$8:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Cogen[E], arg1: Arbitrary[D], arg2: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Cogen[E],implicitevidence$5:org.scalacheck.Arbitrary[D],implicitevidence$6:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.laws.discipline.ArbitraryInstances", "trait" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalRow", "tail" : "(arb: Arbitrary[IllegalCell[A]]): Arbitrary[IllegalRow[A]]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbIllegalRow", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbIllegalRow[A](implicitarb:org.scalacheck.Arbitrary[kantan.csv.laws.IllegalCell[A]]):org.scalacheck.Arbitrary[kantan.csv.laws.IllegalRow[A]]", "kind" : "implicit def"}, {"label" : "arbLegalRow", "tail" : "(arb: Arbitrary[LegalCell[A]]): Arbitrary[LegalRow[A]]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbLegalRow", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbLegalRow[A](implicitarb:org.scalacheck.Arbitrary[kantan.csv.laws.LegalCell[A]]):org.scalacheck.Arbitrary[kantan.csv.laws.LegalRow[A]]", "kind" : "implicit def"}, {"label" : "cogenCsvReadError", "tail" : ": Cogen[ReadError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvReadError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenCsvReadError:org.scalacheck.Cogen[kantan.csv.ReadError]", "kind" : "implicit val"}, {"label" : "cogenCsvDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvDecodeError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenCsvDecodeError:org.scalacheck.Cogen[kantan.csv.DecodeError]", "kind" : "implicit val"}, {"label" : "cogenCsvTypeError", "tail" : ": Cogen[TypeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvTypeError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenCsvTypeError:org.scalacheck.Cogen[kantan.csv.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "cogenCsvOutOfBounds", "tail" : ": Cogen[OutOfBounds]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvOutOfBounds", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenCsvOutOfBounds:org.scalacheck.Cogen[kantan.csv.DecodeError.OutOfBounds]", "kind" : "implicit val"}, {"label" : "cogenCsvParseError", "tail" : ": Cogen[ParseError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvParseError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenCsvParseError:org.scalacheck.Cogen[kantan.csv.ParseError]", "kind" : "implicit val"}, {"label" : "cogenCsvNoSuchElement", "tail" : ": Cogen[NoSuchElement.type]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvNoSuchElement", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenCsvNoSuchElement:org.scalacheck.Cogen[kantan.csv.ParseError.NoSuchElement.type]", "kind" : "implicit val"}, {"label" : "cogenCsvIOError", "tail" : ": Cogen[IOError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.cogenCsvIOError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenCsvIOError:org.scalacheck.Cogen[kantan.csv.ParseError.IOError]", "kind" : "implicit val"}, {"label" : "arbReadError", "tail" : ": Arbitrary[ReadError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbReadError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbReadError:org.scalacheck.Arbitrary[kantan.csv.ReadError]", "kind" : "implicit val"}, {"label" : "arbParseError", "tail" : ": Arbitrary[ParseError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbParseError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbParseError:org.scalacheck.Arbitrary[kantan.csv.ParseError]", "kind" : "implicit val"}, {"label" : "arbDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbDecodeError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbDecodeError:org.scalacheck.Arbitrary[kantan.csv.DecodeError]", "kind" : "implicit val"}, {"label" : "arbOutOfBounds", "tail" : ": Arbitrary[OutOfBounds]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbOutOfBounds", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbOutOfBounds:org.scalacheck.Arbitrary[kantan.csv.DecodeError.OutOfBounds]", "kind" : "implicit val"}, {"label" : "arbNoSuchElement", "tail" : ": Arbitrary[NoSuchElement.type]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbNoSuchElement", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbNoSuchElement:org.scalacheck.Arbitrary[kantan.csv.ParseError.NoSuchElement.type]", "kind" : "implicit val"}, {"label" : "arbIOError", "tail" : ": Arbitrary[IOError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbIOError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbIOError:org.scalacheck.Arbitrary[kantan.csv.ParseError.IOError]", "kind" : "implicit val"}, {"label" : "arbTypeError", "tail" : ": Arbitrary[TypeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbTypeError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbTypeError:org.scalacheck.Arbitrary[kantan.csv.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "genReadError", "tail" : ": Gen[ReadError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genReadError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genReadError:org.scalacheck.Gen[kantan.csv.ReadError]", "kind" : "val"}, {"label" : "genParseError", "tail" : ": Gen[ParseError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genParseError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genParseError:org.scalacheck.Gen[kantan.csv.ParseError]", "kind" : "val"}, {"label" : "genNoSuchElement", "tail" : ": Gen[NoSuchElement.type]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genNoSuchElement", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genNoSuchElement:org.scalacheck.Gen[kantan.csv.ParseError.NoSuchElement.type]", "kind" : "val"}, {"label" : "genIOError", "tail" : ": Gen[IOError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genIOError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIOError:org.scalacheck.Gen[kantan.csv.ParseError.IOError]", "kind" : "val"}, {"label" : "genDecodeError", "tail" : ": Gen[DecodeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genDecodeError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genDecodeError:org.scalacheck.Gen[kantan.csv.DecodeError]", "kind" : "val"}, {"label" : "genTypeError", "tail" : ": Gen[TypeError]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genTypeError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genTypeError:org.scalacheck.Gen[kantan.csv.DecodeError.TypeError]", "kind" : "val"}, {"label" : "genOutOfBoundsError", "tail" : ": Gen[OutOfBounds]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.genOutOfBoundsError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genOutOfBoundsError:org.scalacheck.Gen[kantan.csv.DecodeError.OutOfBounds]", "kind" : "val"}, {"label" : "arbTuple1", "tail" : "(arg0: Arbitrary[A]): Arbitrary[(A)]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.arbTuple1", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbTuple1[A](implicitevidence$1:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[(A,)]", "kind" : "implicit def"}, {"label" : "csv", "tail" : ": Gen[List[List[String]]]", "member" : "kantan.csv.laws.discipline.ArbitraryInstances.csv", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#csv:org.scalacheck.Gen[List[List[String]]]", "kind" : "val"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbEncoder[E,D,T](implicitevidence$7:org.scalacheck.Arbitrary[E],implicitevidence$8:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Cogen[E], arg1: Arbitrary[D], arg2: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Cogen[E],implicitevidence$5:org.scalacheck.Arbitrary[D],implicitevidence$6:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.discipline.CellCodecTests", "shortDescription" : "", "object" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: CellCodecLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalCell[A]]): CellCodecTests[A]", "member" : "kantan.csv.laws.discipline.CellCodecTests.apply", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#apply[A](implicitevidence$1:kantan.csv.laws.CellCodecLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.csv.laws.LegalCell[A]]):kantan.csv.laws.discipline.CellCodecTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/CellCodecTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.laws.discipline.CellDecoderTests", "shortDescription" : "", "object" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: CellDecoderLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalCell[A]]): CellDecoderTests[A]", "member" : "kantan.csv.laws.discipline.CellDecoderTests.apply", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#apply[A](implicitevidence$1:kantan.csv.laws.CellDecoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.csv.laws.LegalCell[A]]):kantan.csv.laws.discipline.CellDecoderTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/CellDecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.laws.discipline.CellEncoderTests", "shortDescription" : "", "object" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: CellEncoderLaws[A], arg1: Arbitrary[A], al: Arbitrary[LegalCell[A]]): CellEncoderTests[A]", "member" : "kantan.csv.laws.discipline.CellEncoderTests.apply", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#apply[A](implicitevidence$1:kantan.csv.laws.CellEncoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicital:org.scalacheck.Arbitrary[kantan.csv.laws.LegalCell[A]]):kantan.csv.laws.discipline.CellEncoderTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/CellEncoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.laws.discipline.equality", "shortDescription" : "", "object" : "kantan\/csv\/laws\/discipline\/equality$.html", "members_object" : [{"label" : "rowEncoder", "tail" : "(c1: RowEncoder[A], c2: RowEncoder[A])(arg0: Arbitrary[A]): Boolean", "member" : "kantan.csv.laws.discipline.equality.rowEncoder", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#rowEncoder[A](c1:kantan.csv.RowEncoder[A],c2:kantan.csv.RowEncoder[A])(implicitevidence$3:org.scalacheck.Arbitrary[A]):Boolean", "kind" : "def"}, {"label" : "rowDecoder", "tail" : "(c1: RowDecoder[A], c2: RowDecoder[A])(f: (DecodeResult[A], DecodeResult[A]) => Boolean): Boolean", "member" : "kantan.csv.laws.discipline.equality.rowDecoder", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#rowDecoder[A](c1:kantan.csv.RowDecoder[A],c2:kantan.csv.RowDecoder[A])(f:(kantan.csv.DecodeResult[A],kantan.csv.DecodeResult[A])=>Boolean):Boolean", "kind" : "def"}, {"label" : "cellEncoder", "tail" : "(c1: CellEncoder[A], c2: CellEncoder[A])(arg0: Arbitrary[A]): Boolean", "member" : "kantan.csv.laws.discipline.equality.cellEncoder", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#cellEncoder[A](c1:kantan.csv.CellEncoder[A],c2:kantan.csv.CellEncoder[A])(implicitevidence$2:org.scalacheck.Arbitrary[A]):Boolean", "kind" : "def"}, {"label" : "cellDecoder", "tail" : "(c1: CellDecoder[A], c2: CellDecoder[A])(f: (DecodeResult[A], DecodeResult[A]) => Boolean): Boolean", "member" : "kantan.csv.laws.discipline.equality.cellDecoder", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#cellDecoder[A](c1:kantan.csv.CellDecoder[A],c2:kantan.csv.CellDecoder[A])(f:(kantan.csv.DecodeResult[A],kantan.csv.DecodeResult[A])=>Boolean):Boolean", "kind" : "def"}, {"label" : "eq", "tail" : "(a1: (B) => A, a2: (B) => A)(f: (A, A) => Boolean)(arg0: Arbitrary[B]): Boolean", "member" : "kantan.csv.laws.discipline.equality.eq", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#eq[A,B](a1:B=>A,a2:B=>A)(f:(A,A)=>Boolean)(implicitevidence$1:org.scalacheck.Arbitrary[B]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/equality$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/equality$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.laws.discipline.KnownFormatsReaderTests", "trait" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "knownFormats", "tail" : "(): RuleSet", "member" : "kantan.csv.laws.discipline.KnownFormatsReaderTests.knownFormats", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#knownFormats:KnownFormatsReaderTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): KnownFormatsReaderLaws", "member" : "kantan.csv.laws.discipline.KnownFormatsReaderTests.laws", "link" : "kantan\/csv\/laws\/discipline\/KnownFormatsReaderTests.html#laws:kantan.csv.laws.KnownFormatsReaderLaws", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.discipline.ReaderEngineTests", "object" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html", "members_object" : [{"label" : "apply", "tail" : "(engine: ReaderEngine): ReaderEngineTests", "member" : "kantan.csv.laws.discipline.ReaderEngineTests.apply", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#apply(engine:kantan.csv.engine.ReaderEngine):kantan.csv.laws.discipline.ReaderEngineTests", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "readerEngine", "tail" : "(): RuleSet", "member" : "kantan.csv.laws.discipline.ReaderEngineTests.readerEngine", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#readerEngine:ReaderEngineTests.this.RuleSet", "kind" : "def"}, {"label" : "versionSpecificProps", "tail" : "(): Seq[(String, Prop)]", "member" : "kantan.csv.laws.discipline.VersionSpecificReaderEngineTests.versionSpecificProps", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#versionSpecificProps:Seq[(String,org.scalacheck.Prop)]", "kind" : "def"}, {"label" : "knownFormats", "tail" : "(): RuleSet", "member" : "kantan.csv.laws.discipline.KnownFormatsReaderTests.knownFormats", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#knownFormats:KnownFormatsReaderTests.this.RuleSet", "kind" : "def"}, {"label" : "csvSpectrum", "tail" : "(): RuleSet", "member" : "kantan.csv.laws.discipline.SpectrumReaderTests.csvSpectrum", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#csvSpectrum:SpectrumReaderTests.this.RuleSet", "kind" : "def"}, {"label" : "rfc4180", "tail" : "(): RuleSet", "member" : "kantan.csv.laws.discipline.RfcReaderTests.rfc4180", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#rfc4180:RfcReaderTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): ReaderEngineLaws", "member" : "kantan.csv.laws.discipline.ReaderEngineTests.laws", "link" : "kantan\/csv\/laws\/discipline\/ReaderEngineTests.html#laws:kantan.csv.laws.ReaderEngineLaws", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.discipline.RfcReaderTests", "trait" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "rfc4180", "tail" : "(): RuleSet", "member" : "kantan.csv.laws.discipline.RfcReaderTests.rfc4180", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#rfc4180:RfcReaderTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): RfcReaderLaws", "member" : "kantan.csv.laws.discipline.RfcReaderTests.laws", "link" : "kantan\/csv\/laws\/discipline\/RfcReaderTests.html#laws:kantan.csv.laws.RfcReaderLaws", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.discipline.RowCodecTests", "shortDescription" : "", "object" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: RowCodecLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalRow[A]]): RowCodecTests[A]", "member" : "kantan.csv.laws.discipline.RowCodecTests.apply", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#apply[A](implicitevidence$1:kantan.csv.laws.RowCodecLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.csv.laws.LegalRow[A]]):kantan.csv.laws.discipline.RowCodecTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/RowCodecTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.laws.discipline.RowDecoderTests", "shortDescription" : "", "object" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: RowDecoderLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalRow[A]]): RowDecoderTests[A]", "member" : "kantan.csv.laws.discipline.RowDecoderTests.apply", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#apply[A](implicitevidence$1:kantan.csv.laws.RowDecoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.csv.laws.LegalRow[A]]):kantan.csv.laws.discipline.RowDecoderTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/RowDecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.laws.discipline.RowEncoderTests", "shortDescription" : "", "object" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: RowEncoderLaws[A], arg1: Arbitrary[A], al: Arbitrary[LegalRow[A]]): RowEncoderTests[A]", "member" : "kantan.csv.laws.discipline.RowEncoderTests.apply", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#apply[A](implicitevidence$1:kantan.csv.laws.RowEncoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicital:org.scalacheck.Arbitrary[kantan.csv.laws.LegalRow[A]]):kantan.csv.laws.discipline.RowEncoderTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/RowEncoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.laws.discipline.SpectrumReaderTests", "trait" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "csvSpectrum", "tail" : "(): RuleSet", "member" : "kantan.csv.laws.discipline.SpectrumReaderTests.csvSpectrum", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#csvSpectrum:SpectrumReaderTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): SpectrumReaderLaws", "member" : "kantan.csv.laws.discipline.SpectrumReaderTests.laws", "link" : "kantan\/csv\/laws\/discipline\/SpectrumReaderTests.html#laws:kantan.csv.laws.SpectrumReaderLaws", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.discipline.VersionSpecificReaderEngineTests", "trait" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html", "kind" : "trait", "members_trait" : [{"label" : "versionSpecificProps", "tail" : "(): Seq[(String, Prop)]", "member" : "kantan.csv.laws.discipline.VersionSpecificReaderEngineTests.versionSpecificProps", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#versionSpecificProps:Seq[(String,org.scalacheck.Prop)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/VersionSpecificReaderEngineTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.discipline.WriterEngineTests", "object" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html", "members_object" : [{"label" : "apply", "tail" : "(engine: WriterEngine): WriterEngineTests", "member" : "kantan.csv.laws.discipline.WriterEngineTests.apply", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#apply(engine:kantan.csv.engine.WriterEngine):kantan.csv.laws.discipline.WriterEngineTests", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "writerEngine", "tail" : "(): RuleSet", "member" : "kantan.csv.laws.discipline.WriterEngineTests.writerEngine", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#writerEngine:WriterEngineTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): WriterEngineLaws", "member" : "kantan.csv.laws.discipline.WriterEngineTests.laws", "link" : "kantan\/csv\/laws\/discipline\/WriterEngineTests.html#laws:kantan.csv.laws.WriterEngineLaws", "kind" : "abstract def"}], "shortDescription" : ""}], "kantan" : [], "kantan.csv" : [{"name" : "kantan.csv.CellCodec", "shortDescription" : "Declares helpful methods for CellCodec creation.", "object" : "kantan\/csv\/CellCodec$.html", "members_object" : [{"label" : "dateCodec", "tail" : "(format: DateFormat): CellCodec[Date]", "member" : "kantan.csv.PlatformSpecificCellCodecInstances.dateCodec", "link" : "kantan\/csv\/CellCodec$.html#dateCodec(format:java.text.DateFormat):kantan.csv.CellCodec[java.util.Date]", "kind" : "def"}, {"label" : "from", "tail" : "(d: Decoder[String, D, DecodeError, codecs.type], e: Encoder[String, D, codecs.type]): Codec[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/csv\/CellCodec$.html#from[D](d:kantan.codecs.Decoder[E,D,F,T],e:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (String) => Either[DecodeError, D])(g: (D) => String): Codec[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/csv\/CellCodec$.html#from[D](f:E=>Either[F,D])(g:D=>E):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CellCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CellCodec$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CellCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CellCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CellCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CellCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CellCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CellCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CellCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CellCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CellCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CellCodec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CellCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CellCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CellCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CellCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "imapEncoded", "tail" : "(f: (E) => EE)(g: (EE) => E): Codec[EE, D, F, T]", "member" : "kantan.codecs.Codec.imapEncoded", "link" : "kantan\/csv\/package$$CellCodec.html#imapEncoded[EE](f:E=>EE)(g:EE=>E):kantan.codecs.Codec[EE,D,F,T]", "kind" : "def"}, {"label" : "imap", "tail" : "(f: (D) => DD)(g: (DD) => D): Codec[E, DD, F, T]", "member" : "kantan.codecs.Codec.imap", "link" : "kantan\/csv\/package$$CellCodec.html#imap[DD](f:D=>DD)(g:DD=>D):kantan.codecs.Codec[E,DD,F,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Codec[E, D, FF, T]", "member" : "kantan.codecs.Codec.mapError", "link" : "kantan\/csv\/package$$CellCodec.html#mapError[FF](f:F=>FF):kantan.codecs.Codec[E,D,FF,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Codec[E, D, FF, T]", "member" : "kantan.codecs.Codec.leftMap", "link" : "kantan\/csv\/package$$CellCodec.html#leftMap[FF](f:F=>FF):kantan.codecs.Codec[E,D,FF,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Codec[E, D, F, TT]", "member" : "kantan.codecs.Codec.tag", "link" : "kantan\/csv\/package$$CellCodec.html#tag[TT]:kantan.codecs.Codec[E,D,F,TT]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (DD) => D): Encoder[E, DD, T]", "member" : "kantan.codecs.Encoder.contramap", "link" : "kantan\/csv\/package$$CellCodec.html#contramap[DD](f:DD=>D):kantan.codecs.Encoder[E,DD,T]", "kind" : "def"}, {"label" : "mapEncoded", "tail" : "(f: (E) => EE): Encoder[EE, D, T]", "member" : "kantan.codecs.Encoder.mapEncoded", "link" : "kantan\/csv\/package$$CellCodec.html#mapEncoded[EE](f:E=>EE):kantan.codecs.Encoder[EE,D,T]", "kind" : "def"}, {"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/csv\/package$$CellCodec.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/csv\/package$$CellCodec.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/csv\/package$$CellCodec.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/csv\/package$$CellCodec.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/csv\/package$$CellCodec.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/csv\/package$$CellCodec.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/csv\/package$$CellCodec.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/csv\/package$$CellCodec.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/csv\/package$$CellCodec.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/csv\/package$$CellCodec.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/csv\/package$$CellCodec.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/csv\/package$$CellCodec.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/csv\/package$$CellCodec.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/csv\/package$$CellCodec.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$CellCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$CellCodec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$CellCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$CellCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$CellCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$CellCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$CellCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$CellCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$CellCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$CellCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$CellCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$CellCodec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$CellCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$CellCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$CellCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$CellCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encode", "tail" : "(d: D): E", "member" : "kantan.codecs.Encoder.encode", "link" : "kantan\/csv\/package$$CellCodec.html#encode(d:D):E", "kind" : "abstract def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/csv\/package$$CellCodec.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$CellCodec.html"}, {"name" : "kantan.csv.CellCodecInstances", "trait" : "kantan\/csv\/CellCodecInstances.html", "kind" : "trait", "members_trait" : [{"label" : "cellDecoderEither", "tail" : "(arg0: CellDecoder[A], arg1: CellDecoder[B]): CellDecoder[Either[A, B]]", "member" : "kantan.csv.CellDecoderInstances.cellDecoderEither", "link" : "kantan\/csv\/CellCodecInstances.html#cellDecoderEither[A,B](implicitevidence$3:kantan.csv.CellDecoder[A],implicitevidence$4:kantan.csv.CellDecoder[B]):kantan.csv.CellDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "cellDecoderOpt", "tail" : "(arg0: CellDecoder[A]): CellDecoder[Option[A]]", "member" : "kantan.csv.CellDecoderInstances.cellDecoderOpt", "link" : "kantan\/csv\/CellCodecInstances.html#cellDecoderOpt[A](implicitevidence$2:kantan.csv.CellDecoder[A]):kantan.csv.CellDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromStringDecoder", "tail" : "(arg0: StringDecoder[A]): CellDecoder[A]", "member" : "kantan.csv.CellDecoderInstances.fromStringDecoder", "link" : "kantan\/csv\/CellCodecInstances.html#fromStringDecoder[A](implicitevidence$1:kantan.codecs.strings.StringDecoder[A]):kantan.csv.CellDecoder[A]", "kind" : "implicit def"}, {"label" : "eitherCellEncoder", "tail" : "(arg0: CellEncoder[A], arg1: CellEncoder[B]): CellEncoder[Either[A, B]]", "member" : "kantan.csv.CellEncoderInstances.eitherCellEncoder", "link" : "kantan\/csv\/CellCodecInstances.html#eitherCellEncoder[A,B](implicitevidence$3:kantan.csv.CellEncoder[A],implicitevidence$4:kantan.csv.CellEncoder[B]):kantan.csv.CellEncoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "cellEncoderOpt", "tail" : "(arg0: CellEncoder[A]): CellEncoder[Option[A]]", "member" : "kantan.csv.CellEncoderInstances.cellEncoderOpt", "link" : "kantan\/csv\/CellCodecInstances.html#cellEncoderOpt[A](implicitevidence$2:kantan.csv.CellEncoder[A]):kantan.csv.CellEncoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromStringEncoder", "tail" : "(arg0: StringEncoder[A]): CellEncoder[A]", "member" : "kantan.csv.CellEncoderInstances.fromStringEncoder", "link" : "kantan\/csv\/CellCodecInstances.html#fromStringEncoder[A](implicitevidence$1:kantan.codecs.strings.StringEncoder[A]):kantan.csv.CellEncoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CellCodecInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CellCodecInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CellCodecInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CellCodecInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CellCodecInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CellCodecInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CellCodecInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellCodecInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellCodecInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellCodecInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CellCodecInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CellCodecInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CellCodecInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CellCodecInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CellCodecInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CellCodecInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CellCodecInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CellCodecInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CellCodecInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "All default CellCodec instances."}, {"name" : "kantan.csv.CellDecoder", "shortDescription" : "Provides useful methods for summoning and creating instances of CellDecoder.", "object" : "kantan\/csv\/CellDecoder$.html", "members_object" : [{"label" : "dateDecoder", "tail" : "(format: DateFormat): CellDecoder[Date]", "member" : "kantan.csv.PlatformSpecificCellDecoderInstances.dateDecoder", "link" : "kantan\/csv\/CellDecoder$.html#dateDecoder(format:java.text.DateFormat):kantan.csv.CellDecoder[java.util.Date]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(ds: Decoder[String, D, DecodeError, codecs.type]*)(i: IsError[DecodeError]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/csv\/CellDecoder$.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[String, Either[DecodeError, D]])(t: IsError[DecodeError]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/csv\/CellDecoder$.html#fromPartial[D](f:PartialFunction[E,Either[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (String) => D)(t: IsError[DecodeError]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/csv\/CellDecoder$.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (String) => Either[DecodeError, D]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/csv\/CellDecoder$.html#from[D](f:E=>Either[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[String, D, DecodeError, codecs.type]): Decoder[String, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/csv\/CellDecoder$.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CellDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CellDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CellDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CellDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CellDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CellDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CellDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CellDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CellDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CellDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CellDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CellDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CellDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CellDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CellDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CellDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/csv\/package$$CellDecoder.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/csv\/package$$CellDecoder.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Decoder[E, D, F, TT]", "member" : "kantan.codecs.Decoder.tag", "link" : "kantan\/csv\/package$$CellDecoder.html#tag[TT]:kantan.codecs.Decoder[E,D,F,TT]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/csv\/package$$CellDecoder.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.leftMap", "link" : "kantan\/csv\/package$$CellDecoder.html#leftMap[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.mapError", "link" : "kantan\/csv\/package$$CellDecoder.html#mapError[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/csv\/package$$CellDecoder.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/csv\/package$$CellDecoder.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/csv\/package$$CellDecoder.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/csv\/package$$CellDecoder.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/csv\/package$$CellDecoder.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/csv\/package$$CellDecoder.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/csv\/package$$CellDecoder.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/csv\/package$$CellDecoder.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/csv\/package$$CellDecoder.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/csv\/package$$CellDecoder.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/csv\/package$$CellDecoder.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$CellDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$CellDecoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$CellDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$CellDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$CellDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$CellDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$CellDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$CellDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$CellDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$CellDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$CellDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$CellDecoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$CellDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$CellDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$CellDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$CellDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/csv\/package$$CellDecoder.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$CellDecoder.html"}, {"name" : "kantan.csv.CellDecoderInstances", "trait" : "kantan\/csv\/CellDecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "cellDecoderEither", "tail" : "(arg0: CellDecoder[A], arg1: CellDecoder[B]): CellDecoder[Either[A, B]]", "member" : "kantan.csv.CellDecoderInstances.cellDecoderEither", "link" : "kantan\/csv\/CellDecoderInstances.html#cellDecoderEither[A,B](implicitevidence$3:kantan.csv.CellDecoder[A],implicitevidence$4:kantan.csv.CellDecoder[B]):kantan.csv.CellDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "cellDecoderOpt", "tail" : "(arg0: CellDecoder[A]): CellDecoder[Option[A]]", "member" : "kantan.csv.CellDecoderInstances.cellDecoderOpt", "link" : "kantan\/csv\/CellDecoderInstances.html#cellDecoderOpt[A](implicitevidence$2:kantan.csv.CellDecoder[A]):kantan.csv.CellDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromStringDecoder", "tail" : "(arg0: StringDecoder[A]): CellDecoder[A]", "member" : "kantan.csv.CellDecoderInstances.fromStringDecoder", "link" : "kantan\/csv\/CellDecoderInstances.html#fromStringDecoder[A](implicitevidence$1:kantan.codecs.strings.StringDecoder[A]):kantan.csv.CellDecoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CellDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CellDecoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CellDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CellDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CellDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CellDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CellDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CellDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CellDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CellDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CellDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CellDecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CellDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CellDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CellDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CellDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "All default CellDecoder instances."}, {"name" : "kantan.csv.CellEncoder", "shortDescription" : "Provides useful methods for summoning and creating instances of CellEncoder.", "object" : "kantan\/csv\/CellEncoder$.html", "members_object" : [{"label" : "dateEncoder", "tail" : "(format: DateFormat): CellEncoder[Date]", "member" : "kantan.csv.PlatformSpecificCellEncoderInstances.dateEncoder", "link" : "kantan\/csv\/CellEncoder$.html#dateEncoder(format:java.text.DateFormat):kantan.csv.CellEncoder[java.util.Date]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (D) => String): Encoder[String, D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.from", "link" : "kantan\/csv\/CellEncoder$.html#from[D](f:D=>E):kantan.codecs.Encoder[E,D,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Encoder[String, D, codecs.type]): Encoder[String, D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.apply", "link" : "kantan\/csv\/CellEncoder$.html#apply[D](implicitev:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CellEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CellEncoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CellEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CellEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CellEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CellEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CellEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CellEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CellEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CellEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CellEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CellEncoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CellEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CellEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CellEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CellEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "tag", "tail" : "(): Encoder[E, D, TT]", "member" : "kantan.codecs.Encoder.tag", "link" : "kantan\/csv\/package$$CellEncoder.html#tag[TT]:kantan.codecs.Encoder[E,D,TT]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (DD) => D): Encoder[E, DD, T]", "member" : "kantan.codecs.Encoder.contramap", "link" : "kantan\/csv\/package$$CellEncoder.html#contramap[DD](f:DD=>D):kantan.codecs.Encoder[E,DD,T]", "kind" : "def"}, {"label" : "mapEncoded", "tail" : "(f: (E) => EE): Encoder[EE, D, T]", "member" : "kantan.codecs.Encoder.mapEncoded", "link" : "kantan\/csv\/package$$CellEncoder.html#mapEncoded[EE](f:E=>EE):kantan.codecs.Encoder[EE,D,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$CellEncoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$CellEncoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$CellEncoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$CellEncoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$CellEncoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$CellEncoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$CellEncoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellEncoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellEncoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CellEncoder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$CellEncoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$CellEncoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$CellEncoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$CellEncoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$CellEncoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$CellEncoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$CellEncoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$CellEncoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$CellEncoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encode", "tail" : "(d: D): E", "member" : "kantan.codecs.Encoder.encode", "link" : "kantan\/csv\/package$$CellEncoder.html#encode(d:D):E", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$CellEncoder.html"}, {"name" : "kantan.csv.CellEncoderInstances", "trait" : "kantan\/csv\/CellEncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "eitherCellEncoder", "tail" : "(arg0: CellEncoder[A], arg1: CellEncoder[B]): CellEncoder[Either[A, B]]", "member" : "kantan.csv.CellEncoderInstances.eitherCellEncoder", "link" : "kantan\/csv\/CellEncoderInstances.html#eitherCellEncoder[A,B](implicitevidence$3:kantan.csv.CellEncoder[A],implicitevidence$4:kantan.csv.CellEncoder[B]):kantan.csv.CellEncoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "cellEncoderOpt", "tail" : "(arg0: CellEncoder[A]): CellEncoder[Option[A]]", "member" : "kantan.csv.CellEncoderInstances.cellEncoderOpt", "link" : "kantan\/csv\/CellEncoderInstances.html#cellEncoderOpt[A](implicitevidence$2:kantan.csv.CellEncoder[A]):kantan.csv.CellEncoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromStringEncoder", "tail" : "(arg0: StringEncoder[A]): CellEncoder[A]", "member" : "kantan.csv.CellEncoderInstances.fromStringEncoder", "link" : "kantan\/csv\/CellEncoderInstances.html#fromStringEncoder[A](implicitevidence$1:kantan.codecs.strings.StringEncoder[A]):kantan.csv.CellEncoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CellEncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CellEncoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CellEncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CellEncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CellEncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CellEncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CellEncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellEncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellEncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CellEncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CellEncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CellEncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CellEncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CellEncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CellEncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CellEncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CellEncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CellEncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CellEncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "All default CellEncoder instances."}, {"name" : "kantan.csv.codecs", "shortDescription" : "Defines default instances for CellEncoder, CellDecoder, RowEncoder and RowDecoder.", "object" : "kantan\/csv\/codecs$.html", "members_object" : [{"label" : "tupleRowEncoder22", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder22", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$485:kantan.csv.CellEncoder[A1],implicitevidence$486:kantan.csv.CellEncoder[A2],implicitevidence$487:kantan.csv.CellEncoder[A3],implicitevidence$488:kantan.csv.CellEncoder[A4],implicitevidence$489:kantan.csv.CellEncoder[A5],implicitevidence$490:kantan.csv.CellEncoder[A6],implicitevidence$491:kantan.csv.CellEncoder[A7],implicitevidence$492:kantan.csv.CellEncoder[A8],implicitevidence$493:kantan.csv.CellEncoder[A9],implicitevidence$494:kantan.csv.CellEncoder[A10],implicitevidence$495:kantan.csv.CellEncoder[A11],implicitevidence$496:kantan.csv.CellEncoder[A12],implicitevidence$497:kantan.csv.CellEncoder[A13],implicitevidence$498:kantan.csv.CellEncoder[A14],implicitevidence$499:kantan.csv.CellEncoder[A15],implicitevidence$500:kantan.csv.CellEncoder[A16],implicitevidence$501:kantan.csv.CellEncoder[A17],implicitevidence$502:kantan.csv.CellEncoder[A18],implicitevidence$503:kantan.csv.CellEncoder[A19],implicitevidence$504:kantan.csv.CellEncoder[A20],implicitevidence$505:kantan.csv.CellEncoder[A21],implicitevidence$506:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder21", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder21", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$464:kantan.csv.CellEncoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellEncoder[A3],implicitevidence$467:kantan.csv.CellEncoder[A4],implicitevidence$468:kantan.csv.CellEncoder[A5],implicitevidence$469:kantan.csv.CellEncoder[A6],implicitevidence$470:kantan.csv.CellEncoder[A7],implicitevidence$471:kantan.csv.CellEncoder[A8],implicitevidence$472:kantan.csv.CellEncoder[A9],implicitevidence$473:kantan.csv.CellEncoder[A10],implicitevidence$474:kantan.csv.CellEncoder[A11],implicitevidence$475:kantan.csv.CellEncoder[A12],implicitevidence$476:kantan.csv.CellEncoder[A13],implicitevidence$477:kantan.csv.CellEncoder[A14],implicitevidence$478:kantan.csv.CellEncoder[A15],implicitevidence$479:kantan.csv.CellEncoder[A16],implicitevidence$480:kantan.csv.CellEncoder[A17],implicitevidence$481:kantan.csv.CellEncoder[A18],implicitevidence$482:kantan.csv.CellEncoder[A19],implicitevidence$483:kantan.csv.CellEncoder[A20],implicitevidence$484:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder20", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder20", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$444:kantan.csv.CellEncoder[A1],implicitevidence$445:kantan.csv.CellEncoder[A2],implicitevidence$446:kantan.csv.CellEncoder[A3],implicitevidence$447:kantan.csv.CellEncoder[A4],implicitevidence$448:kantan.csv.CellEncoder[A5],implicitevidence$449:kantan.csv.CellEncoder[A6],implicitevidence$450:kantan.csv.CellEncoder[A7],implicitevidence$451:kantan.csv.CellEncoder[A8],implicitevidence$452:kantan.csv.CellEncoder[A9],implicitevidence$453:kantan.csv.CellEncoder[A10],implicitevidence$454:kantan.csv.CellEncoder[A11],implicitevidence$455:kantan.csv.CellEncoder[A12],implicitevidence$456:kantan.csv.CellEncoder[A13],implicitevidence$457:kantan.csv.CellEncoder[A14],implicitevidence$458:kantan.csv.CellEncoder[A15],implicitevidence$459:kantan.csv.CellEncoder[A16],implicitevidence$460:kantan.csv.CellEncoder[A17],implicitevidence$461:kantan.csv.CellEncoder[A18],implicitevidence$462:kantan.csv.CellEncoder[A19],implicitevidence$463:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder19", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder19", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$425:kantan.csv.CellEncoder[A1],implicitevidence$426:kantan.csv.CellEncoder[A2],implicitevidence$427:kantan.csv.CellEncoder[A3],implicitevidence$428:kantan.csv.CellEncoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellEncoder[A6],implicitevidence$431:kantan.csv.CellEncoder[A7],implicitevidence$432:kantan.csv.CellEncoder[A8],implicitevidence$433:kantan.csv.CellEncoder[A9],implicitevidence$434:kantan.csv.CellEncoder[A10],implicitevidence$435:kantan.csv.CellEncoder[A11],implicitevidence$436:kantan.csv.CellEncoder[A12],implicitevidence$437:kantan.csv.CellEncoder[A13],implicitevidence$438:kantan.csv.CellEncoder[A14],implicitevidence$439:kantan.csv.CellEncoder[A15],implicitevidence$440:kantan.csv.CellEncoder[A16],implicitevidence$441:kantan.csv.CellEncoder[A17],implicitevidence$442:kantan.csv.CellEncoder[A18],implicitevidence$443:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder18", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder18", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$407:kantan.csv.CellEncoder[A1],implicitevidence$408:kantan.csv.CellEncoder[A2],implicitevidence$409:kantan.csv.CellEncoder[A3],implicitevidence$410:kantan.csv.CellEncoder[A4],implicitevidence$411:kantan.csv.CellEncoder[A5],implicitevidence$412:kantan.csv.CellEncoder[A6],implicitevidence$413:kantan.csv.CellEncoder[A7],implicitevidence$414:kantan.csv.CellEncoder[A8],implicitevidence$415:kantan.csv.CellEncoder[A9],implicitevidence$416:kantan.csv.CellEncoder[A10],implicitevidence$417:kantan.csv.CellEncoder[A11],implicitevidence$418:kantan.csv.CellEncoder[A12],implicitevidence$419:kantan.csv.CellEncoder[A13],implicitevidence$420:kantan.csv.CellEncoder[A14],implicitevidence$421:kantan.csv.CellEncoder[A15],implicitevidence$422:kantan.csv.CellEncoder[A16],implicitevidence$423:kantan.csv.CellEncoder[A17],implicitevidence$424:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder17", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder17", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$390:kantan.csv.CellEncoder[A1],implicitevidence$391:kantan.csv.CellEncoder[A2],implicitevidence$392:kantan.csv.CellEncoder[A3],implicitevidence$393:kantan.csv.CellEncoder[A4],implicitevidence$394:kantan.csv.CellEncoder[A5],implicitevidence$395:kantan.csv.CellEncoder[A6],implicitevidence$396:kantan.csv.CellEncoder[A7],implicitevidence$397:kantan.csv.CellEncoder[A8],implicitevidence$398:kantan.csv.CellEncoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellEncoder[A11],implicitevidence$401:kantan.csv.CellEncoder[A12],implicitevidence$402:kantan.csv.CellEncoder[A13],implicitevidence$403:kantan.csv.CellEncoder[A14],implicitevidence$404:kantan.csv.CellEncoder[A15],implicitevidence$405:kantan.csv.CellEncoder[A16],implicitevidence$406:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder16", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder16", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$374:kantan.csv.CellEncoder[A1],implicitevidence$375:kantan.csv.CellEncoder[A2],implicitevidence$376:kantan.csv.CellEncoder[A3],implicitevidence$377:kantan.csv.CellEncoder[A4],implicitevidence$378:kantan.csv.CellEncoder[A5],implicitevidence$379:kantan.csv.CellEncoder[A6],implicitevidence$380:kantan.csv.CellEncoder[A7],implicitevidence$381:kantan.csv.CellEncoder[A8],implicitevidence$382:kantan.csv.CellEncoder[A9],implicitevidence$383:kantan.csv.CellEncoder[A10],implicitevidence$384:kantan.csv.CellEncoder[A11],implicitevidence$385:kantan.csv.CellEncoder[A12],implicitevidence$386:kantan.csv.CellEncoder[A13],implicitevidence$387:kantan.csv.CellEncoder[A14],implicitevidence$388:kantan.csv.CellEncoder[A15],implicitevidence$389:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder15", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder15", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$359:kantan.csv.CellEncoder[A1],implicitevidence$360:kantan.csv.CellEncoder[A2],implicitevidence$361:kantan.csv.CellEncoder[A3],implicitevidence$362:kantan.csv.CellEncoder[A4],implicitevidence$363:kantan.csv.CellEncoder[A5],implicitevidence$364:kantan.csv.CellEncoder[A6],implicitevidence$365:kantan.csv.CellEncoder[A7],implicitevidence$366:kantan.csv.CellEncoder[A8],implicitevidence$367:kantan.csv.CellEncoder[A9],implicitevidence$368:kantan.csv.CellEncoder[A10],implicitevidence$369:kantan.csv.CellEncoder[A11],implicitevidence$370:kantan.csv.CellEncoder[A12],implicitevidence$371:kantan.csv.CellEncoder[A13],implicitevidence$372:kantan.csv.CellEncoder[A14],implicitevidence$373:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder14", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder14", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$345:kantan.csv.CellEncoder[A1],implicitevidence$346:kantan.csv.CellEncoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellEncoder[A4],implicitevidence$349:kantan.csv.CellEncoder[A5],implicitevidence$350:kantan.csv.CellEncoder[A6],implicitevidence$351:kantan.csv.CellEncoder[A7],implicitevidence$352:kantan.csv.CellEncoder[A8],implicitevidence$353:kantan.csv.CellEncoder[A9],implicitevidence$354:kantan.csv.CellEncoder[A10],implicitevidence$355:kantan.csv.CellEncoder[A11],implicitevidence$356:kantan.csv.CellEncoder[A12],implicitevidence$357:kantan.csv.CellEncoder[A13],implicitevidence$358:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder13", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder13", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$332:kantan.csv.CellEncoder[A1],implicitevidence$333:kantan.csv.CellEncoder[A2],implicitevidence$334:kantan.csv.CellEncoder[A3],implicitevidence$335:kantan.csv.CellEncoder[A4],implicitevidence$336:kantan.csv.CellEncoder[A5],implicitevidence$337:kantan.csv.CellEncoder[A6],implicitevidence$338:kantan.csv.CellEncoder[A7],implicitevidence$339:kantan.csv.CellEncoder[A8],implicitevidence$340:kantan.csv.CellEncoder[A9],implicitevidence$341:kantan.csv.CellEncoder[A10],implicitevidence$342:kantan.csv.CellEncoder[A11],implicitevidence$343:kantan.csv.CellEncoder[A12],implicitevidence$344:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder12", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder12", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$320:kantan.csv.CellEncoder[A1],implicitevidence$321:kantan.csv.CellEncoder[A2],implicitevidence$322:kantan.csv.CellEncoder[A3],implicitevidence$323:kantan.csv.CellEncoder[A4],implicitevidence$324:kantan.csv.CellEncoder[A5],implicitevidence$325:kantan.csv.CellEncoder[A6],implicitevidence$326:kantan.csv.CellEncoder[A7],implicitevidence$327:kantan.csv.CellEncoder[A8],implicitevidence$328:kantan.csv.CellEncoder[A9],implicitevidence$329:kantan.csv.CellEncoder[A10],implicitevidence$330:kantan.csv.CellEncoder[A11],implicitevidence$331:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder11", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder11", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$309:kantan.csv.CellEncoder[A1],implicitevidence$310:kantan.csv.CellEncoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellEncoder[A4],implicitevidence$313:kantan.csv.CellEncoder[A5],implicitevidence$314:kantan.csv.CellEncoder[A6],implicitevidence$315:kantan.csv.CellEncoder[A7],implicitevidence$316:kantan.csv.CellEncoder[A8],implicitevidence$317:kantan.csv.CellEncoder[A9],implicitevidence$318:kantan.csv.CellEncoder[A10],implicitevidence$319:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder10", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder10", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$299:kantan.csv.CellEncoder[A1],implicitevidence$300:kantan.csv.CellEncoder[A2],implicitevidence$301:kantan.csv.CellEncoder[A3],implicitevidence$302:kantan.csv.CellEncoder[A4],implicitevidence$303:kantan.csv.CellEncoder[A5],implicitevidence$304:kantan.csv.CellEncoder[A6],implicitevidence$305:kantan.csv.CellEncoder[A7],implicitevidence$306:kantan.csv.CellEncoder[A8],implicitevidence$307:kantan.csv.CellEncoder[A9],implicitevidence$308:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder9", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder9", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$290:kantan.csv.CellEncoder[A1],implicitevidence$291:kantan.csv.CellEncoder[A2],implicitevidence$292:kantan.csv.CellEncoder[A3],implicitevidence$293:kantan.csv.CellEncoder[A4],implicitevidence$294:kantan.csv.CellEncoder[A5],implicitevidence$295:kantan.csv.CellEncoder[A6],implicitevidence$296:kantan.csv.CellEncoder[A7],implicitevidence$297:kantan.csv.CellEncoder[A8],implicitevidence$298:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder8", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder8", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder8[A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$282:kantan.csv.CellEncoder[A1],implicitevidence$283:kantan.csv.CellEncoder[A2],implicitevidence$284:kantan.csv.CellEncoder[A3],implicitevidence$285:kantan.csv.CellEncoder[A4],implicitevidence$286:kantan.csv.CellEncoder[A5],implicitevidence$287:kantan.csv.CellEncoder[A6],implicitevidence$288:kantan.csv.CellEncoder[A7],implicitevidence$289:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder7", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder7", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder7[A1,A2,A3,A4,A5,A6,A7](implicitevidence$275:kantan.csv.CellEncoder[A1],implicitevidence$276:kantan.csv.CellEncoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellEncoder[A4],implicitevidence$279:kantan.csv.CellEncoder[A5],implicitevidence$280:kantan.csv.CellEncoder[A6],implicitevidence$281:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder6", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[(A1, A2, A3, A4, A5, A6)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder6", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder6[A1,A2,A3,A4,A5,A6](implicitevidence$269:kantan.csv.CellEncoder[A1],implicitevidence$270:kantan.csv.CellEncoder[A2],implicitevidence$271:kantan.csv.CellEncoder[A3],implicitevidence$272:kantan.csv.CellEncoder[A4],implicitevidence$273:kantan.csv.CellEncoder[A5],implicitevidence$274:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder5", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[(A1, A2, A3, A4, A5)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder5", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder5[A1,A2,A3,A4,A5](implicitevidence$264:kantan.csv.CellEncoder[A1],implicitevidence$265:kantan.csv.CellEncoder[A2],implicitevidence$266:kantan.csv.CellEncoder[A3],implicitevidence$267:kantan.csv.CellEncoder[A4],implicitevidence$268:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder4", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[(A1, A2, A3, A4)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder4", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder4[A1,A2,A3,A4](implicitevidence$260:kantan.csv.CellEncoder[A1],implicitevidence$261:kantan.csv.CellEncoder[A2],implicitevidence$262:kantan.csv.CellEncoder[A3],implicitevidence$263:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[(A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder3", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[(A1, A2, A3)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder3", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder3[A1,A2,A3](implicitevidence$257:kantan.csv.CellEncoder[A1],implicitevidence$258:kantan.csv.CellEncoder[A2],implicitevidence$259:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[(A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder2", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[(A1, A2)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder2", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder2[A1,A2](implicitevidence$255:kantan.csv.CellEncoder[A1],implicitevidence$256:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[(A1,A2)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder1", "tail" : "(arg0: CellEncoder[A1]): RowEncoder[(A1)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder1", "link" : "kantan\/csv\/codecs$.html#tupleRowEncoder1[A1](implicitevidence$254:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[(A1,)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder22", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21], arg21: CellDecoder[A22]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder22", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$232:kantan.csv.CellDecoder[A1],implicitevidence$233:kantan.csv.CellDecoder[A2],implicitevidence$234:kantan.csv.CellDecoder[A3],implicitevidence$235:kantan.csv.CellDecoder[A4],implicitevidence$236:kantan.csv.CellDecoder[A5],implicitevidence$237:kantan.csv.CellDecoder[A6],implicitevidence$238:kantan.csv.CellDecoder[A7],implicitevidence$239:kantan.csv.CellDecoder[A8],implicitevidence$240:kantan.csv.CellDecoder[A9],implicitevidence$241:kantan.csv.CellDecoder[A10],implicitevidence$242:kantan.csv.CellDecoder[A11],implicitevidence$243:kantan.csv.CellDecoder[A12],implicitevidence$244:kantan.csv.CellDecoder[A13],implicitevidence$245:kantan.csv.CellDecoder[A14],implicitevidence$246:kantan.csv.CellDecoder[A15],implicitevidence$247:kantan.csv.CellDecoder[A16],implicitevidence$248:kantan.csv.CellDecoder[A17],implicitevidence$249:kantan.csv.CellDecoder[A18],implicitevidence$250:kantan.csv.CellDecoder[A19],implicitevidence$251:kantan.csv.CellDecoder[A20],implicitevidence$252:kantan.csv.CellDecoder[A21],implicitevidence$253:kantan.csv.CellDecoder[A22]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder21", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder21", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$211:kantan.csv.CellDecoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A2],implicitevidence$213:kantan.csv.CellDecoder[A3],implicitevidence$214:kantan.csv.CellDecoder[A4],implicitevidence$215:kantan.csv.CellDecoder[A5],implicitevidence$216:kantan.csv.CellDecoder[A6],implicitevidence$217:kantan.csv.CellDecoder[A7],implicitevidence$218:kantan.csv.CellDecoder[A8],implicitevidence$219:kantan.csv.CellDecoder[A9],implicitevidence$220:kantan.csv.CellDecoder[A10],implicitevidence$221:kantan.csv.CellDecoder[A11],implicitevidence$222:kantan.csv.CellDecoder[A12],implicitevidence$223:kantan.csv.CellDecoder[A13],implicitevidence$224:kantan.csv.CellDecoder[A14],implicitevidence$225:kantan.csv.CellDecoder[A15],implicitevidence$226:kantan.csv.CellDecoder[A16],implicitevidence$227:kantan.csv.CellDecoder[A17],implicitevidence$228:kantan.csv.CellDecoder[A18],implicitevidence$229:kantan.csv.CellDecoder[A19],implicitevidence$230:kantan.csv.CellDecoder[A20],implicitevidence$231:kantan.csv.CellDecoder[A21]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder20", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder20", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$191:kantan.csv.CellDecoder[A1],implicitevidence$192:kantan.csv.CellDecoder[A2],implicitevidence$193:kantan.csv.CellDecoder[A3],implicitevidence$194:kantan.csv.CellDecoder[A4],implicitevidence$195:kantan.csv.CellDecoder[A5],implicitevidence$196:kantan.csv.CellDecoder[A6],implicitevidence$197:kantan.csv.CellDecoder[A7],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellDecoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A10],implicitevidence$201:kantan.csv.CellDecoder[A11],implicitevidence$202:kantan.csv.CellDecoder[A12],implicitevidence$203:kantan.csv.CellDecoder[A13],implicitevidence$204:kantan.csv.CellDecoder[A14],implicitevidence$205:kantan.csv.CellDecoder[A15],implicitevidence$206:kantan.csv.CellDecoder[A16],implicitevidence$207:kantan.csv.CellDecoder[A17],implicitevidence$208:kantan.csv.CellDecoder[A18],implicitevidence$209:kantan.csv.CellDecoder[A19],implicitevidence$210:kantan.csv.CellDecoder[A20]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder19", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder19", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$172:kantan.csv.CellDecoder[A1],implicitevidence$173:kantan.csv.CellDecoder[A2],implicitevidence$174:kantan.csv.CellDecoder[A3],implicitevidence$175:kantan.csv.CellDecoder[A4],implicitevidence$176:kantan.csv.CellDecoder[A5],implicitevidence$177:kantan.csv.CellDecoder[A6],implicitevidence$178:kantan.csv.CellDecoder[A7],implicitevidence$179:kantan.csv.CellDecoder[A8],implicitevidence$180:kantan.csv.CellDecoder[A9],implicitevidence$181:kantan.csv.CellDecoder[A10],implicitevidence$182:kantan.csv.CellDecoder[A11],implicitevidence$183:kantan.csv.CellDecoder[A12],implicitevidence$184:kantan.csv.CellDecoder[A13],implicitevidence$185:kantan.csv.CellDecoder[A14],implicitevidence$186:kantan.csv.CellDecoder[A15],implicitevidence$187:kantan.csv.CellDecoder[A16],implicitevidence$188:kantan.csv.CellDecoder[A17],implicitevidence$189:kantan.csv.CellDecoder[A18],implicitevidence$190:kantan.csv.CellDecoder[A19]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder18", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder18", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$154:kantan.csv.CellDecoder[A1],implicitevidence$155:kantan.csv.CellDecoder[A2],implicitevidence$156:kantan.csv.CellDecoder[A3],implicitevidence$157:kantan.csv.CellDecoder[A4],implicitevidence$158:kantan.csv.CellDecoder[A5],implicitevidence$159:kantan.csv.CellDecoder[A6],implicitevidence$160:kantan.csv.CellDecoder[A7],implicitevidence$161:kantan.csv.CellDecoder[A8],implicitevidence$162:kantan.csv.CellDecoder[A9],implicitevidence$163:kantan.csv.CellDecoder[A10],implicitevidence$164:kantan.csv.CellDecoder[A11],implicitevidence$165:kantan.csv.CellDecoder[A12],implicitevidence$166:kantan.csv.CellDecoder[A13],implicitevidence$167:kantan.csv.CellDecoder[A14],implicitevidence$168:kantan.csv.CellDecoder[A15],implicitevidence$169:kantan.csv.CellDecoder[A16],implicitevidence$170:kantan.csv.CellDecoder[A17],implicitevidence$171:kantan.csv.CellDecoder[A18]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder17", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder17", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$137:kantan.csv.CellDecoder[A1],implicitevidence$138:kantan.csv.CellDecoder[A2],implicitevidence$139:kantan.csv.CellDecoder[A3],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellDecoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A6],implicitevidence$143:kantan.csv.CellDecoder[A7],implicitevidence$144:kantan.csv.CellDecoder[A8],implicitevidence$145:kantan.csv.CellDecoder[A9],implicitevidence$146:kantan.csv.CellDecoder[A10],implicitevidence$147:kantan.csv.CellDecoder[A11],implicitevidence$148:kantan.csv.CellDecoder[A12],implicitevidence$149:kantan.csv.CellDecoder[A13],implicitevidence$150:kantan.csv.CellDecoder[A14],implicitevidence$151:kantan.csv.CellDecoder[A15],implicitevidence$152:kantan.csv.CellDecoder[A16],implicitevidence$153:kantan.csv.CellDecoder[A17]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder16", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder16", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$121:kantan.csv.CellDecoder[A1],implicitevidence$122:kantan.csv.CellDecoder[A2],implicitevidence$123:kantan.csv.CellDecoder[A3],implicitevidence$124:kantan.csv.CellDecoder[A4],implicitevidence$125:kantan.csv.CellDecoder[A5],implicitevidence$126:kantan.csv.CellDecoder[A6],implicitevidence$127:kantan.csv.CellDecoder[A7],implicitevidence$128:kantan.csv.CellDecoder[A8],implicitevidence$129:kantan.csv.CellDecoder[A9],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellDecoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A12],implicitevidence$133:kantan.csv.CellDecoder[A13],implicitevidence$134:kantan.csv.CellDecoder[A14],implicitevidence$135:kantan.csv.CellDecoder[A15],implicitevidence$136:kantan.csv.CellDecoder[A16]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder15", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder15", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$106:kantan.csv.CellDecoder[A1],implicitevidence$107:kantan.csv.CellDecoder[A2],implicitevidence$108:kantan.csv.CellDecoder[A3],implicitevidence$109:kantan.csv.CellDecoder[A4],implicitevidence$110:kantan.csv.CellDecoder[A5],implicitevidence$111:kantan.csv.CellDecoder[A6],implicitevidence$112:kantan.csv.CellDecoder[A7],implicitevidence$113:kantan.csv.CellDecoder[A8],implicitevidence$114:kantan.csv.CellDecoder[A9],implicitevidence$115:kantan.csv.CellDecoder[A10],implicitevidence$116:kantan.csv.CellDecoder[A11],implicitevidence$117:kantan.csv.CellDecoder[A12],implicitevidence$118:kantan.csv.CellDecoder[A13],implicitevidence$119:kantan.csv.CellDecoder[A14],implicitevidence$120:kantan.csv.CellDecoder[A15]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder14", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder14", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellDecoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A3],implicitevidence$95:kantan.csv.CellDecoder[A4],implicitevidence$96:kantan.csv.CellDecoder[A5],implicitevidence$97:kantan.csv.CellDecoder[A6],implicitevidence$98:kantan.csv.CellDecoder[A7],implicitevidence$99:kantan.csv.CellDecoder[A8],implicitevidence$100:kantan.csv.CellDecoder[A9],implicitevidence$101:kantan.csv.CellDecoder[A10],implicitevidence$102:kantan.csv.CellDecoder[A11],implicitevidence$103:kantan.csv.CellDecoder[A12],implicitevidence$104:kantan.csv.CellDecoder[A13],implicitevidence$105:kantan.csv.CellDecoder[A14]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder13", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder13", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$79:kantan.csv.CellDecoder[A1],implicitevidence$80:kantan.csv.CellDecoder[A2],implicitevidence$81:kantan.csv.CellDecoder[A3],implicitevidence$82:kantan.csv.CellDecoder[A4],implicitevidence$83:kantan.csv.CellDecoder[A5],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellDecoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A8],implicitevidence$87:kantan.csv.CellDecoder[A9],implicitevidence$88:kantan.csv.CellDecoder[A10],implicitevidence$89:kantan.csv.CellDecoder[A11],implicitevidence$90:kantan.csv.CellDecoder[A12],implicitevidence$91:kantan.csv.CellDecoder[A13]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder12", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder12", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$67:kantan.csv.CellDecoder[A1],implicitevidence$68:kantan.csv.CellDecoder[A2],implicitevidence$69:kantan.csv.CellDecoder[A3],implicitevidence$70:kantan.csv.CellDecoder[A4],implicitevidence$71:kantan.csv.CellDecoder[A5],implicitevidence$72:kantan.csv.CellDecoder[A6],implicitevidence$73:kantan.csv.CellDecoder[A7],implicitevidence$74:kantan.csv.CellDecoder[A8],implicitevidence$75:kantan.csv.CellDecoder[A9],implicitevidence$76:kantan.csv.CellDecoder[A10],implicitevidence$77:kantan.csv.CellDecoder[A11],implicitevidence$78:kantan.csv.CellDecoder[A12]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder11", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder11", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$56:kantan.csv.CellDecoder[A1],implicitevidence$57:kantan.csv.CellDecoder[A2],implicitevidence$58:kantan.csv.CellDecoder[A3],implicitevidence$59:kantan.csv.CellDecoder[A4],implicitevidence$60:kantan.csv.CellDecoder[A5],implicitevidence$61:kantan.csv.CellDecoder[A6],implicitevidence$62:kantan.csv.CellDecoder[A7],implicitevidence$63:kantan.csv.CellDecoder[A8],implicitevidence$64:kantan.csv.CellDecoder[A9],implicitevidence$65:kantan.csv.CellDecoder[A10],implicitevidence$66:kantan.csv.CellDecoder[A11]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder10", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder10", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$46:kantan.csv.CellDecoder[A1],implicitevidence$47:kantan.csv.CellDecoder[A2],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellDecoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A5],implicitevidence$51:kantan.csv.CellDecoder[A6],implicitevidence$52:kantan.csv.CellDecoder[A7],implicitevidence$53:kantan.csv.CellDecoder[A8],implicitevidence$54:kantan.csv.CellDecoder[A9],implicitevidence$55:kantan.csv.CellDecoder[A10]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder9", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder9", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$37:kantan.csv.CellDecoder[A1],implicitevidence$38:kantan.csv.CellDecoder[A2],implicitevidence$39:kantan.csv.CellDecoder[A3],implicitevidence$40:kantan.csv.CellDecoder[A4],implicitevidence$41:kantan.csv.CellDecoder[A5],implicitevidence$42:kantan.csv.CellDecoder[A6],implicitevidence$43:kantan.csv.CellDecoder[A7],implicitevidence$44:kantan.csv.CellDecoder[A8],implicitevidence$45:kantan.csv.CellDecoder[A9]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder8", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder8", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder8[A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$29:kantan.csv.CellDecoder[A1],implicitevidence$30:kantan.csv.CellDecoder[A2],implicitevidence$31:kantan.csv.CellDecoder[A3],implicitevidence$32:kantan.csv.CellDecoder[A4],implicitevidence$33:kantan.csv.CellDecoder[A5],implicitevidence$34:kantan.csv.CellDecoder[A6],implicitevidence$35:kantan.csv.CellDecoder[A7],implicitevidence$36:kantan.csv.CellDecoder[A8]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder7", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder7", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder7[A1,A2,A3,A4,A5,A6,A7](implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellDecoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A3],implicitevidence$25:kantan.csv.CellDecoder[A4],implicitevidence$26:kantan.csv.CellDecoder[A5],implicitevidence$27:kantan.csv.CellDecoder[A6],implicitevidence$28:kantan.csv.CellDecoder[A7]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder6", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6]): RowDecoder[(A1, A2, A3, A4, A5, A6)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder6", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder6[A1,A2,A3,A4,A5,A6](implicitevidence$16:kantan.csv.CellDecoder[A1],implicitevidence$17:kantan.csv.CellDecoder[A2],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellDecoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A5],implicitevidence$21:kantan.csv.CellDecoder[A6]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder5", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5]): RowDecoder[(A1, A2, A3, A4, A5)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder5", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder5[A1,A2,A3,A4,A5](implicitevidence$11:kantan.csv.CellDecoder[A1],implicitevidence$12:kantan.csv.CellDecoder[A2],implicitevidence$13:kantan.csv.CellDecoder[A3],implicitevidence$14:kantan.csv.CellDecoder[A4],implicitevidence$15:kantan.csv.CellDecoder[A5]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder4", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4]): RowDecoder[(A1, A2, A3, A4)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder4", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder4[A1,A2,A3,A4](implicitevidence$7:kantan.csv.CellDecoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A2],implicitevidence$9:kantan.csv.CellDecoder[A3],implicitevidence$10:kantan.csv.CellDecoder[A4]):kantan.csv.RowDecoder[(A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder3", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3]): RowDecoder[(A1, A2, A3)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder3", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder3[A1,A2,A3](implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellDecoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A3]):kantan.csv.RowDecoder[(A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder2", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2]): RowDecoder[(A1, A2)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder2", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder2[A1,A2](implicitevidence$2:kantan.csv.CellDecoder[A1],implicitevidence$3:kantan.csv.CellDecoder[A2]):kantan.csv.RowDecoder[(A1,A2)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder1", "tail" : "(arg0: CellDecoder[A1]): RowDecoder[(A1)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder1", "link" : "kantan\/csv\/codecs$.html#tupleRowDecoder1[A1](implicitevidence$1:kantan.csv.CellDecoder[A1]):kantan.csv.RowDecoder[(A1,)]", "kind" : "implicit def"}, {"label" : "hasBuilderRowDecoder", "tail" : "(arg0: CellDecoder[A], hb: Factory[A, F[A]]): RowDecoder[F[A]]", "member" : "kantan.csv.RowDecoderInstances.hasBuilderRowDecoder", "link" : "kantan\/csv\/codecs$.html#hasBuilderRowDecoder[A,F[_]](implicitevidence$4:kantan.csv.CellDecoder[A],implicithb:kantan.codecs.collection.Factory[A,F[A]]):kantan.csv.RowDecoder[F[A]]", "kind" : "implicit def"}, {"label" : "fromCellDecoder", "tail" : "(arg0: CellDecoder[A]): RowDecoder[A]", "member" : "kantan.csv.RowDecoderInstances.fromCellDecoder", "link" : "kantan\/csv\/codecs$.html#fromCellDecoder[A](implicitevidence$3:kantan.csv.CellDecoder[A]):kantan.csv.RowDecoder[A]", "kind" : "implicit def"}, {"label" : "fromCellEncoder", "tail" : "(arg0: CellEncoder[A]): RowEncoder[A]", "member" : "kantan.csv.RowEncoderInstances.fromCellEncoder", "link" : "kantan\/csv\/codecs$.html#fromCellEncoder[A](implicitevidence$1:kantan.csv.CellEncoder[A]):kantan.csv.RowEncoder[A]", "kind" : "implicit def"}, {"label" : "iterable", "tail" : "(arg0: CellEncoder[A]): RowEncoder[M[A]]", "member" : "kantan.csv.VersionSpecificRowEncoderInstances.iterable", "link" : "kantan\/csv\/codecs$.html#iterable[A,M[X]<:IterableOnce[X]](implicitevidence$1:kantan.csv.CellEncoder[A]):kantan.csv.RowEncoder[M[A]]", "kind" : "implicit def"}, {"label" : "cellDecoderEither", "tail" : "(arg0: CellDecoder[A], arg1: CellDecoder[B]): CellDecoder[Either[A, B]]", "member" : "kantan.csv.CellDecoderInstances.cellDecoderEither", "link" : "kantan\/csv\/codecs$.html#cellDecoderEither[A,B](implicitevidence$3:kantan.csv.CellDecoder[A],implicitevidence$4:kantan.csv.CellDecoder[B]):kantan.csv.CellDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "cellDecoderOpt", "tail" : "(arg0: CellDecoder[A]): CellDecoder[Option[A]]", "member" : "kantan.csv.CellDecoderInstances.cellDecoderOpt", "link" : "kantan\/csv\/codecs$.html#cellDecoderOpt[A](implicitevidence$2:kantan.csv.CellDecoder[A]):kantan.csv.CellDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromStringDecoder", "tail" : "(arg0: StringDecoder[A]): CellDecoder[A]", "member" : "kantan.csv.CellDecoderInstances.fromStringDecoder", "link" : "kantan\/csv\/codecs$.html#fromStringDecoder[A](implicitevidence$1:kantan.codecs.strings.StringDecoder[A]):kantan.csv.CellDecoder[A]", "kind" : "implicit def"}, {"label" : "eitherCellEncoder", "tail" : "(arg0: CellEncoder[A], arg1: CellEncoder[B]): CellEncoder[Either[A, B]]", "member" : "kantan.csv.CellEncoderInstances.eitherCellEncoder", "link" : "kantan\/csv\/codecs$.html#eitherCellEncoder[A,B](implicitevidence$3:kantan.csv.CellEncoder[A],implicitevidence$4:kantan.csv.CellEncoder[B]):kantan.csv.CellEncoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "cellEncoderOpt", "tail" : "(arg0: CellEncoder[A]): CellEncoder[Option[A]]", "member" : "kantan.csv.CellEncoderInstances.cellEncoderOpt", "link" : "kantan\/csv\/codecs$.html#cellEncoderOpt[A](implicitevidence$2:kantan.csv.CellEncoder[A]):kantan.csv.CellEncoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromStringEncoder", "tail" : "(arg0: StringEncoder[A]): CellEncoder[A]", "member" : "kantan.csv.CellEncoderInstances.fromStringEncoder", "link" : "kantan\/csv\/codecs$.html#fromStringEncoder[A](implicitevidence$1:kantan.codecs.strings.StringEncoder[A]):kantan.csv.CellEncoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/codecs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/codecs$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/codecs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/codecs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/codecs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/codecs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/codecs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/codecs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/codecs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/codecs$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/codecs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/codecs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/codecs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/codecs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/codecs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/codecs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/codecs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/codecs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/codecs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.CsvConfiguration", "shortDescription" : "Configuration for how to read \/ write CSV data.", "object" : "kantan\/csv\/CsvConfiguration$.html", "members_object" : [{"label" : "Header", "tail" : "", "member" : "kantan.csv.CsvConfiguration.Header", "link" : "kantan\/csv\/CsvConfiguration$.html#Header", "kind" : "object"}, {"label" : "Header", "tail" : "", "member" : "kantan.csv.CsvConfiguration.Header", "link" : "kantan\/csv\/CsvConfiguration$.html#HeaderextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "QuotePolicy", "tail" : "", "member" : "kantan.csv.CsvConfiguration.QuotePolicy", "link" : "kantan\/csv\/CsvConfiguration$.html#QuotePolicy", "kind" : "object"}, {"label" : "QuotePolicy", "tail" : "", "member" : "kantan.csv.CsvConfiguration.QuotePolicy", "link" : "kantan\/csv\/CsvConfiguration$.html#QuotePolicyextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "rfc", "tail" : ": CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.rfc", "link" : "kantan\/csv\/CsvConfiguration$.html#rfc:kantan.csv.CsvConfiguration", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvConfiguration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvConfiguration$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvConfiguration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvConfiguration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvConfiguration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvConfiguration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvConfiguration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvConfiguration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvConfiguration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvConfiguration$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvConfiguration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvConfiguration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CsvConfiguration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvConfiguration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CsvConfiguration$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CsvConfiguration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvConfiguration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvConfiguration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvConfiguration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "hasHeader", "tail" : "(): Boolean", "member" : "kantan.csv.CsvConfiguration.hasHeader", "link" : "kantan\/csv\/CsvConfiguration.html#hasHeader:Boolean", "kind" : "def"}, {"label" : "withoutHeader", "tail" : "(): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.withoutHeader", "link" : "kantan\/csv\/CsvConfiguration.html#withoutHeader:kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "withHeader", "tail" : "(): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.withHeader", "link" : "kantan\/csv\/CsvConfiguration.html#withHeader:kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "withHeader", "tail" : "(flag: Boolean): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.withHeader", "link" : "kantan\/csv\/CsvConfiguration.html#withHeader(flag:Boolean):kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "withHeader", "tail" : "(ss: String*): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.withHeader", "link" : "kantan\/csv\/CsvConfiguration.html#withHeader(ss:String*):kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "withHeader", "tail" : "(header: Header): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.withHeader", "link" : "kantan\/csv\/CsvConfiguration.html#withHeader(header:kantan.csv.CsvConfiguration.Header):kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "withCellSeparator", "tail" : "(char: Char): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.withCellSeparator", "link" : "kantan\/csv\/CsvConfiguration.html#withCellSeparator(char:Char):kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "withQuotePolicy", "tail" : "(policy: QuotePolicy): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.withQuotePolicy", "link" : "kantan\/csv\/CsvConfiguration.html#withQuotePolicy(policy:kantan.csv.CsvConfiguration.QuotePolicy):kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "quoteWhenNeeded", "tail" : "(): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.quoteWhenNeeded", "link" : "kantan\/csv\/CsvConfiguration.html#quoteWhenNeeded:kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "quoteAll", "tail" : "(): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.quoteAll", "link" : "kantan\/csv\/CsvConfiguration.html#quoteAll:kantan.csv.CsvConfiguration", "kind" : "def"}, {"label" : "withQuote", "tail" : "(char: Char): CsvConfiguration", "member" : "kantan.csv.CsvConfiguration.withQuote", "link" : "kantan\/csv\/CsvConfiguration.html#withQuote(char:Char):kantan.csv.CsvConfiguration", "kind" : "def"}, {"member" : "kantan.csv.CsvConfiguration#<init>", "error" : "unsupported entity"}, {"label" : "header", "tail" : ": Header", "member" : "kantan.csv.CsvConfiguration.header", "link" : "kantan\/csv\/CsvConfiguration.html#header:kantan.csv.CsvConfiguration.Header", "kind" : "val"}, {"label" : "quotePolicy", "tail" : ": QuotePolicy", "member" : "kantan.csv.CsvConfiguration.quotePolicy", "link" : "kantan\/csv\/CsvConfiguration.html#quotePolicy:kantan.csv.CsvConfiguration.QuotePolicy", "kind" : "val"}, {"label" : "quote", "tail" : ": Char", "member" : "kantan.csv.CsvConfiguration.quote", "link" : "kantan\/csv\/CsvConfiguration.html#quote:Char", "kind" : "val"}, {"label" : "cellSeparator", "tail" : ": Char", "member" : "kantan.csv.CsvConfiguration.cellSeparator", "link" : "kantan\/csv\/CsvConfiguration.html#cellSeparator:Char", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/CsvConfiguration.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvConfiguration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvConfiguration.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvConfiguration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvConfiguration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvConfiguration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvConfiguration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvConfiguration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvConfiguration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvConfiguration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvConfiguration.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvConfiguration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvConfiguration.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvConfiguration.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvConfiguration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvConfiguration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvConfiguration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/csv\/CsvConfiguration.html", "kind" : "case class"}, {"name" : "kantan.csv.CsvReader", "shortDescription" : "Provides instance creation and summoning methods.", "object" : "kantan\/csv\/CsvReader$.html", "members_object" : [{"label" : "apply", "tail" : "(reader: Reader, conf: CsvConfiguration)(arg0: HeaderDecoder[A], e: ReaderEngine): CsvReader[ReadResult[A]]", "member" : "kantan.csv.CsvReader.apply", "link" : "kantan\/csv\/CsvReader$.html#apply[A](reader:java.io.Reader,conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.HeaderDecoder[A],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[kantan.csv.ReadResult[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(reader: Reader, sep: Char, header: Boolean)(arg0: HeaderDecoder[A], e: ReaderEngine): CsvReader[ReadResult[A]]", "member" : "kantan.csv.CsvReader.apply", "link" : "kantan\/csv\/CsvReader$.html#apply[A](reader:java.io.Reader,sep:Char,header:Boolean)(implicitevidence$1:kantan.csv.HeaderDecoder[A],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[kantan.csv.ReadResult[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvReader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvReader$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvReader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvReader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvReader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvReader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvReader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvReader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvReader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvReader$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvReader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvReader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CsvReader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvReader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CsvReader$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CsvReader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvReader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvReader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvReader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "safe", "tail" : "(empty: => F)(f: (Throwable) => F): ResourceIterator[Either[F, A]]", "member" : "kantan.codecs.resource.ResourceIterator.safe", "link" : "kantan\/csv\/package$$CsvReader.html#safe[F](empty:=>F)(f:Throwable=>F):kantan.codecs.resource.ResourceIterator[Either[F,A]]", "kind" : "def"}, {"label" : "withClose", "tail" : "(f: () => Unit): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.withClose", "link" : "kantan\/csv\/package$$CsvReader.html#withClose(f:()=>Unit):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): ResourceIterator[B]", "member" : "kantan.codecs.resource.ResourceIterator.collect", "link" : "kantan\/csv\/package$$CsvReader.html#collect[B](f:PartialFunction[A,B]):kantan.codecs.resource.ResourceIterator[B]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.takeWhile", "link" : "kantan\/csv\/package$$CsvReader.html#takeWhile(p:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.take", "link" : "kantan\/csv\/package$$CsvReader.html#take(n:Int):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.isTraversableAgain", "link" : "kantan\/csv\/package$$CsvReader.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.exists", "link" : "kantan\/csv\/package$$CsvReader.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "kantan.codecs.resource.ResourceIterator.find", "link" : "kantan\/csv\/package$$CsvReader.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.isEmpty", "link" : "kantan\/csv\/package$$CsvReader.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(f: (B, A) => B): ResourceIterator[B]", "member" : "kantan.codecs.resource.ResourceIterator.scanLeft", "link" : "kantan\/csv\/package$$CsvReader.html#scanLeft[B](z:B)(f:(B,A)=>B):kantan.codecs.resource.ResourceIterator[B]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.slice", "link" : "kantan\/csv\/package$$CsvReader.html#slice(from:Int,until:Int):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): ResourceIterator[(A, Int)]", "member" : "kantan.codecs.resource.ResourceIterator.zipWithIndex", "link" : "kantan\/csv\/package$$CsvReader.html#zipWithIndex:kantan.codecs.resource.ResourceIterator[(A,Int)]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(empty: B)(f: (B, A) => B): B", "member" : "kantan.codecs.resource.ResourceIterator.foldLeft", "link" : "kantan\/csv\/package$$CsvReader.html#foldLeft[B](empty:B)(f:(B,A)=>B):B", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.forall", "link" : "kantan\/csv\/package$$CsvReader.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.hasDefiniteSize", "link" : "kantan\/csv\/package$$CsvReader.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "kantan.codecs.resource.ResourceIterator.foreach", "link" : "kantan\/csv\/package$$CsvReader.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "filterResult", "tail" : "(p: (S) => Boolean)(ev: <:<[A, Either[E, S]]): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.filterResult", "link" : "kantan\/csv\/package$$CsvReader.html#filterResult[E,S](p:S=>Boolean)(implicitev:A<:<Either[E,S]):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.withFilter", "link" : "kantan\/csv\/package$$CsvReader.html#withFilter(p:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.filterNot", "link" : "kantan\/csv\/package$$CsvReader.html#filterNot(pred:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.filter", "link" : "kantan\/csv\/package$$CsvReader.html#filter(p:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (S) => Either[E, B])(ev: <:<[A, Either[E, S]]): ResourceIterator[Either[E, B]]", "member" : "kantan.codecs.resource.ResourceIterator.emap", "link" : "kantan\/csv\/package$$CsvReader.html#emap[E,S,B](f:S=>Either[E,B])(implicitev:A<:<Either[E,S]):kantan.codecs.resource.ResourceIterator[Either[E,B]]", "kind" : "def"}, {"label" : "flatMapResult", "tail" : "(f: (S) => Either[E, B])(ev: <:<[A, Either[E, S]]): ResourceIterator[Either[E, B]]", "member" : "kantan.codecs.resource.ResourceIterator.flatMapResult", "link" : "kantan\/csv\/package$$CsvReader.html#flatMapResult[E,S,B](f:S=>Either[E,B])(implicitev:A<:<Either[E,S]):kantan.codecs.resource.ResourceIterator[Either[E,B]]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => ResourceIterator[B]): ResourceIterator[B]", "member" : "kantan.codecs.resource.ResourceIterator.flatMap", "link" : "kantan\/csv\/package$$CsvReader.html#flatMap[B](f:A=>kantan.codecs.resource.ResourceIterator[B]):kantan.codecs.resource.ResourceIterator[B]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (S) => B)(ev: <:<[A, Either[E, S]]): ResourceIterator[Either[E, B]]", "member" : "kantan.codecs.resource.ResourceIterator.mapResult", "link" : "kantan\/csv\/package$$CsvReader.html#mapResult[E,S,B](f:S=>B)(implicitev:A<:<Either[E,S]):kantan.codecs.resource.ResourceIterator[Either[E,B]]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ResourceIterator[B]", "member" : "kantan.codecs.resource.ResourceIterator.map", "link" : "kantan\/csv\/package$$CsvReader.html#map[B](f:A=>B):kantan.codecs.resource.ResourceIterator[B]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.dropWhile", "link" : "kantan\/csv\/package$$CsvReader.html#dropWhile(p:A=>Boolean):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ResourceIterator[A]", "member" : "kantan.codecs.resource.ResourceIterator.drop", "link" : "kantan\/csv\/package$$CsvReader.html#drop(n:Int):kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "next", "tail" : "(): A", "member" : "kantan.codecs.resource.ResourceIterator.next", "link" : "kantan\/csv\/package$$CsvReader.html#next():A", "kind" : "final def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.hasNext", "link" : "kantan\/csv\/package$$CsvReader.html#hasNext:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(): Unit", "member" : "kantan.codecs.resource.ResourceIterator.close", "link" : "kantan\/csv\/package$$CsvReader.html#close():Unit", "kind" : "final def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.iterator", "link" : "kantan\/csv\/package$$CsvReader.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toVector", "link" : "kantan\/csv\/package$$CsvReader.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[AA]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toSet", "link" : "kantan\/csv\/package$$CsvReader.html#toSet[AA>:A]:Set[AA]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toSeq", "link" : "kantan\/csv\/package$$CsvReader.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toIterable", "link" : "kantan\/csv\/package$$CsvReader.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toIndexedSeq", "link" : "kantan\/csv\/package$$CsvReader.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[AA]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toBuffer", "link" : "kantan\/csv\/package$$CsvReader.html#toBuffer[AA>:A]:scala.collection.mutable.Buffer[AA]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.toList", "link" : "kantan\/csv\/package$$CsvReader.html#toList:List[A]", "kind" : "def"}, {"label" : "to", "tail" : "(factory: Factory[A, F]): F", "member" : "kantan.codecs.resource.VersionSpecificResourceIterator.to", "link" : "kantan\/csv\/package$$CsvReader.html#to[F](factory:scala.collection.Factory[A,F]):F", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$CsvReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$CsvReader.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$CsvReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$CsvReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$CsvReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$CsvReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$CsvReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CsvReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CsvReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$CsvReader.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$CsvReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$CsvReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$CsvReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$CsvReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$CsvReader.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$CsvReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$CsvReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$CsvReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$CsvReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "release", "tail" : "(): Unit", "member" : "kantan.codecs.resource.ResourceIterator.release", "link" : "kantan\/csv\/package$$CsvReader.html#release():Unit", "kind" : "abstract def"}, {"label" : "checkNext", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterator.checkNext", "link" : "kantan\/csv\/package$$CsvReader.html#checkNext:Boolean", "kind" : "abstract def"}, {"label" : "readNext", "tail" : "(): A", "member" : "kantan.codecs.resource.ResourceIterator.readNext", "link" : "kantan\/csv\/package$$CsvReader.html#readNext():A", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$CsvReader.html"}, {"name" : "kantan.csv.CsvSink", "object" : "kantan\/csv\/CsvSink$.html", "members_object" : [{"label" : "fromResource", "tail" : "(arg0: WriterResource[A]): CsvSink[A]", "member" : "kantan.csv.CsvSink.fromResource", "link" : "kantan\/csv\/CsvSink$.html#fromResource[A](implicitevidence$3:kantan.codecs.resource.WriterResource[A]):kantan.csv.CsvSink[A]", "kind" : "implicit def"}, {"label" : "from", "tail" : "(f: (A) => Writer): CsvSink[A]", "member" : "kantan.csv.CsvSink.from", "link" : "kantan\/csv\/CsvSink$.html#from[A](f:A=>java.io.Writer):kantan.csv.CsvSink[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: CsvSink[A]): CsvSink[A]", "member" : "kantan.csv.CsvSink.apply", "link" : "kantan\/csv\/CsvSink$.html#apply[A](implicitev:kantan.csv.CsvSink[A]):kantan.csv.CsvSink[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CsvSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CsvSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CsvSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/CsvSink.html", "kind" : "trait", "members_trait" : [{"label" : "contramap", "tail" : "(f: (T) => S): CsvSink[T]", "member" : "kantan.csv.CsvSink.contramap", "link" : "kantan\/csv\/CsvSink.html#contramap[T](f:T=>S):kantan.csv.CsvSink[T]", "kind" : "def"}, {"label" : "writer", "tail" : "(s: S, conf: CsvConfiguration)(arg0: HeaderEncoder[A], e: WriterEngine): CsvWriter[A]", "member" : "kantan.csv.CsvSink.writer", "link" : "kantan\/csv\/CsvSink.html#writer[A](s:S,conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.HeaderEncoder[A],implicite:kantan.csv.engine.WriterEngine):kantan.csv.CsvWriter[A]", "kind" : "def"}, {"label" : "writer", "tail" : "(s: S, sep: Char, header: String*)(arg0: HeaderEncoder[A], e: WriterEngine): CsvWriter[A]", "member" : "kantan.csv.CsvSink.writer", "link" : "kantan\/csv\/CsvSink.html#writer[A](s:S,sep:Char,header:String*)(implicitevidence$1:kantan.csv.HeaderEncoder[A],implicite:kantan.csv.engine.WriterEngine):kantan.csv.CsvWriter[A]", "kind" : "def"}, {"label" : "write", "tail" : "(s: S, rows: IterableOnce[A], conf: CsvConfiguration)(arg0: HeaderEncoder[A], e: WriterEngine): Unit", "member" : "kantan.csv.VersionSpecificCsvSink.write", "link" : "kantan\/csv\/CsvSink.html#write[A](s:S,rows:IterableOnce[A],conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.HeaderEncoder[A],implicite:kantan.csv.engine.WriterEngine):Unit", "kind" : "def"}, {"label" : "write", "tail" : "(s: S, rows: IterableOnce[A], sep: Char, header: String*)(arg0: HeaderEncoder[A], e: WriterEngine): Unit", "member" : "kantan.csv.VersionSpecificCsvSink.write", "link" : "kantan\/csv\/CsvSink.html#write[A](s:S,rows:IterableOnce[A],sep:Char,header:String*)(implicitevidence$1:kantan.csv.HeaderEncoder[A],implicite:kantan.csv.engine.WriterEngine):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSink.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CsvSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CsvSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CsvSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "open", "tail" : "(s: S): Writer", "member" : "kantan.csv.CsvSink.open", "link" : "kantan\/csv\/CsvSink.html#open(s:S):java.io.Writer", "kind" : "abstract def"}], "shortDescription" : "Type class for all types that can be turned into CsvWriter instances."}, {"name" : "kantan.csv.CsvSource", "object" : "kantan\/csv\/CsvSource$.html", "members_object" : [{"label" : "fromResource", "tail" : "(arg0: ReaderResource[A]): CsvSource[A]", "member" : "kantan.csv.CsvSource.fromResource", "link" : "kantan\/csv\/CsvSource$.html#fromResource[A](implicitevidence$9:kantan.codecs.resource.ReaderResource[A]):kantan.csv.CsvSource[A]", "kind" : "implicit def"}, {"label" : "from", "tail" : "(f: (A) => ParseResult[Reader]): CsvSource[A]", "member" : "kantan.csv.CsvSource.from", "link" : "kantan\/csv\/CsvSource$.html#from[A](f:A=>kantan.csv.ParseResult[java.io.Reader]):kantan.csv.CsvSource[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: CsvSource[A]): CsvSource[A]", "member" : "kantan.csv.CsvSource.apply", "link" : "kantan\/csv\/CsvSource$.html#apply[A](implicitev:kantan.csv.CsvSource[A]):kantan.csv.CsvSource[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CsvSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CsvSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CsvSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/CsvSource.html", "kind" : "trait", "members_trait" : [{"label" : "contramapResult", "tail" : "(f: (T) => ParseResult[SS]): CsvSource[T]", "member" : "kantan.csv.CsvSource.contramapResult", "link" : "kantan\/csv\/CsvSource.html#contramapResult[SS<:S,T](f:T=>kantan.csv.ParseResult[SS]):kantan.csv.CsvSource[T]", "kind" : "def"}, {"label" : "econtramap", "tail" : "(f: (T) => ParseResult[SS]): CsvSource[T]", "member" : "kantan.csv.CsvSource.econtramap", "link" : "kantan\/csv\/CsvSource.html#econtramap[SS<:S,T](f:T=>kantan.csv.ParseResult[SS]):kantan.csv.CsvSource[T]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (T) => S): CsvSource[T]", "member" : "kantan.csv.CsvSource.contramap", "link" : "kantan\/csv\/CsvSource.html#contramap[T](f:T=>S):kantan.csv.CsvSource[T]", "kind" : "def"}, {"label" : "unsafeRead", "tail" : "(s: S, conf: CsvConfiguration)(arg0: HeaderDecoder[A], e: ReaderEngine, factory: Factory[A, C[A]]): C[A]", "member" : "kantan.csv.CsvSource.unsafeRead", "link" : "kantan\/csv\/CsvSource.html#unsafeRead[C[_],A](s:S,conf:kantan.csv.CsvConfiguration)(implicitevidence$8:kantan.csv.HeaderDecoder[A],implicite:kantan.csv.engine.ReaderEngine,implicitfactory:kantan.codecs.collection.Factory[A,C[A]]):C[A]", "kind" : "def"}, {"label" : "unsafeRead", "tail" : "(s: S, sep: Char, header: Boolean)(arg0: HeaderDecoder[A], e: ReaderEngine, factory: Factory[A, C[A]]): C[A]", "member" : "kantan.csv.CsvSource.unsafeRead", "link" : "kantan\/csv\/CsvSource.html#unsafeRead[C[_],A](s:S,sep:Char,header:Boolean)(implicitevidence$7:kantan.csv.HeaderDecoder[A],implicite:kantan.csv.engine.ReaderEngine,implicitfactory:kantan.codecs.collection.Factory[A,C[A]]):C[A]", "kind" : "def"}, {"label" : "read", "tail" : "(s: S, conf: CsvConfiguration)(arg0: HeaderDecoder[A], e: ReaderEngine, factory: Factory[ReadResult[A], C[ReadResult[A]]]): C[ReadResult[A]]", "member" : "kantan.csv.CsvSource.read", "link" : "kantan\/csv\/CsvSource.html#read[C[_],A](s:S,conf:kantan.csv.CsvConfiguration)(implicitevidence$6:kantan.csv.HeaderDecoder[A],implicite:kantan.csv.engine.ReaderEngine,implicitfactory:kantan.codecs.collection.Factory[kantan.csv.ReadResult[A],C[kantan.csv.ReadResult[A]]]):C[kantan.csv.ReadResult[A]]", "kind" : "def"}, {"label" : "read", "tail" : "(s: S, sep: Char, header: Boolean)(arg0: HeaderDecoder[A], e: ReaderEngine, factory: Factory[ReadResult[A], C[ReadResult[A]]]): C[ReadResult[A]]", "member" : "kantan.csv.CsvSource.read", "link" : "kantan\/csv\/CsvSource.html#read[C[_],A](s:S,sep:Char,header:Boolean)(implicitevidence$5:kantan.csv.HeaderDecoder[A],implicite:kantan.csv.engine.ReaderEngine,implicitfactory:kantan.codecs.collection.Factory[kantan.csv.ReadResult[A],C[kantan.csv.ReadResult[A]]]):C[kantan.csv.ReadResult[A]]", "kind" : "def"}, {"label" : "unsafeReader", "tail" : "(s: S, conf: CsvConfiguration)(arg0: HeaderDecoder[A], engine: ReaderEngine): CsvReader[A]", "member" : "kantan.csv.CsvSource.unsafeReader", "link" : "kantan\/csv\/CsvSource.html#unsafeReader[A](s:S,conf:kantan.csv.CsvConfiguration)(implicitevidence$4:kantan.csv.HeaderDecoder[A],implicitengine:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[A]", "kind" : "def"}, {"label" : "unsafeReader", "tail" : "(s: S, sep: Char, header: Boolean)(arg0: HeaderDecoder[A], engine: ReaderEngine): CsvReader[A]", "member" : "kantan.csv.CsvSource.unsafeReader", "link" : "kantan\/csv\/CsvSource.html#unsafeReader[A](s:S,sep:Char,header:Boolean)(implicitevidence$3:kantan.csv.HeaderDecoder[A],implicitengine:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[A]", "kind" : "def"}, {"label" : "reader", "tail" : "(s: S, conf: CsvConfiguration)(arg0: HeaderDecoder[A], e: ReaderEngine): CsvReader[ReadResult[A]]", "member" : "kantan.csv.CsvSource.reader", "link" : "kantan\/csv\/CsvSource.html#reader[A](s:S,conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.HeaderDecoder[A],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[kantan.csv.ReadResult[A]]", "kind" : "def"}, {"label" : "reader", "tail" : "(s: S, sep: Char, header: Boolean)(arg0: HeaderDecoder[A], e: ReaderEngine): CsvReader[ReadResult[A]]", "member" : "kantan.csv.CsvSource.reader", "link" : "kantan\/csv\/CsvSource.html#reader[A](s:S,sep:Char,header:Boolean)(implicitevidence$1:kantan.csv.HeaderDecoder[A],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[kantan.csv.ReadResult[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvSource.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CsvSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CsvSource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CsvSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "open", "tail" : "(s: S): ParseResult[Reader]", "member" : "kantan.csv.CsvSource.open", "link" : "kantan\/csv\/CsvSource.html#open(s:S):kantan.csv.ParseResult[java.io.Reader]", "kind" : "abstract def"}], "shortDescription" : "Turns instances of S into valid sources of CSV data."}, {"name" : "kantan.csv.CsvWriter", "object" : "kantan\/csv\/CsvWriter$.html", "members_object" : [{"label" : "apply", "tail" : "(out: A)(w: (A, Seq[String]) => Unit)(r: (A) => Unit): CsvWriter[Seq[String]]", "member" : "kantan.csv.CsvWriter.apply", "link" : "kantan\/csv\/CsvWriter$.html#apply[A](out:A)(w:(A,Seq[String])=>Unit)(r:A=>Unit):kantan.csv.CsvWriter[Seq[String]]", "kind" : "def"}, {"label" : "apply", "tail" : "(writer: Writer, conf: CsvConfiguration)(arg0: HeaderEncoder[A], engine: WriterEngine): CsvWriter[A]", "member" : "kantan.csv.CsvWriter.apply", "link" : "kantan\/csv\/CsvWriter$.html#apply[A](writer:java.io.Writer,conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.HeaderEncoder[A],implicitengine:kantan.csv.engine.WriterEngine):kantan.csv.CsvWriter[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(writer: Writer, sep: Char, header: String*)(arg0: HeaderEncoder[A], engine: WriterEngine): CsvWriter[A]", "member" : "kantan.csv.CsvWriter.apply", "link" : "kantan\/csv\/CsvWriter$.html#apply[A](writer:java.io.Writer,sep:Char,header:String*)(implicitevidence$1:kantan.csv.HeaderEncoder[A],implicitengine:kantan.csv.engine.WriterEngine):kantan.csv.CsvWriter[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvWriter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CsvWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CsvWriter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CsvWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/CsvWriter.html", "kind" : "trait", "members_trait" : [{"label" : "contramap", "tail" : "(f: (B) => A): CsvWriter[B]", "member" : "kantan.csv.CsvWriter.contramap", "link" : "kantan\/csv\/CsvWriter.html#contramap[B](f:B=>A):kantan.csv.CsvWriter[B]", "kind" : "def"}, {"label" : "write", "tail" : "(as: IterableOnce[A]): CsvWriter[A]", "member" : "kantan.csv.VersionSpecificCsvWriter.write", "link" : "kantan\/csv\/CsvWriter.html#write(as:IterableOnce[A]):kantan.csv.CsvWriter[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/CsvWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/CsvWriter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/CsvWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/CsvWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/CsvWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/CsvWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/CsvWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/CsvWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/CsvWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/CsvWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/CsvWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/CsvWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/CsvWriter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/CsvWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/CsvWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/CsvWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/CsvWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(): Unit", "member" : "kantan.csv.CsvWriter.close", "link" : "kantan\/csv\/CsvWriter.html#close():Unit", "kind" : "abstract def"}, {"label" : "write", "tail" : "(a: A): CsvWriter[A]", "member" : "kantan.csv.CsvWriter.write", "link" : "kantan\/csv\/CsvWriter.html#write(a:A):kantan.csv.CsvWriter[A]", "kind" : "abstract def"}], "shortDescription" : "Type of values that know how to write CSV data."}, {"name" : "kantan.csv.DecodeError", "shortDescription" : "Parent type for all errors that can occur while decoding CSV data.", "object" : "kantan\/csv\/DecodeError$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/csv\/DecodeError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/DecodeError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/csv\/DecodeError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/csv\/DecodeError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/csv\/DecodeError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/csv\/DecodeError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/csv\/DecodeError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/csv\/DecodeError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/csv\/DecodeError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/csv\/DecodeError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/DecodeError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/DecodeError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/DecodeError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/csv\/DecodeError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/csv\/DecodeError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/csv\/DecodeError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/csv\/DecodeError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/DecodeError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/DecodeError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/DecodeError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/DecodeError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/DecodeError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/DecodeError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/DecodeError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/DecodeError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/DecodeError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/DecodeError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/DecodeError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/DecodeError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/DecodeError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/DecodeError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/DecodeError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/csv\/DecodeError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/csv\/DecodeError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/csv\/DecodeError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "TypeError", "tail" : "", "member" : "kantan.csv.DecodeError.TypeError", "link" : "kantan\/csv\/DecodeError$.html#TypeError", "kind" : "object"}, {"label" : "TypeError", "tail" : "", "member" : "kantan.csv.DecodeError.TypeError", "link" : "kantan\/csv\/DecodeError$.html#TypeErrorextendsDecodeErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "OutOfBounds", "tail" : "", "member" : "kantan.csv.DecodeError.OutOfBounds", "link" : "kantan\/csv\/DecodeError$.html#OutOfBoundsextendsDecodeErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "decodeErrorIsError", "tail" : ": IsError[DecodeError]", "member" : "kantan.csv.DecodeError.decodeErrorIsError", "link" : "kantan\/csv\/DecodeError$.html#decodeErrorIsError:kantan.codecs.error.IsError[kantan.csv.DecodeError]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/DecodeError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/DecodeError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/DecodeError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/DecodeError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/DecodeError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/DecodeError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/DecodeError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeError$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/DecodeError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/DecodeError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/DecodeError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/DecodeError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/DecodeError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/DecodeError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/DecodeError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/DecodeError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/DecodeError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/DecodeError.html", "kind" : "class"}, {"name" : "kantan.csv.DecodeResult", "shortDescription" : "Provides convenience methods for creating instances of DecodeResult.", "object" : "kantan\/csv\/DecodeResult$.html", "members_object" : [{"label" : "typeError", "tail" : "(e: Exception): DecodeResult[Nothing]", "member" : "kantan.csv.DecodeResult.typeError", "link" : "kantan\/csv\/DecodeResult$.html#typeError(e:Exception):kantan.csv.DecodeResult[Nothing]", "kind" : "def"}, {"label" : "typeError", "tail" : "(str: String): DecodeResult[Nothing]", "member" : "kantan.csv.DecodeResult.typeError", "link" : "kantan\/csv\/DecodeResult$.html#typeError(str:String):kantan.csv.DecodeResult[Nothing]", "kind" : "def"}, {"label" : "outOfBounds", "tail" : "(index: Int): DecodeResult[Nothing]", "member" : "kantan.csv.DecodeResult.outOfBounds", "link" : "kantan\/csv\/DecodeResult$.html#outOfBounds(index:Int):kantan.csv.DecodeResult[Nothing]", "kind" : "def"}, {"label" : "fromThrowable", "tail" : "(t: Throwable): DecodeError", "member" : "kantan.codecs.ResultCompanion.WithError.fromThrowable", "link" : "kantan\/csv\/DecodeResult$.html#fromThrowable(t:Throwable):F", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/csv\/DecodeResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/csv\/DecodeResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: DecodeError): Either[DecodeError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/csv\/DecodeResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/csv\/DecodeResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[DecodeError, S]])(bf: BuildFrom[M[Either[DecodeError, S]], S, M[S]]): Either[DecodeError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/csv\/DecodeResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/DecodeResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/DecodeResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/DecodeResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/DecodeResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/DecodeResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/DecodeResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/DecodeResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/DecodeResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/DecodeResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/DecodeResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/DecodeResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/DecodeResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/DecodeResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/DecodeResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/DecodeResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/DecodeResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/DecodeResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/csv\/package$$DecodeResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/csv\/package$$DecodeResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/csv\/package$$DecodeResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/csv\/package$$DecodeResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/csv\/package$$DecodeResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/csv\/package$$DecodeResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/csv\/package$$DecodeResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/csv\/package$$DecodeResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/csv\/package$$DecodeResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/csv\/package$$DecodeResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/csv\/package$$DecodeResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/csv\/package$$DecodeResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/csv\/package$$DecodeResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/csv\/package$$DecodeResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/csv\/package$$DecodeResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/csv\/package$$DecodeResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/csv\/package$$DecodeResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/csv\/package$$DecodeResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/csv\/package$$DecodeResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/package$$DecodeResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/csv\/package$$DecodeResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/csv\/package$$DecodeResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/csv\/package$$DecodeResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$DecodeResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$DecodeResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$DecodeResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$DecodeResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$DecodeResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$DecodeResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$DecodeResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$DecodeResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$DecodeResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$DecodeResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$DecodeResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$DecodeResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$DecodeResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$DecodeResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$DecodeResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$DecodeResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$DecodeResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$DecodeResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$DecodeResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/csv\/package$$DecodeResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/csv\/package$$DecodeResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/csv\/package$$DecodeResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/csv\/package$$DecodeResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/csv\/package$$DecodeResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$DecodeResult.html"}, {"name" : "kantan.csv.GeneratedHeaderCodecs", "trait" : "kantan\/csv\/GeneratedHeaderCodecs.html", "kind" : "trait", "members_trait" : [{"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$969:kantan.csv.CellEncoder[A1],implicitevidence$970:kantan.csv.CellDecoder[A1],implicitevidence$971:kantan.csv.CellEncoder[A2],implicitevidence$972:kantan.csv.CellDecoder[A2],implicitevidence$973:kantan.csv.CellEncoder[A3],implicitevidence$974:kantan.csv.CellDecoder[A3],implicitevidence$975:kantan.csv.CellEncoder[A4],implicitevidence$976:kantan.csv.CellDecoder[A4],implicitevidence$977:kantan.csv.CellEncoder[A5],implicitevidence$978:kantan.csv.CellDecoder[A5],implicitevidence$979:kantan.csv.CellEncoder[A6],implicitevidence$980:kantan.csv.CellDecoder[A6],implicitevidence$981:kantan.csv.CellEncoder[A7],implicitevidence$982:kantan.csv.CellDecoder[A7],implicitevidence$983:kantan.csv.CellEncoder[A8],implicitevidence$984:kantan.csv.CellDecoder[A8],implicitevidence$985:kantan.csv.CellEncoder[A9],implicitevidence$986:kantan.csv.CellDecoder[A9],implicitevidence$987:kantan.csv.CellEncoder[A10],implicitevidence$988:kantan.csv.CellDecoder[A10],implicitevidence$989:kantan.csv.CellEncoder[A11],implicitevidence$990:kantan.csv.CellDecoder[A11],implicitevidence$991:kantan.csv.CellEncoder[A12],implicitevidence$992:kantan.csv.CellDecoder[A12],implicitevidence$993:kantan.csv.CellEncoder[A13],implicitevidence$994:kantan.csv.CellDecoder[A13],implicitevidence$995:kantan.csv.CellEncoder[A14],implicitevidence$996:kantan.csv.CellDecoder[A14],implicitevidence$997:kantan.csv.CellEncoder[A15],implicitevidence$998:kantan.csv.CellDecoder[A15],implicitevidence$999:kantan.csv.CellEncoder[A16],implicitevidence$1000:kantan.csv.CellDecoder[A16],implicitevidence$1001:kantan.csv.CellEncoder[A17],implicitevidence$1002:kantan.csv.CellDecoder[A17],implicitevidence$1003:kantan.csv.CellEncoder[A18],implicitevidence$1004:kantan.csv.CellDecoder[A18],implicitevidence$1005:kantan.csv.CellEncoder[A19],implicitevidence$1006:kantan.csv.CellDecoder[A19],implicitevidence$1007:kantan.csv.CellEncoder[A20],implicitevidence$1008:kantan.csv.CellDecoder[A20],implicitevidence$1009:kantan.csv.CellEncoder[A21],implicitevidence$1010:kantan.csv.CellDecoder[A21],implicitevidence$1011:kantan.csv.CellEncoder[A22],implicitevidence$1012:kantan.csv.CellDecoder[A22]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$927:kantan.csv.CellEncoder[A1],implicitevidence$928:kantan.csv.CellDecoder[A1],implicitevidence$929:kantan.csv.CellEncoder[A2],implicitevidence$930:kantan.csv.CellDecoder[A2],implicitevidence$931:kantan.csv.CellEncoder[A3],implicitevidence$932:kantan.csv.CellDecoder[A3],implicitevidence$933:kantan.csv.CellEncoder[A4],implicitevidence$934:kantan.csv.CellDecoder[A4],implicitevidence$935:kantan.csv.CellEncoder[A5],implicitevidence$936:kantan.csv.CellDecoder[A5],implicitevidence$937:kantan.csv.CellEncoder[A6],implicitevidence$938:kantan.csv.CellDecoder[A6],implicitevidence$939:kantan.csv.CellEncoder[A7],implicitevidence$940:kantan.csv.CellDecoder[A7],implicitevidence$941:kantan.csv.CellEncoder[A8],implicitevidence$942:kantan.csv.CellDecoder[A8],implicitevidence$943:kantan.csv.CellEncoder[A9],implicitevidence$944:kantan.csv.CellDecoder[A9],implicitevidence$945:kantan.csv.CellEncoder[A10],implicitevidence$946:kantan.csv.CellDecoder[A10],implicitevidence$947:kantan.csv.CellEncoder[A11],implicitevidence$948:kantan.csv.CellDecoder[A11],implicitevidence$949:kantan.csv.CellEncoder[A12],implicitevidence$950:kantan.csv.CellDecoder[A12],implicitevidence$951:kantan.csv.CellEncoder[A13],implicitevidence$952:kantan.csv.CellDecoder[A13],implicitevidence$953:kantan.csv.CellEncoder[A14],implicitevidence$954:kantan.csv.CellDecoder[A14],implicitevidence$955:kantan.csv.CellEncoder[A15],implicitevidence$956:kantan.csv.CellDecoder[A15],implicitevidence$957:kantan.csv.CellEncoder[A16],implicitevidence$958:kantan.csv.CellDecoder[A16],implicitevidence$959:kantan.csv.CellEncoder[A17],implicitevidence$960:kantan.csv.CellDecoder[A17],implicitevidence$961:kantan.csv.CellEncoder[A18],implicitevidence$962:kantan.csv.CellDecoder[A18],implicitevidence$963:kantan.csv.CellEncoder[A19],implicitevidence$964:kantan.csv.CellDecoder[A19],implicitevidence$965:kantan.csv.CellEncoder[A20],implicitevidence$966:kantan.csv.CellDecoder[A20],implicitevidence$967:kantan.csv.CellEncoder[A21],implicitevidence$968:kantan.csv.CellDecoder[A21]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$887:kantan.csv.CellEncoder[A1],implicitevidence$888:kantan.csv.CellDecoder[A1],implicitevidence$889:kantan.csv.CellEncoder[A2],implicitevidence$890:kantan.csv.CellDecoder[A2],implicitevidence$891:kantan.csv.CellEncoder[A3],implicitevidence$892:kantan.csv.CellDecoder[A3],implicitevidence$893:kantan.csv.CellEncoder[A4],implicitevidence$894:kantan.csv.CellDecoder[A4],implicitevidence$895:kantan.csv.CellEncoder[A5],implicitevidence$896:kantan.csv.CellDecoder[A5],implicitevidence$897:kantan.csv.CellEncoder[A6],implicitevidence$898:kantan.csv.CellDecoder[A6],implicitevidence$899:kantan.csv.CellEncoder[A7],implicitevidence$900:kantan.csv.CellDecoder[A7],implicitevidence$901:kantan.csv.CellEncoder[A8],implicitevidence$902:kantan.csv.CellDecoder[A8],implicitevidence$903:kantan.csv.CellEncoder[A9],implicitevidence$904:kantan.csv.CellDecoder[A9],implicitevidence$905:kantan.csv.CellEncoder[A10],implicitevidence$906:kantan.csv.CellDecoder[A10],implicitevidence$907:kantan.csv.CellEncoder[A11],implicitevidence$908:kantan.csv.CellDecoder[A11],implicitevidence$909:kantan.csv.CellEncoder[A12],implicitevidence$910:kantan.csv.CellDecoder[A12],implicitevidence$911:kantan.csv.CellEncoder[A13],implicitevidence$912:kantan.csv.CellDecoder[A13],implicitevidence$913:kantan.csv.CellEncoder[A14],implicitevidence$914:kantan.csv.CellDecoder[A14],implicitevidence$915:kantan.csv.CellEncoder[A15],implicitevidence$916:kantan.csv.CellDecoder[A15],implicitevidence$917:kantan.csv.CellEncoder[A16],implicitevidence$918:kantan.csv.CellDecoder[A16],implicitevidence$919:kantan.csv.CellEncoder[A17],implicitevidence$920:kantan.csv.CellDecoder[A17],implicitevidence$921:kantan.csv.CellEncoder[A18],implicitevidence$922:kantan.csv.CellDecoder[A18],implicitevidence$923:kantan.csv.CellEncoder[A19],implicitevidence$924:kantan.csv.CellDecoder[A19],implicitevidence$925:kantan.csv.CellEncoder[A20],implicitevidence$926:kantan.csv.CellDecoder[A20]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$849:kantan.csv.CellEncoder[A1],implicitevidence$850:kantan.csv.CellDecoder[A1],implicitevidence$851:kantan.csv.CellEncoder[A2],implicitevidence$852:kantan.csv.CellDecoder[A2],implicitevidence$853:kantan.csv.CellEncoder[A3],implicitevidence$854:kantan.csv.CellDecoder[A3],implicitevidence$855:kantan.csv.CellEncoder[A4],implicitevidence$856:kantan.csv.CellDecoder[A4],implicitevidence$857:kantan.csv.CellEncoder[A5],implicitevidence$858:kantan.csv.CellDecoder[A5],implicitevidence$859:kantan.csv.CellEncoder[A6],implicitevidence$860:kantan.csv.CellDecoder[A6],implicitevidence$861:kantan.csv.CellEncoder[A7],implicitevidence$862:kantan.csv.CellDecoder[A7],implicitevidence$863:kantan.csv.CellEncoder[A8],implicitevidence$864:kantan.csv.CellDecoder[A8],implicitevidence$865:kantan.csv.CellEncoder[A9],implicitevidence$866:kantan.csv.CellDecoder[A9],implicitevidence$867:kantan.csv.CellEncoder[A10],implicitevidence$868:kantan.csv.CellDecoder[A10],implicitevidence$869:kantan.csv.CellEncoder[A11],implicitevidence$870:kantan.csv.CellDecoder[A11],implicitevidence$871:kantan.csv.CellEncoder[A12],implicitevidence$872:kantan.csv.CellDecoder[A12],implicitevidence$873:kantan.csv.CellEncoder[A13],implicitevidence$874:kantan.csv.CellDecoder[A13],implicitevidence$875:kantan.csv.CellEncoder[A14],implicitevidence$876:kantan.csv.CellDecoder[A14],implicitevidence$877:kantan.csv.CellEncoder[A15],implicitevidence$878:kantan.csv.CellDecoder[A15],implicitevidence$879:kantan.csv.CellEncoder[A16],implicitevidence$880:kantan.csv.CellDecoder[A16],implicitevidence$881:kantan.csv.CellEncoder[A17],implicitevidence$882:kantan.csv.CellDecoder[A17],implicitevidence$883:kantan.csv.CellEncoder[A18],implicitevidence$884:kantan.csv.CellDecoder[A18],implicitevidence$885:kantan.csv.CellEncoder[A19],implicitevidence$886:kantan.csv.CellDecoder[A19]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$813:kantan.csv.CellEncoder[A1],implicitevidence$814:kantan.csv.CellDecoder[A1],implicitevidence$815:kantan.csv.CellEncoder[A2],implicitevidence$816:kantan.csv.CellDecoder[A2],implicitevidence$817:kantan.csv.CellEncoder[A3],implicitevidence$818:kantan.csv.CellDecoder[A3],implicitevidence$819:kantan.csv.CellEncoder[A4],implicitevidence$820:kantan.csv.CellDecoder[A4],implicitevidence$821:kantan.csv.CellEncoder[A5],implicitevidence$822:kantan.csv.CellDecoder[A5],implicitevidence$823:kantan.csv.CellEncoder[A6],implicitevidence$824:kantan.csv.CellDecoder[A6],implicitevidence$825:kantan.csv.CellEncoder[A7],implicitevidence$826:kantan.csv.CellDecoder[A7],implicitevidence$827:kantan.csv.CellEncoder[A8],implicitevidence$828:kantan.csv.CellDecoder[A8],implicitevidence$829:kantan.csv.CellEncoder[A9],implicitevidence$830:kantan.csv.CellDecoder[A9],implicitevidence$831:kantan.csv.CellEncoder[A10],implicitevidence$832:kantan.csv.CellDecoder[A10],implicitevidence$833:kantan.csv.CellEncoder[A11],implicitevidence$834:kantan.csv.CellDecoder[A11],implicitevidence$835:kantan.csv.CellEncoder[A12],implicitevidence$836:kantan.csv.CellDecoder[A12],implicitevidence$837:kantan.csv.CellEncoder[A13],implicitevidence$838:kantan.csv.CellDecoder[A13],implicitevidence$839:kantan.csv.CellEncoder[A14],implicitevidence$840:kantan.csv.CellDecoder[A14],implicitevidence$841:kantan.csv.CellEncoder[A15],implicitevidence$842:kantan.csv.CellDecoder[A15],implicitevidence$843:kantan.csv.CellEncoder[A16],implicitevidence$844:kantan.csv.CellDecoder[A16],implicitevidence$845:kantan.csv.CellEncoder[A17],implicitevidence$846:kantan.csv.CellDecoder[A17],implicitevidence$847:kantan.csv.CellEncoder[A18],implicitevidence$848:kantan.csv.CellDecoder[A18]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$779:kantan.csv.CellEncoder[A1],implicitevidence$780:kantan.csv.CellDecoder[A1],implicitevidence$781:kantan.csv.CellEncoder[A2],implicitevidence$782:kantan.csv.CellDecoder[A2],implicitevidence$783:kantan.csv.CellEncoder[A3],implicitevidence$784:kantan.csv.CellDecoder[A3],implicitevidence$785:kantan.csv.CellEncoder[A4],implicitevidence$786:kantan.csv.CellDecoder[A4],implicitevidence$787:kantan.csv.CellEncoder[A5],implicitevidence$788:kantan.csv.CellDecoder[A5],implicitevidence$789:kantan.csv.CellEncoder[A6],implicitevidence$790:kantan.csv.CellDecoder[A6],implicitevidence$791:kantan.csv.CellEncoder[A7],implicitevidence$792:kantan.csv.CellDecoder[A7],implicitevidence$793:kantan.csv.CellEncoder[A8],implicitevidence$794:kantan.csv.CellDecoder[A8],implicitevidence$795:kantan.csv.CellEncoder[A9],implicitevidence$796:kantan.csv.CellDecoder[A9],implicitevidence$797:kantan.csv.CellEncoder[A10],implicitevidence$798:kantan.csv.CellDecoder[A10],implicitevidence$799:kantan.csv.CellEncoder[A11],implicitevidence$800:kantan.csv.CellDecoder[A11],implicitevidence$801:kantan.csv.CellEncoder[A12],implicitevidence$802:kantan.csv.CellDecoder[A12],implicitevidence$803:kantan.csv.CellEncoder[A13],implicitevidence$804:kantan.csv.CellDecoder[A13],implicitevidence$805:kantan.csv.CellEncoder[A14],implicitevidence$806:kantan.csv.CellDecoder[A14],implicitevidence$807:kantan.csv.CellEncoder[A15],implicitevidence$808:kantan.csv.CellDecoder[A15],implicitevidence$809:kantan.csv.CellEncoder[A16],implicitevidence$810:kantan.csv.CellDecoder[A16],implicitevidence$811:kantan.csv.CellEncoder[A17],implicitevidence$812:kantan.csv.CellDecoder[A17]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$747:kantan.csv.CellEncoder[A1],implicitevidence$748:kantan.csv.CellDecoder[A1],implicitevidence$749:kantan.csv.CellEncoder[A2],implicitevidence$750:kantan.csv.CellDecoder[A2],implicitevidence$751:kantan.csv.CellEncoder[A3],implicitevidence$752:kantan.csv.CellDecoder[A3],implicitevidence$753:kantan.csv.CellEncoder[A4],implicitevidence$754:kantan.csv.CellDecoder[A4],implicitevidence$755:kantan.csv.CellEncoder[A5],implicitevidence$756:kantan.csv.CellDecoder[A5],implicitevidence$757:kantan.csv.CellEncoder[A6],implicitevidence$758:kantan.csv.CellDecoder[A6],implicitevidence$759:kantan.csv.CellEncoder[A7],implicitevidence$760:kantan.csv.CellDecoder[A7],implicitevidence$761:kantan.csv.CellEncoder[A8],implicitevidence$762:kantan.csv.CellDecoder[A8],implicitevidence$763:kantan.csv.CellEncoder[A9],implicitevidence$764:kantan.csv.CellDecoder[A9],implicitevidence$765:kantan.csv.CellEncoder[A10],implicitevidence$766:kantan.csv.CellDecoder[A10],implicitevidence$767:kantan.csv.CellEncoder[A11],implicitevidence$768:kantan.csv.CellDecoder[A11],implicitevidence$769:kantan.csv.CellEncoder[A12],implicitevidence$770:kantan.csv.CellDecoder[A12],implicitevidence$771:kantan.csv.CellEncoder[A13],implicitevidence$772:kantan.csv.CellDecoder[A13],implicitevidence$773:kantan.csv.CellEncoder[A14],implicitevidence$774:kantan.csv.CellDecoder[A14],implicitevidence$775:kantan.csv.CellEncoder[A15],implicitevidence$776:kantan.csv.CellDecoder[A15],implicitevidence$777:kantan.csv.CellEncoder[A16],implicitevidence$778:kantan.csv.CellDecoder[A16]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$717:kantan.csv.CellEncoder[A1],implicitevidence$718:kantan.csv.CellDecoder[A1],implicitevidence$719:kantan.csv.CellEncoder[A2],implicitevidence$720:kantan.csv.CellDecoder[A2],implicitevidence$721:kantan.csv.CellEncoder[A3],implicitevidence$722:kantan.csv.CellDecoder[A3],implicitevidence$723:kantan.csv.CellEncoder[A4],implicitevidence$724:kantan.csv.CellDecoder[A4],implicitevidence$725:kantan.csv.CellEncoder[A5],implicitevidence$726:kantan.csv.CellDecoder[A5],implicitevidence$727:kantan.csv.CellEncoder[A6],implicitevidence$728:kantan.csv.CellDecoder[A6],implicitevidence$729:kantan.csv.CellEncoder[A7],implicitevidence$730:kantan.csv.CellDecoder[A7],implicitevidence$731:kantan.csv.CellEncoder[A8],implicitevidence$732:kantan.csv.CellDecoder[A8],implicitevidence$733:kantan.csv.CellEncoder[A9],implicitevidence$734:kantan.csv.CellDecoder[A9],implicitevidence$735:kantan.csv.CellEncoder[A10],implicitevidence$736:kantan.csv.CellDecoder[A10],implicitevidence$737:kantan.csv.CellEncoder[A11],implicitevidence$738:kantan.csv.CellDecoder[A11],implicitevidence$739:kantan.csv.CellEncoder[A12],implicitevidence$740:kantan.csv.CellDecoder[A12],implicitevidence$741:kantan.csv.CellEncoder[A13],implicitevidence$742:kantan.csv.CellDecoder[A13],implicitevidence$743:kantan.csv.CellEncoder[A14],implicitevidence$744:kantan.csv.CellDecoder[A14],implicitevidence$745:kantan.csv.CellEncoder[A15],implicitevidence$746:kantan.csv.CellDecoder[A15]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$689:kantan.csv.CellEncoder[A1],implicitevidence$690:kantan.csv.CellDecoder[A1],implicitevidence$691:kantan.csv.CellEncoder[A2],implicitevidence$692:kantan.csv.CellDecoder[A2],implicitevidence$693:kantan.csv.CellEncoder[A3],implicitevidence$694:kantan.csv.CellDecoder[A3],implicitevidence$695:kantan.csv.CellEncoder[A4],implicitevidence$696:kantan.csv.CellDecoder[A4],implicitevidence$697:kantan.csv.CellEncoder[A5],implicitevidence$698:kantan.csv.CellDecoder[A5],implicitevidence$699:kantan.csv.CellEncoder[A6],implicitevidence$700:kantan.csv.CellDecoder[A6],implicitevidence$701:kantan.csv.CellEncoder[A7],implicitevidence$702:kantan.csv.CellDecoder[A7],implicitevidence$703:kantan.csv.CellEncoder[A8],implicitevidence$704:kantan.csv.CellDecoder[A8],implicitevidence$705:kantan.csv.CellEncoder[A9],implicitevidence$706:kantan.csv.CellDecoder[A9],implicitevidence$707:kantan.csv.CellEncoder[A10],implicitevidence$708:kantan.csv.CellDecoder[A10],implicitevidence$709:kantan.csv.CellEncoder[A11],implicitevidence$710:kantan.csv.CellDecoder[A11],implicitevidence$711:kantan.csv.CellEncoder[A12],implicitevidence$712:kantan.csv.CellDecoder[A12],implicitevidence$713:kantan.csv.CellEncoder[A13],implicitevidence$714:kantan.csv.CellDecoder[A13],implicitevidence$715:kantan.csv.CellEncoder[A14],implicitevidence$716:kantan.csv.CellDecoder[A14]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$663:kantan.csv.CellEncoder[A1],implicitevidence$664:kantan.csv.CellDecoder[A1],implicitevidence$665:kantan.csv.CellEncoder[A2],implicitevidence$666:kantan.csv.CellDecoder[A2],implicitevidence$667:kantan.csv.CellEncoder[A3],implicitevidence$668:kantan.csv.CellDecoder[A3],implicitevidence$669:kantan.csv.CellEncoder[A4],implicitevidence$670:kantan.csv.CellDecoder[A4],implicitevidence$671:kantan.csv.CellEncoder[A5],implicitevidence$672:kantan.csv.CellDecoder[A5],implicitevidence$673:kantan.csv.CellEncoder[A6],implicitevidence$674:kantan.csv.CellDecoder[A6],implicitevidence$675:kantan.csv.CellEncoder[A7],implicitevidence$676:kantan.csv.CellDecoder[A7],implicitevidence$677:kantan.csv.CellEncoder[A8],implicitevidence$678:kantan.csv.CellDecoder[A8],implicitevidence$679:kantan.csv.CellEncoder[A9],implicitevidence$680:kantan.csv.CellDecoder[A9],implicitevidence$681:kantan.csv.CellEncoder[A10],implicitevidence$682:kantan.csv.CellDecoder[A10],implicitevidence$683:kantan.csv.CellEncoder[A11],implicitevidence$684:kantan.csv.CellDecoder[A11],implicitevidence$685:kantan.csv.CellEncoder[A12],implicitevidence$686:kantan.csv.CellDecoder[A12],implicitevidence$687:kantan.csv.CellEncoder[A13],implicitevidence$688:kantan.csv.CellDecoder[A13]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$639:kantan.csv.CellEncoder[A1],implicitevidence$640:kantan.csv.CellDecoder[A1],implicitevidence$641:kantan.csv.CellEncoder[A2],implicitevidence$642:kantan.csv.CellDecoder[A2],implicitevidence$643:kantan.csv.CellEncoder[A3],implicitevidence$644:kantan.csv.CellDecoder[A3],implicitevidence$645:kantan.csv.CellEncoder[A4],implicitevidence$646:kantan.csv.CellDecoder[A4],implicitevidence$647:kantan.csv.CellEncoder[A5],implicitevidence$648:kantan.csv.CellDecoder[A5],implicitevidence$649:kantan.csv.CellEncoder[A6],implicitevidence$650:kantan.csv.CellDecoder[A6],implicitevidence$651:kantan.csv.CellEncoder[A7],implicitevidence$652:kantan.csv.CellDecoder[A7],implicitevidence$653:kantan.csv.CellEncoder[A8],implicitevidence$654:kantan.csv.CellDecoder[A8],implicitevidence$655:kantan.csv.CellEncoder[A9],implicitevidence$656:kantan.csv.CellDecoder[A9],implicitevidence$657:kantan.csv.CellEncoder[A10],implicitevidence$658:kantan.csv.CellDecoder[A10],implicitevidence$659:kantan.csv.CellEncoder[A11],implicitevidence$660:kantan.csv.CellDecoder[A11],implicitevidence$661:kantan.csv.CellEncoder[A12],implicitevidence$662:kantan.csv.CellDecoder[A12]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$617:kantan.csv.CellEncoder[A1],implicitevidence$618:kantan.csv.CellDecoder[A1],implicitevidence$619:kantan.csv.CellEncoder[A2],implicitevidence$620:kantan.csv.CellDecoder[A2],implicitevidence$621:kantan.csv.CellEncoder[A3],implicitevidence$622:kantan.csv.CellDecoder[A3],implicitevidence$623:kantan.csv.CellEncoder[A4],implicitevidence$624:kantan.csv.CellDecoder[A4],implicitevidence$625:kantan.csv.CellEncoder[A5],implicitevidence$626:kantan.csv.CellDecoder[A5],implicitevidence$627:kantan.csv.CellEncoder[A6],implicitevidence$628:kantan.csv.CellDecoder[A6],implicitevidence$629:kantan.csv.CellEncoder[A7],implicitevidence$630:kantan.csv.CellDecoder[A7],implicitevidence$631:kantan.csv.CellEncoder[A8],implicitevidence$632:kantan.csv.CellDecoder[A8],implicitevidence$633:kantan.csv.CellEncoder[A9],implicitevidence$634:kantan.csv.CellDecoder[A9],implicitevidence$635:kantan.csv.CellEncoder[A10],implicitevidence$636:kantan.csv.CellDecoder[A10],implicitevidence$637:kantan.csv.CellEncoder[A11],implicitevidence$638:kantan.csv.CellDecoder[A11]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$597:kantan.csv.CellEncoder[A1],implicitevidence$598:kantan.csv.CellDecoder[A1],implicitevidence$599:kantan.csv.CellEncoder[A2],implicitevidence$600:kantan.csv.CellDecoder[A2],implicitevidence$601:kantan.csv.CellEncoder[A3],implicitevidence$602:kantan.csv.CellDecoder[A3],implicitevidence$603:kantan.csv.CellEncoder[A4],implicitevidence$604:kantan.csv.CellDecoder[A4],implicitevidence$605:kantan.csv.CellEncoder[A5],implicitevidence$606:kantan.csv.CellDecoder[A5],implicitevidence$607:kantan.csv.CellEncoder[A6],implicitevidence$608:kantan.csv.CellDecoder[A6],implicitevidence$609:kantan.csv.CellEncoder[A7],implicitevidence$610:kantan.csv.CellDecoder[A7],implicitevidence$611:kantan.csv.CellEncoder[A8],implicitevidence$612:kantan.csv.CellDecoder[A8],implicitevidence$613:kantan.csv.CellEncoder[A9],implicitevidence$614:kantan.csv.CellDecoder[A9],implicitevidence$615:kantan.csv.CellEncoder[A10],implicitevidence$616:kantan.csv.CellDecoder[A10]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$579:kantan.csv.CellEncoder[A1],implicitevidence$580:kantan.csv.CellDecoder[A1],implicitevidence$581:kantan.csv.CellEncoder[A2],implicitevidence$582:kantan.csv.CellDecoder[A2],implicitevidence$583:kantan.csv.CellEncoder[A3],implicitevidence$584:kantan.csv.CellDecoder[A3],implicitevidence$585:kantan.csv.CellEncoder[A4],implicitevidence$586:kantan.csv.CellDecoder[A4],implicitevidence$587:kantan.csv.CellEncoder[A5],implicitevidence$588:kantan.csv.CellDecoder[A5],implicitevidence$589:kantan.csv.CellEncoder[A6],implicitevidence$590:kantan.csv.CellDecoder[A6],implicitevidence$591:kantan.csv.CellEncoder[A7],implicitevidence$592:kantan.csv.CellDecoder[A7],implicitevidence$593:kantan.csv.CellEncoder[A8],implicitevidence$594:kantan.csv.CellDecoder[A8],implicitevidence$595:kantan.csv.CellEncoder[A9],implicitevidence$596:kantan.csv.CellDecoder[A9]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$563:kantan.csv.CellEncoder[A1],implicitevidence$564:kantan.csv.CellDecoder[A1],implicitevidence$565:kantan.csv.CellEncoder[A2],implicitevidence$566:kantan.csv.CellDecoder[A2],implicitevidence$567:kantan.csv.CellEncoder[A3],implicitevidence$568:kantan.csv.CellDecoder[A3],implicitevidence$569:kantan.csv.CellEncoder[A4],implicitevidence$570:kantan.csv.CellDecoder[A4],implicitevidence$571:kantan.csv.CellEncoder[A5],implicitevidence$572:kantan.csv.CellDecoder[A5],implicitevidence$573:kantan.csv.CellEncoder[A6],implicitevidence$574:kantan.csv.CellDecoder[A6],implicitevidence$575:kantan.csv.CellEncoder[A7],implicitevidence$576:kantan.csv.CellDecoder[A7],implicitevidence$577:kantan.csv.CellEncoder[A8],implicitevidence$578:kantan.csv.CellDecoder[A8]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$549:kantan.csv.CellEncoder[A1],implicitevidence$550:kantan.csv.CellDecoder[A1],implicitevidence$551:kantan.csv.CellEncoder[A2],implicitevidence$552:kantan.csv.CellDecoder[A2],implicitevidence$553:kantan.csv.CellEncoder[A3],implicitevidence$554:kantan.csv.CellDecoder[A3],implicitevidence$555:kantan.csv.CellEncoder[A4],implicitevidence$556:kantan.csv.CellDecoder[A4],implicitevidence$557:kantan.csv.CellEncoder[A5],implicitevidence$558:kantan.csv.CellDecoder[A5],implicitevidence$559:kantan.csv.CellEncoder[A6],implicitevidence$560:kantan.csv.CellDecoder[A6],implicitevidence$561:kantan.csv.CellEncoder[A7],implicitevidence$562:kantan.csv.CellDecoder[A7]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$537:kantan.csv.CellEncoder[A1],implicitevidence$538:kantan.csv.CellDecoder[A1],implicitevidence$539:kantan.csv.CellEncoder[A2],implicitevidence$540:kantan.csv.CellDecoder[A2],implicitevidence$541:kantan.csv.CellEncoder[A3],implicitevidence$542:kantan.csv.CellDecoder[A3],implicitevidence$543:kantan.csv.CellEncoder[A4],implicitevidence$544:kantan.csv.CellDecoder[A4],implicitevidence$545:kantan.csv.CellEncoder[A5],implicitevidence$546:kantan.csv.CellDecoder[A5],implicitevidence$547:kantan.csv.CellEncoder[A6],implicitevidence$548:kantan.csv.CellDecoder[A6]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (A1, A2, A3, A4, A5) => C)(g: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,A5,C](f1:String,f2:String,f3:String,f4:String,f5:String)(f:(A1,A2,A3,A4,A5)=>C)(g:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$527:kantan.csv.CellEncoder[A1],implicitevidence$528:kantan.csv.CellDecoder[A1],implicitevidence$529:kantan.csv.CellEncoder[A2],implicitevidence$530:kantan.csv.CellDecoder[A2],implicitevidence$531:kantan.csv.CellEncoder[A3],implicitevidence$532:kantan.csv.CellDecoder[A3],implicitevidence$533:kantan.csv.CellEncoder[A4],implicitevidence$534:kantan.csv.CellDecoder[A4],implicitevidence$535:kantan.csv.CellEncoder[A5],implicitevidence$536:kantan.csv.CellDecoder[A5]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (A1, A2, A3, A4) => C)(g: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,A4,C](f1:String,f2:String,f3:String,f4:String)(f:(A1,A2,A3,A4)=>C)(g:C=>Option[(A1,A2,A3,A4)])(implicitevidence$519:kantan.csv.CellEncoder[A1],implicitevidence$520:kantan.csv.CellDecoder[A1],implicitevidence$521:kantan.csv.CellEncoder[A2],implicitevidence$522:kantan.csv.CellDecoder[A2],implicitevidence$523:kantan.csv.CellEncoder[A3],implicitevidence$524:kantan.csv.CellDecoder[A3],implicitevidence$525:kantan.csv.CellEncoder[A4],implicitevidence$526:kantan.csv.CellDecoder[A4]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String)(f: (A1, A2, A3) => C)(g: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,A3,C](f1:String,f2:String,f3:String)(f:(A1,A2,A3)=>C)(g:C=>Option[(A1,A2,A3)])(implicitevidence$513:kantan.csv.CellEncoder[A1],implicitevidence$514:kantan.csv.CellDecoder[A1],implicitevidence$515:kantan.csv.CellEncoder[A2],implicitevidence$516:kantan.csv.CellDecoder[A2],implicitevidence$517:kantan.csv.CellEncoder[A3],implicitevidence$518:kantan.csv.CellDecoder[A3]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String)(f: (A1, A2) => C)(g: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,A2,C](f1:String,f2:String)(f:(A1,A2)=>C)(g:C=>Option[(A1,A2)])(implicitevidence$509:kantan.csv.CellEncoder[A1],implicitevidence$510:kantan.csv.CellDecoder[A1],implicitevidence$511:kantan.csv.CellEncoder[A2],implicitevidence$512:kantan.csv.CellDecoder[A2]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String)(f: (A1) => C)(g: (C) => Option[A1])(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#caseCodec[A1,C](f1:String)(f:A1=>C)(g:C=>Option[A1])(implicitevidence$507:kantan.csv.CellEncoder[A1],implicitevidence$508:kantan.csv.CellDecoder[A1]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$463:kantan.csv.CellEncoder[A1],implicitevidence$464:kantan.csv.CellDecoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellDecoder[A2],implicitevidence$467:kantan.csv.CellEncoder[A3],implicitevidence$468:kantan.csv.CellDecoder[A3],implicitevidence$469:kantan.csv.CellEncoder[A4],implicitevidence$470:kantan.csv.CellDecoder[A4],implicitevidence$471:kantan.csv.CellEncoder[A5],implicitevidence$472:kantan.csv.CellDecoder[A5],implicitevidence$473:kantan.csv.CellEncoder[A6],implicitevidence$474:kantan.csv.CellDecoder[A6],implicitevidence$475:kantan.csv.CellEncoder[A7],implicitevidence$476:kantan.csv.CellDecoder[A7],implicitevidence$477:kantan.csv.CellEncoder[A8],implicitevidence$478:kantan.csv.CellDecoder[A8],implicitevidence$479:kantan.csv.CellEncoder[A9],implicitevidence$480:kantan.csv.CellDecoder[A9],implicitevidence$481:kantan.csv.CellEncoder[A10],implicitevidence$482:kantan.csv.CellDecoder[A10],implicitevidence$483:kantan.csv.CellEncoder[A11],implicitevidence$484:kantan.csv.CellDecoder[A11],implicitevidence$485:kantan.csv.CellEncoder[A12],implicitevidence$486:kantan.csv.CellDecoder[A12],implicitevidence$487:kantan.csv.CellEncoder[A13],implicitevidence$488:kantan.csv.CellDecoder[A13],implicitevidence$489:kantan.csv.CellEncoder[A14],implicitevidence$490:kantan.csv.CellDecoder[A14],implicitevidence$491:kantan.csv.CellEncoder[A15],implicitevidence$492:kantan.csv.CellDecoder[A15],implicitevidence$493:kantan.csv.CellEncoder[A16],implicitevidence$494:kantan.csv.CellDecoder[A16],implicitevidence$495:kantan.csv.CellEncoder[A17],implicitevidence$496:kantan.csv.CellDecoder[A17],implicitevidence$497:kantan.csv.CellEncoder[A18],implicitevidence$498:kantan.csv.CellDecoder[A18],implicitevidence$499:kantan.csv.CellEncoder[A19],implicitevidence$500:kantan.csv.CellDecoder[A19],implicitevidence$501:kantan.csv.CellEncoder[A20],implicitevidence$502:kantan.csv.CellDecoder[A20],implicitevidence$503:kantan.csv.CellEncoder[A21],implicitevidence$504:kantan.csv.CellDecoder[A21],implicitevidence$505:kantan.csv.CellEncoder[A22],implicitevidence$506:kantan.csv.CellDecoder[A22]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$421:kantan.csv.CellEncoder[A1],implicitevidence$422:kantan.csv.CellDecoder[A1],implicitevidence$423:kantan.csv.CellEncoder[A2],implicitevidence$424:kantan.csv.CellDecoder[A2],implicitevidence$425:kantan.csv.CellEncoder[A3],implicitevidence$426:kantan.csv.CellDecoder[A3],implicitevidence$427:kantan.csv.CellEncoder[A4],implicitevidence$428:kantan.csv.CellDecoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellDecoder[A5],implicitevidence$431:kantan.csv.CellEncoder[A6],implicitevidence$432:kantan.csv.CellDecoder[A6],implicitevidence$433:kantan.csv.CellEncoder[A7],implicitevidence$434:kantan.csv.CellDecoder[A7],implicitevidence$435:kantan.csv.CellEncoder[A8],implicitevidence$436:kantan.csv.CellDecoder[A8],implicitevidence$437:kantan.csv.CellEncoder[A9],implicitevidence$438:kantan.csv.CellDecoder[A9],implicitevidence$439:kantan.csv.CellEncoder[A10],implicitevidence$440:kantan.csv.CellDecoder[A10],implicitevidence$441:kantan.csv.CellEncoder[A11],implicitevidence$442:kantan.csv.CellDecoder[A11],implicitevidence$443:kantan.csv.CellEncoder[A12],implicitevidence$444:kantan.csv.CellDecoder[A12],implicitevidence$445:kantan.csv.CellEncoder[A13],implicitevidence$446:kantan.csv.CellDecoder[A13],implicitevidence$447:kantan.csv.CellEncoder[A14],implicitevidence$448:kantan.csv.CellDecoder[A14],implicitevidence$449:kantan.csv.CellEncoder[A15],implicitevidence$450:kantan.csv.CellDecoder[A15],implicitevidence$451:kantan.csv.CellEncoder[A16],implicitevidence$452:kantan.csv.CellDecoder[A16],implicitevidence$453:kantan.csv.CellEncoder[A17],implicitevidence$454:kantan.csv.CellDecoder[A17],implicitevidence$455:kantan.csv.CellEncoder[A18],implicitevidence$456:kantan.csv.CellDecoder[A18],implicitevidence$457:kantan.csv.CellEncoder[A19],implicitevidence$458:kantan.csv.CellDecoder[A19],implicitevidence$459:kantan.csv.CellEncoder[A20],implicitevidence$460:kantan.csv.CellDecoder[A20],implicitevidence$461:kantan.csv.CellEncoder[A21],implicitevidence$462:kantan.csv.CellDecoder[A21]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$381:kantan.csv.CellEncoder[A1],implicitevidence$382:kantan.csv.CellDecoder[A1],implicitevidence$383:kantan.csv.CellEncoder[A2],implicitevidence$384:kantan.csv.CellDecoder[A2],implicitevidence$385:kantan.csv.CellEncoder[A3],implicitevidence$386:kantan.csv.CellDecoder[A3],implicitevidence$387:kantan.csv.CellEncoder[A4],implicitevidence$388:kantan.csv.CellDecoder[A4],implicitevidence$389:kantan.csv.CellEncoder[A5],implicitevidence$390:kantan.csv.CellDecoder[A5],implicitevidence$391:kantan.csv.CellEncoder[A6],implicitevidence$392:kantan.csv.CellDecoder[A6],implicitevidence$393:kantan.csv.CellEncoder[A7],implicitevidence$394:kantan.csv.CellDecoder[A7],implicitevidence$395:kantan.csv.CellEncoder[A8],implicitevidence$396:kantan.csv.CellDecoder[A8],implicitevidence$397:kantan.csv.CellEncoder[A9],implicitevidence$398:kantan.csv.CellDecoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellDecoder[A10],implicitevidence$401:kantan.csv.CellEncoder[A11],implicitevidence$402:kantan.csv.CellDecoder[A11],implicitevidence$403:kantan.csv.CellEncoder[A12],implicitevidence$404:kantan.csv.CellDecoder[A12],implicitevidence$405:kantan.csv.CellEncoder[A13],implicitevidence$406:kantan.csv.CellDecoder[A13],implicitevidence$407:kantan.csv.CellEncoder[A14],implicitevidence$408:kantan.csv.CellDecoder[A14],implicitevidence$409:kantan.csv.CellEncoder[A15],implicitevidence$410:kantan.csv.CellDecoder[A15],implicitevidence$411:kantan.csv.CellEncoder[A16],implicitevidence$412:kantan.csv.CellDecoder[A16],implicitevidence$413:kantan.csv.CellEncoder[A17],implicitevidence$414:kantan.csv.CellDecoder[A17],implicitevidence$415:kantan.csv.CellEncoder[A18],implicitevidence$416:kantan.csv.CellDecoder[A18],implicitevidence$417:kantan.csv.CellEncoder[A19],implicitevidence$418:kantan.csv.CellDecoder[A19],implicitevidence$419:kantan.csv.CellEncoder[A20],implicitevidence$420:kantan.csv.CellDecoder[A20]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$343:kantan.csv.CellEncoder[A1],implicitevidence$344:kantan.csv.CellDecoder[A1],implicitevidence$345:kantan.csv.CellEncoder[A2],implicitevidence$346:kantan.csv.CellDecoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellDecoder[A3],implicitevidence$349:kantan.csv.CellEncoder[A4],implicitevidence$350:kantan.csv.CellDecoder[A4],implicitevidence$351:kantan.csv.CellEncoder[A5],implicitevidence$352:kantan.csv.CellDecoder[A5],implicitevidence$353:kantan.csv.CellEncoder[A6],implicitevidence$354:kantan.csv.CellDecoder[A6],implicitevidence$355:kantan.csv.CellEncoder[A7],implicitevidence$356:kantan.csv.CellDecoder[A7],implicitevidence$357:kantan.csv.CellEncoder[A8],implicitevidence$358:kantan.csv.CellDecoder[A8],implicitevidence$359:kantan.csv.CellEncoder[A9],implicitevidence$360:kantan.csv.CellDecoder[A9],implicitevidence$361:kantan.csv.CellEncoder[A10],implicitevidence$362:kantan.csv.CellDecoder[A10],implicitevidence$363:kantan.csv.CellEncoder[A11],implicitevidence$364:kantan.csv.CellDecoder[A11],implicitevidence$365:kantan.csv.CellEncoder[A12],implicitevidence$366:kantan.csv.CellDecoder[A12],implicitevidence$367:kantan.csv.CellEncoder[A13],implicitevidence$368:kantan.csv.CellDecoder[A13],implicitevidence$369:kantan.csv.CellEncoder[A14],implicitevidence$370:kantan.csv.CellDecoder[A14],implicitevidence$371:kantan.csv.CellEncoder[A15],implicitevidence$372:kantan.csv.CellDecoder[A15],implicitevidence$373:kantan.csv.CellEncoder[A16],implicitevidence$374:kantan.csv.CellDecoder[A16],implicitevidence$375:kantan.csv.CellEncoder[A17],implicitevidence$376:kantan.csv.CellDecoder[A17],implicitevidence$377:kantan.csv.CellEncoder[A18],implicitevidence$378:kantan.csv.CellDecoder[A18],implicitevidence$379:kantan.csv.CellEncoder[A19],implicitevidence$380:kantan.csv.CellDecoder[A19]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$307:kantan.csv.CellEncoder[A1],implicitevidence$308:kantan.csv.CellDecoder[A1],implicitevidence$309:kantan.csv.CellEncoder[A2],implicitevidence$310:kantan.csv.CellDecoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellDecoder[A3],implicitevidence$313:kantan.csv.CellEncoder[A4],implicitevidence$314:kantan.csv.CellDecoder[A4],implicitevidence$315:kantan.csv.CellEncoder[A5],implicitevidence$316:kantan.csv.CellDecoder[A5],implicitevidence$317:kantan.csv.CellEncoder[A6],implicitevidence$318:kantan.csv.CellDecoder[A6],implicitevidence$319:kantan.csv.CellEncoder[A7],implicitevidence$320:kantan.csv.CellDecoder[A7],implicitevidence$321:kantan.csv.CellEncoder[A8],implicitevidence$322:kantan.csv.CellDecoder[A8],implicitevidence$323:kantan.csv.CellEncoder[A9],implicitevidence$324:kantan.csv.CellDecoder[A9],implicitevidence$325:kantan.csv.CellEncoder[A10],implicitevidence$326:kantan.csv.CellDecoder[A10],implicitevidence$327:kantan.csv.CellEncoder[A11],implicitevidence$328:kantan.csv.CellDecoder[A11],implicitevidence$329:kantan.csv.CellEncoder[A12],implicitevidence$330:kantan.csv.CellDecoder[A12],implicitevidence$331:kantan.csv.CellEncoder[A13],implicitevidence$332:kantan.csv.CellDecoder[A13],implicitevidence$333:kantan.csv.CellEncoder[A14],implicitevidence$334:kantan.csv.CellDecoder[A14],implicitevidence$335:kantan.csv.CellEncoder[A15],implicitevidence$336:kantan.csv.CellDecoder[A15],implicitevidence$337:kantan.csv.CellEncoder[A16],implicitevidence$338:kantan.csv.CellDecoder[A16],implicitevidence$339:kantan.csv.CellEncoder[A17],implicitevidence$340:kantan.csv.CellDecoder[A17],implicitevidence$341:kantan.csv.CellEncoder[A18],implicitevidence$342:kantan.csv.CellDecoder[A18]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$273:kantan.csv.CellEncoder[A1],implicitevidence$274:kantan.csv.CellDecoder[A1],implicitevidence$275:kantan.csv.CellEncoder[A2],implicitevidence$276:kantan.csv.CellDecoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellDecoder[A3],implicitevidence$279:kantan.csv.CellEncoder[A4],implicitevidence$280:kantan.csv.CellDecoder[A4],implicitevidence$281:kantan.csv.CellEncoder[A5],implicitevidence$282:kantan.csv.CellDecoder[A5],implicitevidence$283:kantan.csv.CellEncoder[A6],implicitevidence$284:kantan.csv.CellDecoder[A6],implicitevidence$285:kantan.csv.CellEncoder[A7],implicitevidence$286:kantan.csv.CellDecoder[A7],implicitevidence$287:kantan.csv.CellEncoder[A8],implicitevidence$288:kantan.csv.CellDecoder[A8],implicitevidence$289:kantan.csv.CellEncoder[A9],implicitevidence$290:kantan.csv.CellDecoder[A9],implicitevidence$291:kantan.csv.CellEncoder[A10],implicitevidence$292:kantan.csv.CellDecoder[A10],implicitevidence$293:kantan.csv.CellEncoder[A11],implicitevidence$294:kantan.csv.CellDecoder[A11],implicitevidence$295:kantan.csv.CellEncoder[A12],implicitevidence$296:kantan.csv.CellDecoder[A12],implicitevidence$297:kantan.csv.CellEncoder[A13],implicitevidence$298:kantan.csv.CellDecoder[A13],implicitevidence$299:kantan.csv.CellEncoder[A14],implicitevidence$300:kantan.csv.CellDecoder[A14],implicitevidence$301:kantan.csv.CellEncoder[A15],implicitevidence$302:kantan.csv.CellDecoder[A15],implicitevidence$303:kantan.csv.CellEncoder[A16],implicitevidence$304:kantan.csv.CellDecoder[A16],implicitevidence$305:kantan.csv.CellEncoder[A17],implicitevidence$306:kantan.csv.CellDecoder[A17]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$241:kantan.csv.CellEncoder[A1],implicitevidence$242:kantan.csv.CellDecoder[A1],implicitevidence$243:kantan.csv.CellEncoder[A2],implicitevidence$244:kantan.csv.CellDecoder[A2],implicitevidence$245:kantan.csv.CellEncoder[A3],implicitevidence$246:kantan.csv.CellDecoder[A3],implicitevidence$247:kantan.csv.CellEncoder[A4],implicitevidence$248:kantan.csv.CellDecoder[A4],implicitevidence$249:kantan.csv.CellEncoder[A5],implicitevidence$250:kantan.csv.CellDecoder[A5],implicitevidence$251:kantan.csv.CellEncoder[A6],implicitevidence$252:kantan.csv.CellDecoder[A6],implicitevidence$253:kantan.csv.CellEncoder[A7],implicitevidence$254:kantan.csv.CellDecoder[A7],implicitevidence$255:kantan.csv.CellEncoder[A8],implicitevidence$256:kantan.csv.CellDecoder[A8],implicitevidence$257:kantan.csv.CellEncoder[A9],implicitevidence$258:kantan.csv.CellDecoder[A9],implicitevidence$259:kantan.csv.CellEncoder[A10],implicitevidence$260:kantan.csv.CellDecoder[A10],implicitevidence$261:kantan.csv.CellEncoder[A11],implicitevidence$262:kantan.csv.CellDecoder[A11],implicitevidence$263:kantan.csv.CellEncoder[A12],implicitevidence$264:kantan.csv.CellDecoder[A12],implicitevidence$265:kantan.csv.CellEncoder[A13],implicitevidence$266:kantan.csv.CellDecoder[A13],implicitevidence$267:kantan.csv.CellEncoder[A14],implicitevidence$268:kantan.csv.CellDecoder[A14],implicitevidence$269:kantan.csv.CellEncoder[A15],implicitevidence$270:kantan.csv.CellDecoder[A15],implicitevidence$271:kantan.csv.CellEncoder[A16],implicitevidence$272:kantan.csv.CellDecoder[A16]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$211:kantan.csv.CellEncoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A1],implicitevidence$213:kantan.csv.CellEncoder[A2],implicitevidence$214:kantan.csv.CellDecoder[A2],implicitevidence$215:kantan.csv.CellEncoder[A3],implicitevidence$216:kantan.csv.CellDecoder[A3],implicitevidence$217:kantan.csv.CellEncoder[A4],implicitevidence$218:kantan.csv.CellDecoder[A4],implicitevidence$219:kantan.csv.CellEncoder[A5],implicitevidence$220:kantan.csv.CellDecoder[A5],implicitevidence$221:kantan.csv.CellEncoder[A6],implicitevidence$222:kantan.csv.CellDecoder[A6],implicitevidence$223:kantan.csv.CellEncoder[A7],implicitevidence$224:kantan.csv.CellDecoder[A7],implicitevidence$225:kantan.csv.CellEncoder[A8],implicitevidence$226:kantan.csv.CellDecoder[A8],implicitevidence$227:kantan.csv.CellEncoder[A9],implicitevidence$228:kantan.csv.CellDecoder[A9],implicitevidence$229:kantan.csv.CellEncoder[A10],implicitevidence$230:kantan.csv.CellDecoder[A10],implicitevidence$231:kantan.csv.CellEncoder[A11],implicitevidence$232:kantan.csv.CellDecoder[A11],implicitevidence$233:kantan.csv.CellEncoder[A12],implicitevidence$234:kantan.csv.CellDecoder[A12],implicitevidence$235:kantan.csv.CellEncoder[A13],implicitevidence$236:kantan.csv.CellDecoder[A13],implicitevidence$237:kantan.csv.CellEncoder[A14],implicitevidence$238:kantan.csv.CellDecoder[A14],implicitevidence$239:kantan.csv.CellEncoder[A15],implicitevidence$240:kantan.csv.CellDecoder[A15]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$183:kantan.csv.CellEncoder[A1],implicitevidence$184:kantan.csv.CellDecoder[A1],implicitevidence$185:kantan.csv.CellEncoder[A2],implicitevidence$186:kantan.csv.CellDecoder[A2],implicitevidence$187:kantan.csv.CellEncoder[A3],implicitevidence$188:kantan.csv.CellDecoder[A3],implicitevidence$189:kantan.csv.CellEncoder[A4],implicitevidence$190:kantan.csv.CellDecoder[A4],implicitevidence$191:kantan.csv.CellEncoder[A5],implicitevidence$192:kantan.csv.CellDecoder[A5],implicitevidence$193:kantan.csv.CellEncoder[A6],implicitevidence$194:kantan.csv.CellDecoder[A6],implicitevidence$195:kantan.csv.CellEncoder[A7],implicitevidence$196:kantan.csv.CellDecoder[A7],implicitevidence$197:kantan.csv.CellEncoder[A8],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellEncoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A9],implicitevidence$201:kantan.csv.CellEncoder[A10],implicitevidence$202:kantan.csv.CellDecoder[A10],implicitevidence$203:kantan.csv.CellEncoder[A11],implicitevidence$204:kantan.csv.CellDecoder[A11],implicitevidence$205:kantan.csv.CellEncoder[A12],implicitevidence$206:kantan.csv.CellDecoder[A12],implicitevidence$207:kantan.csv.CellEncoder[A13],implicitevidence$208:kantan.csv.CellDecoder[A13],implicitevidence$209:kantan.csv.CellEncoder[A14],implicitevidence$210:kantan.csv.CellDecoder[A14]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$157:kantan.csv.CellEncoder[A1],implicitevidence$158:kantan.csv.CellDecoder[A1],implicitevidence$159:kantan.csv.CellEncoder[A2],implicitevidence$160:kantan.csv.CellDecoder[A2],implicitevidence$161:kantan.csv.CellEncoder[A3],implicitevidence$162:kantan.csv.CellDecoder[A3],implicitevidence$163:kantan.csv.CellEncoder[A4],implicitevidence$164:kantan.csv.CellDecoder[A4],implicitevidence$165:kantan.csv.CellEncoder[A5],implicitevidence$166:kantan.csv.CellDecoder[A5],implicitevidence$167:kantan.csv.CellEncoder[A6],implicitevidence$168:kantan.csv.CellDecoder[A6],implicitevidence$169:kantan.csv.CellEncoder[A7],implicitevidence$170:kantan.csv.CellDecoder[A7],implicitevidence$171:kantan.csv.CellEncoder[A8],implicitevidence$172:kantan.csv.CellDecoder[A8],implicitevidence$173:kantan.csv.CellEncoder[A9],implicitevidence$174:kantan.csv.CellDecoder[A9],implicitevidence$175:kantan.csv.CellEncoder[A10],implicitevidence$176:kantan.csv.CellDecoder[A10],implicitevidence$177:kantan.csv.CellEncoder[A11],implicitevidence$178:kantan.csv.CellDecoder[A11],implicitevidence$179:kantan.csv.CellEncoder[A12],implicitevidence$180:kantan.csv.CellDecoder[A12],implicitevidence$181:kantan.csv.CellEncoder[A13],implicitevidence$182:kantan.csv.CellDecoder[A13]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$133:kantan.csv.CellEncoder[A1],implicitevidence$134:kantan.csv.CellDecoder[A1],implicitevidence$135:kantan.csv.CellEncoder[A2],implicitevidence$136:kantan.csv.CellDecoder[A2],implicitevidence$137:kantan.csv.CellEncoder[A3],implicitevidence$138:kantan.csv.CellDecoder[A3],implicitevidence$139:kantan.csv.CellEncoder[A4],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellEncoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A5],implicitevidence$143:kantan.csv.CellEncoder[A6],implicitevidence$144:kantan.csv.CellDecoder[A6],implicitevidence$145:kantan.csv.CellEncoder[A7],implicitevidence$146:kantan.csv.CellDecoder[A7],implicitevidence$147:kantan.csv.CellEncoder[A8],implicitevidence$148:kantan.csv.CellDecoder[A8],implicitevidence$149:kantan.csv.CellEncoder[A9],implicitevidence$150:kantan.csv.CellDecoder[A9],implicitevidence$151:kantan.csv.CellEncoder[A10],implicitevidence$152:kantan.csv.CellDecoder[A10],implicitevidence$153:kantan.csv.CellEncoder[A11],implicitevidence$154:kantan.csv.CellDecoder[A11],implicitevidence$155:kantan.csv.CellEncoder[A12],implicitevidence$156:kantan.csv.CellDecoder[A12]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$111:kantan.csv.CellEncoder[A1],implicitevidence$112:kantan.csv.CellDecoder[A1],implicitevidence$113:kantan.csv.CellEncoder[A2],implicitevidence$114:kantan.csv.CellDecoder[A2],implicitevidence$115:kantan.csv.CellEncoder[A3],implicitevidence$116:kantan.csv.CellDecoder[A3],implicitevidence$117:kantan.csv.CellEncoder[A4],implicitevidence$118:kantan.csv.CellDecoder[A4],implicitevidence$119:kantan.csv.CellEncoder[A5],implicitevidence$120:kantan.csv.CellDecoder[A5],implicitevidence$121:kantan.csv.CellEncoder[A6],implicitevidence$122:kantan.csv.CellDecoder[A6],implicitevidence$123:kantan.csv.CellEncoder[A7],implicitevidence$124:kantan.csv.CellDecoder[A7],implicitevidence$125:kantan.csv.CellEncoder[A8],implicitevidence$126:kantan.csv.CellDecoder[A8],implicitevidence$127:kantan.csv.CellEncoder[A9],implicitevidence$128:kantan.csv.CellDecoder[A9],implicitevidence$129:kantan.csv.CellEncoder[A10],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellEncoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A11]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$91:kantan.csv.CellEncoder[A1],implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellEncoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A2],implicitevidence$95:kantan.csv.CellEncoder[A3],implicitevidence$96:kantan.csv.CellDecoder[A3],implicitevidence$97:kantan.csv.CellEncoder[A4],implicitevidence$98:kantan.csv.CellDecoder[A4],implicitevidence$99:kantan.csv.CellEncoder[A5],implicitevidence$100:kantan.csv.CellDecoder[A5],implicitevidence$101:kantan.csv.CellEncoder[A6],implicitevidence$102:kantan.csv.CellDecoder[A6],implicitevidence$103:kantan.csv.CellEncoder[A7],implicitevidence$104:kantan.csv.CellDecoder[A7],implicitevidence$105:kantan.csv.CellEncoder[A8],implicitevidence$106:kantan.csv.CellDecoder[A8],implicitevidence$107:kantan.csv.CellEncoder[A9],implicitevidence$108:kantan.csv.CellDecoder[A9],implicitevidence$109:kantan.csv.CellEncoder[A10],implicitevidence$110:kantan.csv.CellDecoder[A10]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$73:kantan.csv.CellEncoder[A1],implicitevidence$74:kantan.csv.CellDecoder[A1],implicitevidence$75:kantan.csv.CellEncoder[A2],implicitevidence$76:kantan.csv.CellDecoder[A2],implicitevidence$77:kantan.csv.CellEncoder[A3],implicitevidence$78:kantan.csv.CellDecoder[A3],implicitevidence$79:kantan.csv.CellEncoder[A4],implicitevidence$80:kantan.csv.CellDecoder[A4],implicitevidence$81:kantan.csv.CellEncoder[A5],implicitevidence$82:kantan.csv.CellDecoder[A5],implicitevidence$83:kantan.csv.CellEncoder[A6],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellEncoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A7],implicitevidence$87:kantan.csv.CellEncoder[A8],implicitevidence$88:kantan.csv.CellDecoder[A8],implicitevidence$89:kantan.csv.CellEncoder[A9],implicitevidence$90:kantan.csv.CellDecoder[A9]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$57:kantan.csv.CellEncoder[A1],implicitevidence$58:kantan.csv.CellDecoder[A1],implicitevidence$59:kantan.csv.CellEncoder[A2],implicitevidence$60:kantan.csv.CellDecoder[A2],implicitevidence$61:kantan.csv.CellEncoder[A3],implicitevidence$62:kantan.csv.CellDecoder[A3],implicitevidence$63:kantan.csv.CellEncoder[A4],implicitevidence$64:kantan.csv.CellDecoder[A4],implicitevidence$65:kantan.csv.CellEncoder[A5],implicitevidence$66:kantan.csv.CellDecoder[A5],implicitevidence$67:kantan.csv.CellEncoder[A6],implicitevidence$68:kantan.csv.CellDecoder[A6],implicitevidence$69:kantan.csv.CellEncoder[A7],implicitevidence$70:kantan.csv.CellDecoder[A7],implicitevidence$71:kantan.csv.CellEncoder[A8],implicitevidence$72:kantan.csv.CellDecoder[A8]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$43:kantan.csv.CellEncoder[A1],implicitevidence$44:kantan.csv.CellDecoder[A1],implicitevidence$45:kantan.csv.CellEncoder[A2],implicitevidence$46:kantan.csv.CellDecoder[A2],implicitevidence$47:kantan.csv.CellEncoder[A3],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellEncoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A4],implicitevidence$51:kantan.csv.CellEncoder[A5],implicitevidence$52:kantan.csv.CellDecoder[A5],implicitevidence$53:kantan.csv.CellEncoder[A6],implicitevidence$54:kantan.csv.CellDecoder[A6],implicitevidence$55:kantan.csv.CellEncoder[A7],implicitevidence$56:kantan.csv.CellDecoder[A7]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,A6,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$31:kantan.csv.CellEncoder[A1],implicitevidence$32:kantan.csv.CellDecoder[A1],implicitevidence$33:kantan.csv.CellEncoder[A2],implicitevidence$34:kantan.csv.CellDecoder[A2],implicitevidence$35:kantan.csv.CellEncoder[A3],implicitevidence$36:kantan.csv.CellDecoder[A3],implicitevidence$37:kantan.csv.CellEncoder[A4],implicitevidence$38:kantan.csv.CellDecoder[A4],implicitevidence$39:kantan.csv.CellEncoder[A5],implicitevidence$40:kantan.csv.CellDecoder[A5],implicitevidence$41:kantan.csv.CellEncoder[A6],implicitevidence$42:kantan.csv.CellDecoder[A6]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (A1, A2, A3, A4, A5) => C)(g: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,A5,C](f1:String,f2:String,f3:String,f4:String,f5:String)(f:(A1,A2,A3,A4,A5)=>C)(g:C=>(A1,A2,A3,A4,A5))(implicitevidence$21:kantan.csv.CellEncoder[A1],implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellEncoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A2],implicitevidence$25:kantan.csv.CellEncoder[A3],implicitevidence$26:kantan.csv.CellDecoder[A3],implicitevidence$27:kantan.csv.CellEncoder[A4],implicitevidence$28:kantan.csv.CellDecoder[A4],implicitevidence$29:kantan.csv.CellEncoder[A5],implicitevidence$30:kantan.csv.CellDecoder[A5]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (A1, A2, A3, A4) => C)(g: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,A4,C](f1:String,f2:String,f3:String,f4:String)(f:(A1,A2,A3,A4)=>C)(g:C=>(A1,A2,A3,A4))(implicitevidence$13:kantan.csv.CellEncoder[A1],implicitevidence$14:kantan.csv.CellDecoder[A1],implicitevidence$15:kantan.csv.CellEncoder[A2],implicitevidence$16:kantan.csv.CellDecoder[A2],implicitevidence$17:kantan.csv.CellEncoder[A3],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellEncoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A4]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String)(f: (A1, A2, A3) => C)(g: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,A3,C](f1:String,f2:String,f3:String)(f:(A1,A2,A3)=>C)(g:C=>(A1,A2,A3))(implicitevidence$7:kantan.csv.CellEncoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A1],implicitevidence$9:kantan.csv.CellEncoder[A2],implicitevidence$10:kantan.csv.CellDecoder[A2],implicitevidence$11:kantan.csv.CellEncoder[A3],implicitevidence$12:kantan.csv.CellDecoder[A3]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String)(f: (A1, A2) => C)(g: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,A2,C](f1:String,f2:String)(f:(A1,A2)=>C)(g:C=>(A1,A2))(implicitevidence$3:kantan.csv.CellEncoder[A1],implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellEncoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A2]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String)(f: (A1) => C)(g: (C) => A1)(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#codec[A1,C](f1:String)(f:A1=>C)(g:C=>A1)(implicitevidence$1:kantan.csv.CellEncoder[A1],implicitevidence$2:kantan.csv.CellDecoder[A1]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/GeneratedHeaderCodecs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.GeneratedHeaderDecoders", "trait" : "kantan\/csv\/GeneratedHeaderDecoders.html", "kind" : "trait", "members_trait" : [{"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21], arg21: CellDecoder[A22]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>R)(implicitevidence$232:kantan.csv.CellDecoder[A1],implicitevidence$233:kantan.csv.CellDecoder[A2],implicitevidence$234:kantan.csv.CellDecoder[A3],implicitevidence$235:kantan.csv.CellDecoder[A4],implicitevidence$236:kantan.csv.CellDecoder[A5],implicitevidence$237:kantan.csv.CellDecoder[A6],implicitevidence$238:kantan.csv.CellDecoder[A7],implicitevidence$239:kantan.csv.CellDecoder[A8],implicitevidence$240:kantan.csv.CellDecoder[A9],implicitevidence$241:kantan.csv.CellDecoder[A10],implicitevidence$242:kantan.csv.CellDecoder[A11],implicitevidence$243:kantan.csv.CellDecoder[A12],implicitevidence$244:kantan.csv.CellDecoder[A13],implicitevidence$245:kantan.csv.CellDecoder[A14],implicitevidence$246:kantan.csv.CellDecoder[A15],implicitevidence$247:kantan.csv.CellDecoder[A16],implicitevidence$248:kantan.csv.CellDecoder[A17],implicitevidence$249:kantan.csv.CellDecoder[A18],implicitevidence$250:kantan.csv.CellDecoder[A19],implicitevidence$251:kantan.csv.CellDecoder[A20],implicitevidence$252:kantan.csv.CellDecoder[A21],implicitevidence$253:kantan.csv.CellDecoder[A22]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>R)(implicitevidence$211:kantan.csv.CellDecoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A2],implicitevidence$213:kantan.csv.CellDecoder[A3],implicitevidence$214:kantan.csv.CellDecoder[A4],implicitevidence$215:kantan.csv.CellDecoder[A5],implicitevidence$216:kantan.csv.CellDecoder[A6],implicitevidence$217:kantan.csv.CellDecoder[A7],implicitevidence$218:kantan.csv.CellDecoder[A8],implicitevidence$219:kantan.csv.CellDecoder[A9],implicitevidence$220:kantan.csv.CellDecoder[A10],implicitevidence$221:kantan.csv.CellDecoder[A11],implicitevidence$222:kantan.csv.CellDecoder[A12],implicitevidence$223:kantan.csv.CellDecoder[A13],implicitevidence$224:kantan.csv.CellDecoder[A14],implicitevidence$225:kantan.csv.CellDecoder[A15],implicitevidence$226:kantan.csv.CellDecoder[A16],implicitevidence$227:kantan.csv.CellDecoder[A17],implicitevidence$228:kantan.csv.CellDecoder[A18],implicitevidence$229:kantan.csv.CellDecoder[A19],implicitevidence$230:kantan.csv.CellDecoder[A20],implicitevidence$231:kantan.csv.CellDecoder[A21]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>R)(implicitevidence$191:kantan.csv.CellDecoder[A1],implicitevidence$192:kantan.csv.CellDecoder[A2],implicitevidence$193:kantan.csv.CellDecoder[A3],implicitevidence$194:kantan.csv.CellDecoder[A4],implicitevidence$195:kantan.csv.CellDecoder[A5],implicitevidence$196:kantan.csv.CellDecoder[A6],implicitevidence$197:kantan.csv.CellDecoder[A7],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellDecoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A10],implicitevidence$201:kantan.csv.CellDecoder[A11],implicitevidence$202:kantan.csv.CellDecoder[A12],implicitevidence$203:kantan.csv.CellDecoder[A13],implicitevidence$204:kantan.csv.CellDecoder[A14],implicitevidence$205:kantan.csv.CellDecoder[A15],implicitevidence$206:kantan.csv.CellDecoder[A16],implicitevidence$207:kantan.csv.CellDecoder[A17],implicitevidence$208:kantan.csv.CellDecoder[A18],implicitevidence$209:kantan.csv.CellDecoder[A19],implicitevidence$210:kantan.csv.CellDecoder[A20]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>R)(implicitevidence$172:kantan.csv.CellDecoder[A1],implicitevidence$173:kantan.csv.CellDecoder[A2],implicitevidence$174:kantan.csv.CellDecoder[A3],implicitevidence$175:kantan.csv.CellDecoder[A4],implicitevidence$176:kantan.csv.CellDecoder[A5],implicitevidence$177:kantan.csv.CellDecoder[A6],implicitevidence$178:kantan.csv.CellDecoder[A7],implicitevidence$179:kantan.csv.CellDecoder[A8],implicitevidence$180:kantan.csv.CellDecoder[A9],implicitevidence$181:kantan.csv.CellDecoder[A10],implicitevidence$182:kantan.csv.CellDecoder[A11],implicitevidence$183:kantan.csv.CellDecoder[A12],implicitevidence$184:kantan.csv.CellDecoder[A13],implicitevidence$185:kantan.csv.CellDecoder[A14],implicitevidence$186:kantan.csv.CellDecoder[A15],implicitevidence$187:kantan.csv.CellDecoder[A16],implicitevidence$188:kantan.csv.CellDecoder[A17],implicitevidence$189:kantan.csv.CellDecoder[A18],implicitevidence$190:kantan.csv.CellDecoder[A19]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>R)(implicitevidence$154:kantan.csv.CellDecoder[A1],implicitevidence$155:kantan.csv.CellDecoder[A2],implicitevidence$156:kantan.csv.CellDecoder[A3],implicitevidence$157:kantan.csv.CellDecoder[A4],implicitevidence$158:kantan.csv.CellDecoder[A5],implicitevidence$159:kantan.csv.CellDecoder[A6],implicitevidence$160:kantan.csv.CellDecoder[A7],implicitevidence$161:kantan.csv.CellDecoder[A8],implicitevidence$162:kantan.csv.CellDecoder[A9],implicitevidence$163:kantan.csv.CellDecoder[A10],implicitevidence$164:kantan.csv.CellDecoder[A11],implicitevidence$165:kantan.csv.CellDecoder[A12],implicitevidence$166:kantan.csv.CellDecoder[A13],implicitevidence$167:kantan.csv.CellDecoder[A14],implicitevidence$168:kantan.csv.CellDecoder[A15],implicitevidence$169:kantan.csv.CellDecoder[A16],implicitevidence$170:kantan.csv.CellDecoder[A17],implicitevidence$171:kantan.csv.CellDecoder[A18]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>R)(implicitevidence$137:kantan.csv.CellDecoder[A1],implicitevidence$138:kantan.csv.CellDecoder[A2],implicitevidence$139:kantan.csv.CellDecoder[A3],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellDecoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A6],implicitevidence$143:kantan.csv.CellDecoder[A7],implicitevidence$144:kantan.csv.CellDecoder[A8],implicitevidence$145:kantan.csv.CellDecoder[A9],implicitevidence$146:kantan.csv.CellDecoder[A10],implicitevidence$147:kantan.csv.CellDecoder[A11],implicitevidence$148:kantan.csv.CellDecoder[A12],implicitevidence$149:kantan.csv.CellDecoder[A13],implicitevidence$150:kantan.csv.CellDecoder[A14],implicitevidence$151:kantan.csv.CellDecoder[A15],implicitevidence$152:kantan.csv.CellDecoder[A16],implicitevidence$153:kantan.csv.CellDecoder[A17]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>R)(implicitevidence$121:kantan.csv.CellDecoder[A1],implicitevidence$122:kantan.csv.CellDecoder[A2],implicitevidence$123:kantan.csv.CellDecoder[A3],implicitevidence$124:kantan.csv.CellDecoder[A4],implicitevidence$125:kantan.csv.CellDecoder[A5],implicitevidence$126:kantan.csv.CellDecoder[A6],implicitevidence$127:kantan.csv.CellDecoder[A7],implicitevidence$128:kantan.csv.CellDecoder[A8],implicitevidence$129:kantan.csv.CellDecoder[A9],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellDecoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A12],implicitevidence$133:kantan.csv.CellDecoder[A13],implicitevidence$134:kantan.csv.CellDecoder[A14],implicitevidence$135:kantan.csv.CellDecoder[A15],implicitevidence$136:kantan.csv.CellDecoder[A16]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>R)(implicitevidence$106:kantan.csv.CellDecoder[A1],implicitevidence$107:kantan.csv.CellDecoder[A2],implicitevidence$108:kantan.csv.CellDecoder[A3],implicitevidence$109:kantan.csv.CellDecoder[A4],implicitevidence$110:kantan.csv.CellDecoder[A5],implicitevidence$111:kantan.csv.CellDecoder[A6],implicitevidence$112:kantan.csv.CellDecoder[A7],implicitevidence$113:kantan.csv.CellDecoder[A8],implicitevidence$114:kantan.csv.CellDecoder[A9],implicitevidence$115:kantan.csv.CellDecoder[A10],implicitevidence$116:kantan.csv.CellDecoder[A11],implicitevidence$117:kantan.csv.CellDecoder[A12],implicitevidence$118:kantan.csv.CellDecoder[A13],implicitevidence$119:kantan.csv.CellDecoder[A14],implicitevidence$120:kantan.csv.CellDecoder[A15]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>R)(implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellDecoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A3],implicitevidence$95:kantan.csv.CellDecoder[A4],implicitevidence$96:kantan.csv.CellDecoder[A5],implicitevidence$97:kantan.csv.CellDecoder[A6],implicitevidence$98:kantan.csv.CellDecoder[A7],implicitevidence$99:kantan.csv.CellDecoder[A8],implicitevidence$100:kantan.csv.CellDecoder[A9],implicitevidence$101:kantan.csv.CellDecoder[A10],implicitevidence$102:kantan.csv.CellDecoder[A11],implicitevidence$103:kantan.csv.CellDecoder[A12],implicitevidence$104:kantan.csv.CellDecoder[A13],implicitevidence$105:kantan.csv.CellDecoder[A14]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>R)(implicitevidence$79:kantan.csv.CellDecoder[A1],implicitevidence$80:kantan.csv.CellDecoder[A2],implicitevidence$81:kantan.csv.CellDecoder[A3],implicitevidence$82:kantan.csv.CellDecoder[A4],implicitevidence$83:kantan.csv.CellDecoder[A5],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellDecoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A8],implicitevidence$87:kantan.csv.CellDecoder[A9],implicitevidence$88:kantan.csv.CellDecoder[A10],implicitevidence$89:kantan.csv.CellDecoder[A11],implicitevidence$90:kantan.csv.CellDecoder[A12],implicitevidence$91:kantan.csv.CellDecoder[A13]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>R)(implicitevidence$67:kantan.csv.CellDecoder[A1],implicitevidence$68:kantan.csv.CellDecoder[A2],implicitevidence$69:kantan.csv.CellDecoder[A3],implicitevidence$70:kantan.csv.CellDecoder[A4],implicitevidence$71:kantan.csv.CellDecoder[A5],implicitevidence$72:kantan.csv.CellDecoder[A6],implicitevidence$73:kantan.csv.CellDecoder[A7],implicitevidence$74:kantan.csv.CellDecoder[A8],implicitevidence$75:kantan.csv.CellDecoder[A9],implicitevidence$76:kantan.csv.CellDecoder[A10],implicitevidence$77:kantan.csv.CellDecoder[A11],implicitevidence$78:kantan.csv.CellDecoder[A12]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>R)(implicitevidence$56:kantan.csv.CellDecoder[A1],implicitevidence$57:kantan.csv.CellDecoder[A2],implicitevidence$58:kantan.csv.CellDecoder[A3],implicitevidence$59:kantan.csv.CellDecoder[A4],implicitevidence$60:kantan.csv.CellDecoder[A5],implicitevidence$61:kantan.csv.CellDecoder[A6],implicitevidence$62:kantan.csv.CellDecoder[A7],implicitevidence$63:kantan.csv.CellDecoder[A8],implicitevidence$64:kantan.csv.CellDecoder[A9],implicitevidence$65:kantan.csv.CellDecoder[A10],implicitevidence$66:kantan.csv.CellDecoder[A11]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>R)(implicitevidence$46:kantan.csv.CellDecoder[A1],implicitevidence$47:kantan.csv.CellDecoder[A2],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellDecoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A5],implicitevidence$51:kantan.csv.CellDecoder[A6],implicitevidence$52:kantan.csv.CellDecoder[A7],implicitevidence$53:kantan.csv.CellDecoder[A8],implicitevidence$54:kantan.csv.CellDecoder[A9],implicitevidence$55:kantan.csv.CellDecoder[A10]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>R)(implicitevidence$37:kantan.csv.CellDecoder[A1],implicitevidence$38:kantan.csv.CellDecoder[A2],implicitevidence$39:kantan.csv.CellDecoder[A3],implicitevidence$40:kantan.csv.CellDecoder[A4],implicitevidence$41:kantan.csv.CellDecoder[A5],implicitevidence$42:kantan.csv.CellDecoder[A6],implicitevidence$43:kantan.csv.CellDecoder[A7],implicitevidence$44:kantan.csv.CellDecoder[A8],implicitevidence$45:kantan.csv.CellDecoder[A9]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>R)(implicitevidence$29:kantan.csv.CellDecoder[A1],implicitevidence$30:kantan.csv.CellDecoder[A2],implicitevidence$31:kantan.csv.CellDecoder[A3],implicitevidence$32:kantan.csv.CellDecoder[A4],implicitevidence$33:kantan.csv.CellDecoder[A5],implicitevidence$34:kantan.csv.CellDecoder[A6],implicitevidence$35:kantan.csv.CellDecoder[A7],implicitevidence$36:kantan.csv.CellDecoder[A8]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (A1, A2, A3, A4, A5, A6, A7) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>R)(implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellDecoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A3],implicitevidence$25:kantan.csv.CellDecoder[A4],implicitevidence$26:kantan.csv.CellDecoder[A5],implicitevidence$27:kantan.csv.CellDecoder[A6],implicitevidence$28:kantan.csv.CellDecoder[A7]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (A1, A2, A3, A4, A5, A6) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,A6,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:(A1,A2,A3,A4,A5,A6)=>R)(implicitevidence$16:kantan.csv.CellDecoder[A1],implicitevidence$17:kantan.csv.CellDecoder[A2],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellDecoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A5],implicitevidence$21:kantan.csv.CellDecoder[A6]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (A1, A2, A3, A4, A5) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,A5,R](f1:String,f2:String,f3:String,f4:String,f5:String)(f:(A1,A2,A3,A4,A5)=>R)(implicitevidence$11:kantan.csv.CellDecoder[A1],implicitevidence$12:kantan.csv.CellDecoder[A2],implicitevidence$13:kantan.csv.CellDecoder[A3],implicitevidence$14:kantan.csv.CellDecoder[A4],implicitevidence$15:kantan.csv.CellDecoder[A5]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (A1, A2, A3, A4) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,A4,R](f1:String,f2:String,f3:String,f4:String)(f:(A1,A2,A3,A4)=>R)(implicitevidence$7:kantan.csv.CellDecoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A2],implicitevidence$9:kantan.csv.CellDecoder[A3],implicitevidence$10:kantan.csv.CellDecoder[A4]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String)(f: (A1, A2, A3) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,A3,R](f1:String,f2:String,f3:String)(f:(A1,A2,A3)=>R)(implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellDecoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A3]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String)(f: (A1, A2) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,A2,R](f1:String,f2:String)(f:(A1,A2)=>R)(implicitevidence$2:kantan.csv.CellDecoder[A1],implicitevidence$3:kantan.csv.CellDecoder[A2]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String)(f: (A1) => R)(arg0: CellDecoder[A1]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#decoder[A1,R](f1:String)(f:A1=>R)(implicitevidence$1:kantan.csv.CellDecoder[A1]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/GeneratedHeaderDecoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.GeneratedHeaderEncoders", "trait" : "kantan\/csv\/GeneratedHeaderEncoders.html", "kind" : "trait", "members_trait" : [{"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$485:kantan.csv.CellEncoder[A1],implicitevidence$486:kantan.csv.CellEncoder[A2],implicitevidence$487:kantan.csv.CellEncoder[A3],implicitevidence$488:kantan.csv.CellEncoder[A4],implicitevidence$489:kantan.csv.CellEncoder[A5],implicitevidence$490:kantan.csv.CellEncoder[A6],implicitevidence$491:kantan.csv.CellEncoder[A7],implicitevidence$492:kantan.csv.CellEncoder[A8],implicitevidence$493:kantan.csv.CellEncoder[A9],implicitevidence$494:kantan.csv.CellEncoder[A10],implicitevidence$495:kantan.csv.CellEncoder[A11],implicitevidence$496:kantan.csv.CellEncoder[A12],implicitevidence$497:kantan.csv.CellEncoder[A13],implicitevidence$498:kantan.csv.CellEncoder[A14],implicitevidence$499:kantan.csv.CellEncoder[A15],implicitevidence$500:kantan.csv.CellEncoder[A16],implicitevidence$501:kantan.csv.CellEncoder[A17],implicitevidence$502:kantan.csv.CellEncoder[A18],implicitevidence$503:kantan.csv.CellEncoder[A19],implicitevidence$504:kantan.csv.CellEncoder[A20],implicitevidence$505:kantan.csv.CellEncoder[A21],implicitevidence$506:kantan.csv.CellEncoder[A22]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$464:kantan.csv.CellEncoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellEncoder[A3],implicitevidence$467:kantan.csv.CellEncoder[A4],implicitevidence$468:kantan.csv.CellEncoder[A5],implicitevidence$469:kantan.csv.CellEncoder[A6],implicitevidence$470:kantan.csv.CellEncoder[A7],implicitevidence$471:kantan.csv.CellEncoder[A8],implicitevidence$472:kantan.csv.CellEncoder[A9],implicitevidence$473:kantan.csv.CellEncoder[A10],implicitevidence$474:kantan.csv.CellEncoder[A11],implicitevidence$475:kantan.csv.CellEncoder[A12],implicitevidence$476:kantan.csv.CellEncoder[A13],implicitevidence$477:kantan.csv.CellEncoder[A14],implicitevidence$478:kantan.csv.CellEncoder[A15],implicitevidence$479:kantan.csv.CellEncoder[A16],implicitevidence$480:kantan.csv.CellEncoder[A17],implicitevidence$481:kantan.csv.CellEncoder[A18],implicitevidence$482:kantan.csv.CellEncoder[A19],implicitevidence$483:kantan.csv.CellEncoder[A20],implicitevidence$484:kantan.csv.CellEncoder[A21]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$444:kantan.csv.CellEncoder[A1],implicitevidence$445:kantan.csv.CellEncoder[A2],implicitevidence$446:kantan.csv.CellEncoder[A3],implicitevidence$447:kantan.csv.CellEncoder[A4],implicitevidence$448:kantan.csv.CellEncoder[A5],implicitevidence$449:kantan.csv.CellEncoder[A6],implicitevidence$450:kantan.csv.CellEncoder[A7],implicitevidence$451:kantan.csv.CellEncoder[A8],implicitevidence$452:kantan.csv.CellEncoder[A9],implicitevidence$453:kantan.csv.CellEncoder[A10],implicitevidence$454:kantan.csv.CellEncoder[A11],implicitevidence$455:kantan.csv.CellEncoder[A12],implicitevidence$456:kantan.csv.CellEncoder[A13],implicitevidence$457:kantan.csv.CellEncoder[A14],implicitevidence$458:kantan.csv.CellEncoder[A15],implicitevidence$459:kantan.csv.CellEncoder[A16],implicitevidence$460:kantan.csv.CellEncoder[A17],implicitevidence$461:kantan.csv.CellEncoder[A18],implicitevidence$462:kantan.csv.CellEncoder[A19],implicitevidence$463:kantan.csv.CellEncoder[A20]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$425:kantan.csv.CellEncoder[A1],implicitevidence$426:kantan.csv.CellEncoder[A2],implicitevidence$427:kantan.csv.CellEncoder[A3],implicitevidence$428:kantan.csv.CellEncoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellEncoder[A6],implicitevidence$431:kantan.csv.CellEncoder[A7],implicitevidence$432:kantan.csv.CellEncoder[A8],implicitevidence$433:kantan.csv.CellEncoder[A9],implicitevidence$434:kantan.csv.CellEncoder[A10],implicitevidence$435:kantan.csv.CellEncoder[A11],implicitevidence$436:kantan.csv.CellEncoder[A12],implicitevidence$437:kantan.csv.CellEncoder[A13],implicitevidence$438:kantan.csv.CellEncoder[A14],implicitevidence$439:kantan.csv.CellEncoder[A15],implicitevidence$440:kantan.csv.CellEncoder[A16],implicitevidence$441:kantan.csv.CellEncoder[A17],implicitevidence$442:kantan.csv.CellEncoder[A18],implicitevidence$443:kantan.csv.CellEncoder[A19]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$407:kantan.csv.CellEncoder[A1],implicitevidence$408:kantan.csv.CellEncoder[A2],implicitevidence$409:kantan.csv.CellEncoder[A3],implicitevidence$410:kantan.csv.CellEncoder[A4],implicitevidence$411:kantan.csv.CellEncoder[A5],implicitevidence$412:kantan.csv.CellEncoder[A6],implicitevidence$413:kantan.csv.CellEncoder[A7],implicitevidence$414:kantan.csv.CellEncoder[A8],implicitevidence$415:kantan.csv.CellEncoder[A9],implicitevidence$416:kantan.csv.CellEncoder[A10],implicitevidence$417:kantan.csv.CellEncoder[A11],implicitevidence$418:kantan.csv.CellEncoder[A12],implicitevidence$419:kantan.csv.CellEncoder[A13],implicitevidence$420:kantan.csv.CellEncoder[A14],implicitevidence$421:kantan.csv.CellEncoder[A15],implicitevidence$422:kantan.csv.CellEncoder[A16],implicitevidence$423:kantan.csv.CellEncoder[A17],implicitevidence$424:kantan.csv.CellEncoder[A18]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$390:kantan.csv.CellEncoder[A1],implicitevidence$391:kantan.csv.CellEncoder[A2],implicitevidence$392:kantan.csv.CellEncoder[A3],implicitevidence$393:kantan.csv.CellEncoder[A4],implicitevidence$394:kantan.csv.CellEncoder[A5],implicitevidence$395:kantan.csv.CellEncoder[A6],implicitevidence$396:kantan.csv.CellEncoder[A7],implicitevidence$397:kantan.csv.CellEncoder[A8],implicitevidence$398:kantan.csv.CellEncoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellEncoder[A11],implicitevidence$401:kantan.csv.CellEncoder[A12],implicitevidence$402:kantan.csv.CellEncoder[A13],implicitevidence$403:kantan.csv.CellEncoder[A14],implicitevidence$404:kantan.csv.CellEncoder[A15],implicitevidence$405:kantan.csv.CellEncoder[A16],implicitevidence$406:kantan.csv.CellEncoder[A17]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$374:kantan.csv.CellEncoder[A1],implicitevidence$375:kantan.csv.CellEncoder[A2],implicitevidence$376:kantan.csv.CellEncoder[A3],implicitevidence$377:kantan.csv.CellEncoder[A4],implicitevidence$378:kantan.csv.CellEncoder[A5],implicitevidence$379:kantan.csv.CellEncoder[A6],implicitevidence$380:kantan.csv.CellEncoder[A7],implicitevidence$381:kantan.csv.CellEncoder[A8],implicitevidence$382:kantan.csv.CellEncoder[A9],implicitevidence$383:kantan.csv.CellEncoder[A10],implicitevidence$384:kantan.csv.CellEncoder[A11],implicitevidence$385:kantan.csv.CellEncoder[A12],implicitevidence$386:kantan.csv.CellEncoder[A13],implicitevidence$387:kantan.csv.CellEncoder[A14],implicitevidence$388:kantan.csv.CellEncoder[A15],implicitevidence$389:kantan.csv.CellEncoder[A16]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$359:kantan.csv.CellEncoder[A1],implicitevidence$360:kantan.csv.CellEncoder[A2],implicitevidence$361:kantan.csv.CellEncoder[A3],implicitevidence$362:kantan.csv.CellEncoder[A4],implicitevidence$363:kantan.csv.CellEncoder[A5],implicitevidence$364:kantan.csv.CellEncoder[A6],implicitevidence$365:kantan.csv.CellEncoder[A7],implicitevidence$366:kantan.csv.CellEncoder[A8],implicitevidence$367:kantan.csv.CellEncoder[A9],implicitevidence$368:kantan.csv.CellEncoder[A10],implicitevidence$369:kantan.csv.CellEncoder[A11],implicitevidence$370:kantan.csv.CellEncoder[A12],implicitevidence$371:kantan.csv.CellEncoder[A13],implicitevidence$372:kantan.csv.CellEncoder[A14],implicitevidence$373:kantan.csv.CellEncoder[A15]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$345:kantan.csv.CellEncoder[A1],implicitevidence$346:kantan.csv.CellEncoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellEncoder[A4],implicitevidence$349:kantan.csv.CellEncoder[A5],implicitevidence$350:kantan.csv.CellEncoder[A6],implicitevidence$351:kantan.csv.CellEncoder[A7],implicitevidence$352:kantan.csv.CellEncoder[A8],implicitevidence$353:kantan.csv.CellEncoder[A9],implicitevidence$354:kantan.csv.CellEncoder[A10],implicitevidence$355:kantan.csv.CellEncoder[A11],implicitevidence$356:kantan.csv.CellEncoder[A12],implicitevidence$357:kantan.csv.CellEncoder[A13],implicitevidence$358:kantan.csv.CellEncoder[A14]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$332:kantan.csv.CellEncoder[A1],implicitevidence$333:kantan.csv.CellEncoder[A2],implicitevidence$334:kantan.csv.CellEncoder[A3],implicitevidence$335:kantan.csv.CellEncoder[A4],implicitevidence$336:kantan.csv.CellEncoder[A5],implicitevidence$337:kantan.csv.CellEncoder[A6],implicitevidence$338:kantan.csv.CellEncoder[A7],implicitevidence$339:kantan.csv.CellEncoder[A8],implicitevidence$340:kantan.csv.CellEncoder[A9],implicitevidence$341:kantan.csv.CellEncoder[A10],implicitevidence$342:kantan.csv.CellEncoder[A11],implicitevidence$343:kantan.csv.CellEncoder[A12],implicitevidence$344:kantan.csv.CellEncoder[A13]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$320:kantan.csv.CellEncoder[A1],implicitevidence$321:kantan.csv.CellEncoder[A2],implicitevidence$322:kantan.csv.CellEncoder[A3],implicitevidence$323:kantan.csv.CellEncoder[A4],implicitevidence$324:kantan.csv.CellEncoder[A5],implicitevidence$325:kantan.csv.CellEncoder[A6],implicitevidence$326:kantan.csv.CellEncoder[A7],implicitevidence$327:kantan.csv.CellEncoder[A8],implicitevidence$328:kantan.csv.CellEncoder[A9],implicitevidence$329:kantan.csv.CellEncoder[A10],implicitevidence$330:kantan.csv.CellEncoder[A11],implicitevidence$331:kantan.csv.CellEncoder[A12]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$309:kantan.csv.CellEncoder[A1],implicitevidence$310:kantan.csv.CellEncoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellEncoder[A4],implicitevidence$313:kantan.csv.CellEncoder[A5],implicitevidence$314:kantan.csv.CellEncoder[A6],implicitevidence$315:kantan.csv.CellEncoder[A7],implicitevidence$316:kantan.csv.CellEncoder[A8],implicitevidence$317:kantan.csv.CellEncoder[A9],implicitevidence$318:kantan.csv.CellEncoder[A10],implicitevidence$319:kantan.csv.CellEncoder[A11]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$299:kantan.csv.CellEncoder[A1],implicitevidence$300:kantan.csv.CellEncoder[A2],implicitevidence$301:kantan.csv.CellEncoder[A3],implicitevidence$302:kantan.csv.CellEncoder[A4],implicitevidence$303:kantan.csv.CellEncoder[A5],implicitevidence$304:kantan.csv.CellEncoder[A6],implicitevidence$305:kantan.csv.CellEncoder[A7],implicitevidence$306:kantan.csv.CellEncoder[A8],implicitevidence$307:kantan.csv.CellEncoder[A9],implicitevidence$308:kantan.csv.CellEncoder[A10]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$290:kantan.csv.CellEncoder[A1],implicitevidence$291:kantan.csv.CellEncoder[A2],implicitevidence$292:kantan.csv.CellEncoder[A3],implicitevidence$293:kantan.csv.CellEncoder[A4],implicitevidence$294:kantan.csv.CellEncoder[A5],implicitevidence$295:kantan.csv.CellEncoder[A6],implicitevidence$296:kantan.csv.CellEncoder[A7],implicitevidence$297:kantan.csv.CellEncoder[A8],implicitevidence$298:kantan.csv.CellEncoder[A9]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$282:kantan.csv.CellEncoder[A1],implicitevidence$283:kantan.csv.CellEncoder[A2],implicitevidence$284:kantan.csv.CellEncoder[A3],implicitevidence$285:kantan.csv.CellEncoder[A4],implicitevidence$286:kantan.csv.CellEncoder[A5],implicitevidence$287:kantan.csv.CellEncoder[A6],implicitevidence$288:kantan.csv.CellEncoder[A7],implicitevidence$289:kantan.csv.CellEncoder[A8]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$275:kantan.csv.CellEncoder[A1],implicitevidence$276:kantan.csv.CellEncoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellEncoder[A4],implicitevidence$279:kantan.csv.CellEncoder[A5],implicitevidence$280:kantan.csv.CellEncoder[A6],implicitevidence$281:kantan.csv.CellEncoder[A7]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$269:kantan.csv.CellEncoder[A1],implicitevidence$270:kantan.csv.CellEncoder[A2],implicitevidence$271:kantan.csv.CellEncoder[A3],implicitevidence$272:kantan.csv.CellEncoder[A4],implicitevidence$273:kantan.csv.CellEncoder[A5],implicitevidence$274:kantan.csv.CellEncoder[A6]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (O) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,A5,O](f1:String,f2:String,f3:String,f4:String,f5:String)(f:O=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$264:kantan.csv.CellEncoder[A1],implicitevidence$265:kantan.csv.CellEncoder[A2],implicitevidence$266:kantan.csv.CellEncoder[A3],implicitevidence$267:kantan.csv.CellEncoder[A4],implicitevidence$268:kantan.csv.CellEncoder[A5]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (O) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,A4,O](f1:String,f2:String,f3:String,f4:String)(f:O=>Option[(A1,A2,A3,A4)])(implicitevidence$260:kantan.csv.CellEncoder[A1],implicitevidence$261:kantan.csv.CellEncoder[A2],implicitevidence$262:kantan.csv.CellEncoder[A3],implicitevidence$263:kantan.csv.CellEncoder[A4]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String)(f: (O) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,A3,O](f1:String,f2:String,f3:String)(f:O=>Option[(A1,A2,A3)])(implicitevidence$257:kantan.csv.CellEncoder[A1],implicitevidence$258:kantan.csv.CellEncoder[A2],implicitevidence$259:kantan.csv.CellEncoder[A3]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String)(f: (O) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,A2,O](f1:String,f2:String)(f:O=>Option[(A1,A2)])(implicitevidence$255:kantan.csv.CellEncoder[A1],implicitevidence$256:kantan.csv.CellEncoder[A2]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String)(f: (O) => Option[A1])(arg0: CellEncoder[A1]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#caseEncoder[A1,O](f1:String)(f:O=>Option[A1])(implicitevidence$254:kantan.csv.CellEncoder[A1]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$232:kantan.csv.CellEncoder[A1],implicitevidence$233:kantan.csv.CellEncoder[A2],implicitevidence$234:kantan.csv.CellEncoder[A3],implicitevidence$235:kantan.csv.CellEncoder[A4],implicitevidence$236:kantan.csv.CellEncoder[A5],implicitevidence$237:kantan.csv.CellEncoder[A6],implicitevidence$238:kantan.csv.CellEncoder[A7],implicitevidence$239:kantan.csv.CellEncoder[A8],implicitevidence$240:kantan.csv.CellEncoder[A9],implicitevidence$241:kantan.csv.CellEncoder[A10],implicitevidence$242:kantan.csv.CellEncoder[A11],implicitevidence$243:kantan.csv.CellEncoder[A12],implicitevidence$244:kantan.csv.CellEncoder[A13],implicitevidence$245:kantan.csv.CellEncoder[A14],implicitevidence$246:kantan.csv.CellEncoder[A15],implicitevidence$247:kantan.csv.CellEncoder[A16],implicitevidence$248:kantan.csv.CellEncoder[A17],implicitevidence$249:kantan.csv.CellEncoder[A18],implicitevidence$250:kantan.csv.CellEncoder[A19],implicitevidence$251:kantan.csv.CellEncoder[A20],implicitevidence$252:kantan.csv.CellEncoder[A21],implicitevidence$253:kantan.csv.CellEncoder[A22]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$211:kantan.csv.CellEncoder[A1],implicitevidence$212:kantan.csv.CellEncoder[A2],implicitevidence$213:kantan.csv.CellEncoder[A3],implicitevidence$214:kantan.csv.CellEncoder[A4],implicitevidence$215:kantan.csv.CellEncoder[A5],implicitevidence$216:kantan.csv.CellEncoder[A6],implicitevidence$217:kantan.csv.CellEncoder[A7],implicitevidence$218:kantan.csv.CellEncoder[A8],implicitevidence$219:kantan.csv.CellEncoder[A9],implicitevidence$220:kantan.csv.CellEncoder[A10],implicitevidence$221:kantan.csv.CellEncoder[A11],implicitevidence$222:kantan.csv.CellEncoder[A12],implicitevidence$223:kantan.csv.CellEncoder[A13],implicitevidence$224:kantan.csv.CellEncoder[A14],implicitevidence$225:kantan.csv.CellEncoder[A15],implicitevidence$226:kantan.csv.CellEncoder[A16],implicitevidence$227:kantan.csv.CellEncoder[A17],implicitevidence$228:kantan.csv.CellEncoder[A18],implicitevidence$229:kantan.csv.CellEncoder[A19],implicitevidence$230:kantan.csv.CellEncoder[A20],implicitevidence$231:kantan.csv.CellEncoder[A21]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$191:kantan.csv.CellEncoder[A1],implicitevidence$192:kantan.csv.CellEncoder[A2],implicitevidence$193:kantan.csv.CellEncoder[A3],implicitevidence$194:kantan.csv.CellEncoder[A4],implicitevidence$195:kantan.csv.CellEncoder[A5],implicitevidence$196:kantan.csv.CellEncoder[A6],implicitevidence$197:kantan.csv.CellEncoder[A7],implicitevidence$198:kantan.csv.CellEncoder[A8],implicitevidence$199:kantan.csv.CellEncoder[A9],implicitevidence$200:kantan.csv.CellEncoder[A10],implicitevidence$201:kantan.csv.CellEncoder[A11],implicitevidence$202:kantan.csv.CellEncoder[A12],implicitevidence$203:kantan.csv.CellEncoder[A13],implicitevidence$204:kantan.csv.CellEncoder[A14],implicitevidence$205:kantan.csv.CellEncoder[A15],implicitevidence$206:kantan.csv.CellEncoder[A16],implicitevidence$207:kantan.csv.CellEncoder[A17],implicitevidence$208:kantan.csv.CellEncoder[A18],implicitevidence$209:kantan.csv.CellEncoder[A19],implicitevidence$210:kantan.csv.CellEncoder[A20]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$172:kantan.csv.CellEncoder[A1],implicitevidence$173:kantan.csv.CellEncoder[A2],implicitevidence$174:kantan.csv.CellEncoder[A3],implicitevidence$175:kantan.csv.CellEncoder[A4],implicitevidence$176:kantan.csv.CellEncoder[A5],implicitevidence$177:kantan.csv.CellEncoder[A6],implicitevidence$178:kantan.csv.CellEncoder[A7],implicitevidence$179:kantan.csv.CellEncoder[A8],implicitevidence$180:kantan.csv.CellEncoder[A9],implicitevidence$181:kantan.csv.CellEncoder[A10],implicitevidence$182:kantan.csv.CellEncoder[A11],implicitevidence$183:kantan.csv.CellEncoder[A12],implicitevidence$184:kantan.csv.CellEncoder[A13],implicitevidence$185:kantan.csv.CellEncoder[A14],implicitevidence$186:kantan.csv.CellEncoder[A15],implicitevidence$187:kantan.csv.CellEncoder[A16],implicitevidence$188:kantan.csv.CellEncoder[A17],implicitevidence$189:kantan.csv.CellEncoder[A18],implicitevidence$190:kantan.csv.CellEncoder[A19]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$154:kantan.csv.CellEncoder[A1],implicitevidence$155:kantan.csv.CellEncoder[A2],implicitevidence$156:kantan.csv.CellEncoder[A3],implicitevidence$157:kantan.csv.CellEncoder[A4],implicitevidence$158:kantan.csv.CellEncoder[A5],implicitevidence$159:kantan.csv.CellEncoder[A6],implicitevidence$160:kantan.csv.CellEncoder[A7],implicitevidence$161:kantan.csv.CellEncoder[A8],implicitevidence$162:kantan.csv.CellEncoder[A9],implicitevidence$163:kantan.csv.CellEncoder[A10],implicitevidence$164:kantan.csv.CellEncoder[A11],implicitevidence$165:kantan.csv.CellEncoder[A12],implicitevidence$166:kantan.csv.CellEncoder[A13],implicitevidence$167:kantan.csv.CellEncoder[A14],implicitevidence$168:kantan.csv.CellEncoder[A15],implicitevidence$169:kantan.csv.CellEncoder[A16],implicitevidence$170:kantan.csv.CellEncoder[A17],implicitevidence$171:kantan.csv.CellEncoder[A18]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$137:kantan.csv.CellEncoder[A1],implicitevidence$138:kantan.csv.CellEncoder[A2],implicitevidence$139:kantan.csv.CellEncoder[A3],implicitevidence$140:kantan.csv.CellEncoder[A4],implicitevidence$141:kantan.csv.CellEncoder[A5],implicitevidence$142:kantan.csv.CellEncoder[A6],implicitevidence$143:kantan.csv.CellEncoder[A7],implicitevidence$144:kantan.csv.CellEncoder[A8],implicitevidence$145:kantan.csv.CellEncoder[A9],implicitevidence$146:kantan.csv.CellEncoder[A10],implicitevidence$147:kantan.csv.CellEncoder[A11],implicitevidence$148:kantan.csv.CellEncoder[A12],implicitevidence$149:kantan.csv.CellEncoder[A13],implicitevidence$150:kantan.csv.CellEncoder[A14],implicitevidence$151:kantan.csv.CellEncoder[A15],implicitevidence$152:kantan.csv.CellEncoder[A16],implicitevidence$153:kantan.csv.CellEncoder[A17]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$121:kantan.csv.CellEncoder[A1],implicitevidence$122:kantan.csv.CellEncoder[A2],implicitevidence$123:kantan.csv.CellEncoder[A3],implicitevidence$124:kantan.csv.CellEncoder[A4],implicitevidence$125:kantan.csv.CellEncoder[A5],implicitevidence$126:kantan.csv.CellEncoder[A6],implicitevidence$127:kantan.csv.CellEncoder[A7],implicitevidence$128:kantan.csv.CellEncoder[A8],implicitevidence$129:kantan.csv.CellEncoder[A9],implicitevidence$130:kantan.csv.CellEncoder[A10],implicitevidence$131:kantan.csv.CellEncoder[A11],implicitevidence$132:kantan.csv.CellEncoder[A12],implicitevidence$133:kantan.csv.CellEncoder[A13],implicitevidence$134:kantan.csv.CellEncoder[A14],implicitevidence$135:kantan.csv.CellEncoder[A15],implicitevidence$136:kantan.csv.CellEncoder[A16]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$106:kantan.csv.CellEncoder[A1],implicitevidence$107:kantan.csv.CellEncoder[A2],implicitevidence$108:kantan.csv.CellEncoder[A3],implicitevidence$109:kantan.csv.CellEncoder[A4],implicitevidence$110:kantan.csv.CellEncoder[A5],implicitevidence$111:kantan.csv.CellEncoder[A6],implicitevidence$112:kantan.csv.CellEncoder[A7],implicitevidence$113:kantan.csv.CellEncoder[A8],implicitevidence$114:kantan.csv.CellEncoder[A9],implicitevidence$115:kantan.csv.CellEncoder[A10],implicitevidence$116:kantan.csv.CellEncoder[A11],implicitevidence$117:kantan.csv.CellEncoder[A12],implicitevidence$118:kantan.csv.CellEncoder[A13],implicitevidence$119:kantan.csv.CellEncoder[A14],implicitevidence$120:kantan.csv.CellEncoder[A15]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$92:kantan.csv.CellEncoder[A1],implicitevidence$93:kantan.csv.CellEncoder[A2],implicitevidence$94:kantan.csv.CellEncoder[A3],implicitevidence$95:kantan.csv.CellEncoder[A4],implicitevidence$96:kantan.csv.CellEncoder[A5],implicitevidence$97:kantan.csv.CellEncoder[A6],implicitevidence$98:kantan.csv.CellEncoder[A7],implicitevidence$99:kantan.csv.CellEncoder[A8],implicitevidence$100:kantan.csv.CellEncoder[A9],implicitevidence$101:kantan.csv.CellEncoder[A10],implicitevidence$102:kantan.csv.CellEncoder[A11],implicitevidence$103:kantan.csv.CellEncoder[A12],implicitevidence$104:kantan.csv.CellEncoder[A13],implicitevidence$105:kantan.csv.CellEncoder[A14]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$79:kantan.csv.CellEncoder[A1],implicitevidence$80:kantan.csv.CellEncoder[A2],implicitevidence$81:kantan.csv.CellEncoder[A3],implicitevidence$82:kantan.csv.CellEncoder[A4],implicitevidence$83:kantan.csv.CellEncoder[A5],implicitevidence$84:kantan.csv.CellEncoder[A6],implicitevidence$85:kantan.csv.CellEncoder[A7],implicitevidence$86:kantan.csv.CellEncoder[A8],implicitevidence$87:kantan.csv.CellEncoder[A9],implicitevidence$88:kantan.csv.CellEncoder[A10],implicitevidence$89:kantan.csv.CellEncoder[A11],implicitevidence$90:kantan.csv.CellEncoder[A12],implicitevidence$91:kantan.csv.CellEncoder[A13]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$67:kantan.csv.CellEncoder[A1],implicitevidence$68:kantan.csv.CellEncoder[A2],implicitevidence$69:kantan.csv.CellEncoder[A3],implicitevidence$70:kantan.csv.CellEncoder[A4],implicitevidence$71:kantan.csv.CellEncoder[A5],implicitevidence$72:kantan.csv.CellEncoder[A6],implicitevidence$73:kantan.csv.CellEncoder[A7],implicitevidence$74:kantan.csv.CellEncoder[A8],implicitevidence$75:kantan.csv.CellEncoder[A9],implicitevidence$76:kantan.csv.CellEncoder[A10],implicitevidence$77:kantan.csv.CellEncoder[A11],implicitevidence$78:kantan.csv.CellEncoder[A12]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$56:kantan.csv.CellEncoder[A1],implicitevidence$57:kantan.csv.CellEncoder[A2],implicitevidence$58:kantan.csv.CellEncoder[A3],implicitevidence$59:kantan.csv.CellEncoder[A4],implicitevidence$60:kantan.csv.CellEncoder[A5],implicitevidence$61:kantan.csv.CellEncoder[A6],implicitevidence$62:kantan.csv.CellEncoder[A7],implicitevidence$63:kantan.csv.CellEncoder[A8],implicitevidence$64:kantan.csv.CellEncoder[A9],implicitevidence$65:kantan.csv.CellEncoder[A10],implicitevidence$66:kantan.csv.CellEncoder[A11]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$46:kantan.csv.CellEncoder[A1],implicitevidence$47:kantan.csv.CellEncoder[A2],implicitevidence$48:kantan.csv.CellEncoder[A3],implicitevidence$49:kantan.csv.CellEncoder[A4],implicitevidence$50:kantan.csv.CellEncoder[A5],implicitevidence$51:kantan.csv.CellEncoder[A6],implicitevidence$52:kantan.csv.CellEncoder[A7],implicitevidence$53:kantan.csv.CellEncoder[A8],implicitevidence$54:kantan.csv.CellEncoder[A9],implicitevidence$55:kantan.csv.CellEncoder[A10]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$37:kantan.csv.CellEncoder[A1],implicitevidence$38:kantan.csv.CellEncoder[A2],implicitevidence$39:kantan.csv.CellEncoder[A3],implicitevidence$40:kantan.csv.CellEncoder[A4],implicitevidence$41:kantan.csv.CellEncoder[A5],implicitevidence$42:kantan.csv.CellEncoder[A6],implicitevidence$43:kantan.csv.CellEncoder[A7],implicitevidence$44:kantan.csv.CellEncoder[A8],implicitevidence$45:kantan.csv.CellEncoder[A9]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$29:kantan.csv.CellEncoder[A1],implicitevidence$30:kantan.csv.CellEncoder[A2],implicitevidence$31:kantan.csv.CellEncoder[A3],implicitevidence$32:kantan.csv.CellEncoder[A4],implicitevidence$33:kantan.csv.CellEncoder[A5],implicitevidence$34:kantan.csv.CellEncoder[A6],implicitevidence$35:kantan.csv.CellEncoder[A7],implicitevidence$36:kantan.csv.CellEncoder[A8]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$22:kantan.csv.CellEncoder[A1],implicitevidence$23:kantan.csv.CellEncoder[A2],implicitevidence$24:kantan.csv.CellEncoder[A3],implicitevidence$25:kantan.csv.CellEncoder[A4],implicitevidence$26:kantan.csv.CellEncoder[A5],implicitevidence$27:kantan.csv.CellEncoder[A6],implicitevidence$28:kantan.csv.CellEncoder[A7]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (O) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,A6,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:O=>(A1,A2,A3,A4,A5,A6))(implicitevidence$16:kantan.csv.CellEncoder[A1],implicitevidence$17:kantan.csv.CellEncoder[A2],implicitevidence$18:kantan.csv.CellEncoder[A3],implicitevidence$19:kantan.csv.CellEncoder[A4],implicitevidence$20:kantan.csv.CellEncoder[A5],implicitevidence$21:kantan.csv.CellEncoder[A6]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (O) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,A5,O](f1:String,f2:String,f3:String,f4:String,f5:String)(f:O=>(A1,A2,A3,A4,A5))(implicitevidence$11:kantan.csv.CellEncoder[A1],implicitevidence$12:kantan.csv.CellEncoder[A2],implicitevidence$13:kantan.csv.CellEncoder[A3],implicitevidence$14:kantan.csv.CellEncoder[A4],implicitevidence$15:kantan.csv.CellEncoder[A5]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (O) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,A4,O](f1:String,f2:String,f3:String,f4:String)(f:O=>(A1,A2,A3,A4))(implicitevidence$7:kantan.csv.CellEncoder[A1],implicitevidence$8:kantan.csv.CellEncoder[A2],implicitevidence$9:kantan.csv.CellEncoder[A3],implicitevidence$10:kantan.csv.CellEncoder[A4]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String)(f: (O) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,A3,O](f1:String,f2:String,f3:String)(f:O=>(A1,A2,A3))(implicitevidence$4:kantan.csv.CellEncoder[A1],implicitevidence$5:kantan.csv.CellEncoder[A2],implicitevidence$6:kantan.csv.CellEncoder[A3]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String)(f: (O) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,A2,O](f1:String,f2:String)(f:O=>(A1,A2))(implicitevidence$2:kantan.csv.CellEncoder[A1],implicitevidence$3:kantan.csv.CellEncoder[A2]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String)(f: (O) => A1)(arg0: CellEncoder[A1]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#encoder[A1,O](f1:String)(f:O=>A1)(implicitevidence$1:kantan.csv.CellEncoder[A1]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/GeneratedHeaderEncoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.GeneratedRowCodecs", "trait" : "kantan\/csv\/GeneratedRowCodecs.html", "kind" : "trait", "members_trait" : [{"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$1981:kantan.csv.CellEncoder[A1],implicitevidence$1982:kantan.csv.CellDecoder[A1],implicitevidence$1983:kantan.csv.CellEncoder[A2],implicitevidence$1984:kantan.csv.CellDecoder[A2],implicitevidence$1985:kantan.csv.CellEncoder[A3],implicitevidence$1986:kantan.csv.CellDecoder[A3],implicitevidence$1987:kantan.csv.CellEncoder[A4],implicitevidence$1988:kantan.csv.CellDecoder[A4],implicitevidence$1989:kantan.csv.CellEncoder[A5],implicitevidence$1990:kantan.csv.CellDecoder[A5],implicitevidence$1991:kantan.csv.CellEncoder[A6],implicitevidence$1992:kantan.csv.CellDecoder[A6],implicitevidence$1993:kantan.csv.CellEncoder[A7],implicitevidence$1994:kantan.csv.CellDecoder[A7],implicitevidence$1995:kantan.csv.CellEncoder[A8],implicitevidence$1996:kantan.csv.CellDecoder[A8],implicitevidence$1997:kantan.csv.CellEncoder[A9],implicitevidence$1998:kantan.csv.CellDecoder[A9],implicitevidence$1999:kantan.csv.CellEncoder[A10],implicitevidence$2000:kantan.csv.CellDecoder[A10],implicitevidence$2001:kantan.csv.CellEncoder[A11],implicitevidence$2002:kantan.csv.CellDecoder[A11],implicitevidence$2003:kantan.csv.CellEncoder[A12],implicitevidence$2004:kantan.csv.CellDecoder[A12],implicitevidence$2005:kantan.csv.CellEncoder[A13],implicitevidence$2006:kantan.csv.CellDecoder[A13],implicitevidence$2007:kantan.csv.CellEncoder[A14],implicitevidence$2008:kantan.csv.CellDecoder[A14],implicitevidence$2009:kantan.csv.CellEncoder[A15],implicitevidence$2010:kantan.csv.CellDecoder[A15],implicitevidence$2011:kantan.csv.CellEncoder[A16],implicitevidence$2012:kantan.csv.CellDecoder[A16],implicitevidence$2013:kantan.csv.CellEncoder[A17],implicitevidence$2014:kantan.csv.CellDecoder[A17],implicitevidence$2015:kantan.csv.CellEncoder[A18],implicitevidence$2016:kantan.csv.CellDecoder[A18],implicitevidence$2017:kantan.csv.CellEncoder[A19],implicitevidence$2018:kantan.csv.CellDecoder[A19],implicitevidence$2019:kantan.csv.CellEncoder[A20],implicitevidence$2020:kantan.csv.CellDecoder[A20],implicitevidence$2021:kantan.csv.CellEncoder[A21],implicitevidence$2022:kantan.csv.CellDecoder[A21],implicitevidence$2023:kantan.csv.CellEncoder[A22],implicitevidence$2024:kantan.csv.CellDecoder[A22]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$1939:kantan.csv.CellEncoder[A1],implicitevidence$1940:kantan.csv.CellDecoder[A1],implicitevidence$1941:kantan.csv.CellEncoder[A2],implicitevidence$1942:kantan.csv.CellDecoder[A2],implicitevidence$1943:kantan.csv.CellEncoder[A3],implicitevidence$1944:kantan.csv.CellDecoder[A3],implicitevidence$1945:kantan.csv.CellEncoder[A4],implicitevidence$1946:kantan.csv.CellDecoder[A4],implicitevidence$1947:kantan.csv.CellEncoder[A5],implicitevidence$1948:kantan.csv.CellDecoder[A5],implicitevidence$1949:kantan.csv.CellEncoder[A6],implicitevidence$1950:kantan.csv.CellDecoder[A6],implicitevidence$1951:kantan.csv.CellEncoder[A7],implicitevidence$1952:kantan.csv.CellDecoder[A7],implicitevidence$1953:kantan.csv.CellEncoder[A8],implicitevidence$1954:kantan.csv.CellDecoder[A8],implicitevidence$1955:kantan.csv.CellEncoder[A9],implicitevidence$1956:kantan.csv.CellDecoder[A9],implicitevidence$1957:kantan.csv.CellEncoder[A10],implicitevidence$1958:kantan.csv.CellDecoder[A10],implicitevidence$1959:kantan.csv.CellEncoder[A11],implicitevidence$1960:kantan.csv.CellDecoder[A11],implicitevidence$1961:kantan.csv.CellEncoder[A12],implicitevidence$1962:kantan.csv.CellDecoder[A12],implicitevidence$1963:kantan.csv.CellEncoder[A13],implicitevidence$1964:kantan.csv.CellDecoder[A13],implicitevidence$1965:kantan.csv.CellEncoder[A14],implicitevidence$1966:kantan.csv.CellDecoder[A14],implicitevidence$1967:kantan.csv.CellEncoder[A15],implicitevidence$1968:kantan.csv.CellDecoder[A15],implicitevidence$1969:kantan.csv.CellEncoder[A16],implicitevidence$1970:kantan.csv.CellDecoder[A16],implicitevidence$1971:kantan.csv.CellEncoder[A17],implicitevidence$1972:kantan.csv.CellDecoder[A17],implicitevidence$1973:kantan.csv.CellEncoder[A18],implicitevidence$1974:kantan.csv.CellDecoder[A18],implicitevidence$1975:kantan.csv.CellEncoder[A19],implicitevidence$1976:kantan.csv.CellDecoder[A19],implicitevidence$1977:kantan.csv.CellEncoder[A20],implicitevidence$1978:kantan.csv.CellDecoder[A20],implicitevidence$1979:kantan.csv.CellEncoder[A21],implicitevidence$1980:kantan.csv.CellDecoder[A21]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$1899:kantan.csv.CellEncoder[A1],implicitevidence$1900:kantan.csv.CellDecoder[A1],implicitevidence$1901:kantan.csv.CellEncoder[A2],implicitevidence$1902:kantan.csv.CellDecoder[A2],implicitevidence$1903:kantan.csv.CellEncoder[A3],implicitevidence$1904:kantan.csv.CellDecoder[A3],implicitevidence$1905:kantan.csv.CellEncoder[A4],implicitevidence$1906:kantan.csv.CellDecoder[A4],implicitevidence$1907:kantan.csv.CellEncoder[A5],implicitevidence$1908:kantan.csv.CellDecoder[A5],implicitevidence$1909:kantan.csv.CellEncoder[A6],implicitevidence$1910:kantan.csv.CellDecoder[A6],implicitevidence$1911:kantan.csv.CellEncoder[A7],implicitevidence$1912:kantan.csv.CellDecoder[A7],implicitevidence$1913:kantan.csv.CellEncoder[A8],implicitevidence$1914:kantan.csv.CellDecoder[A8],implicitevidence$1915:kantan.csv.CellEncoder[A9],implicitevidence$1916:kantan.csv.CellDecoder[A9],implicitevidence$1917:kantan.csv.CellEncoder[A10],implicitevidence$1918:kantan.csv.CellDecoder[A10],implicitevidence$1919:kantan.csv.CellEncoder[A11],implicitevidence$1920:kantan.csv.CellDecoder[A11],implicitevidence$1921:kantan.csv.CellEncoder[A12],implicitevidence$1922:kantan.csv.CellDecoder[A12],implicitevidence$1923:kantan.csv.CellEncoder[A13],implicitevidence$1924:kantan.csv.CellDecoder[A13],implicitevidence$1925:kantan.csv.CellEncoder[A14],implicitevidence$1926:kantan.csv.CellDecoder[A14],implicitevidence$1927:kantan.csv.CellEncoder[A15],implicitevidence$1928:kantan.csv.CellDecoder[A15],implicitevidence$1929:kantan.csv.CellEncoder[A16],implicitevidence$1930:kantan.csv.CellDecoder[A16],implicitevidence$1931:kantan.csv.CellEncoder[A17],implicitevidence$1932:kantan.csv.CellDecoder[A17],implicitevidence$1933:kantan.csv.CellEncoder[A18],implicitevidence$1934:kantan.csv.CellDecoder[A18],implicitevidence$1935:kantan.csv.CellEncoder[A19],implicitevidence$1936:kantan.csv.CellDecoder[A19],implicitevidence$1937:kantan.csv.CellEncoder[A20],implicitevidence$1938:kantan.csv.CellDecoder[A20]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$1861:kantan.csv.CellEncoder[A1],implicitevidence$1862:kantan.csv.CellDecoder[A1],implicitevidence$1863:kantan.csv.CellEncoder[A2],implicitevidence$1864:kantan.csv.CellDecoder[A2],implicitevidence$1865:kantan.csv.CellEncoder[A3],implicitevidence$1866:kantan.csv.CellDecoder[A3],implicitevidence$1867:kantan.csv.CellEncoder[A4],implicitevidence$1868:kantan.csv.CellDecoder[A4],implicitevidence$1869:kantan.csv.CellEncoder[A5],implicitevidence$1870:kantan.csv.CellDecoder[A5],implicitevidence$1871:kantan.csv.CellEncoder[A6],implicitevidence$1872:kantan.csv.CellDecoder[A6],implicitevidence$1873:kantan.csv.CellEncoder[A7],implicitevidence$1874:kantan.csv.CellDecoder[A7],implicitevidence$1875:kantan.csv.CellEncoder[A8],implicitevidence$1876:kantan.csv.CellDecoder[A8],implicitevidence$1877:kantan.csv.CellEncoder[A9],implicitevidence$1878:kantan.csv.CellDecoder[A9],implicitevidence$1879:kantan.csv.CellEncoder[A10],implicitevidence$1880:kantan.csv.CellDecoder[A10],implicitevidence$1881:kantan.csv.CellEncoder[A11],implicitevidence$1882:kantan.csv.CellDecoder[A11],implicitevidence$1883:kantan.csv.CellEncoder[A12],implicitevidence$1884:kantan.csv.CellDecoder[A12],implicitevidence$1885:kantan.csv.CellEncoder[A13],implicitevidence$1886:kantan.csv.CellDecoder[A13],implicitevidence$1887:kantan.csv.CellEncoder[A14],implicitevidence$1888:kantan.csv.CellDecoder[A14],implicitevidence$1889:kantan.csv.CellEncoder[A15],implicitevidence$1890:kantan.csv.CellDecoder[A15],implicitevidence$1891:kantan.csv.CellEncoder[A16],implicitevidence$1892:kantan.csv.CellDecoder[A16],implicitevidence$1893:kantan.csv.CellEncoder[A17],implicitevidence$1894:kantan.csv.CellDecoder[A17],implicitevidence$1895:kantan.csv.CellEncoder[A18],implicitevidence$1896:kantan.csv.CellDecoder[A18],implicitevidence$1897:kantan.csv.CellEncoder[A19],implicitevidence$1898:kantan.csv.CellDecoder[A19]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$1825:kantan.csv.CellEncoder[A1],implicitevidence$1826:kantan.csv.CellDecoder[A1],implicitevidence$1827:kantan.csv.CellEncoder[A2],implicitevidence$1828:kantan.csv.CellDecoder[A2],implicitevidence$1829:kantan.csv.CellEncoder[A3],implicitevidence$1830:kantan.csv.CellDecoder[A3],implicitevidence$1831:kantan.csv.CellEncoder[A4],implicitevidence$1832:kantan.csv.CellDecoder[A4],implicitevidence$1833:kantan.csv.CellEncoder[A5],implicitevidence$1834:kantan.csv.CellDecoder[A5],implicitevidence$1835:kantan.csv.CellEncoder[A6],implicitevidence$1836:kantan.csv.CellDecoder[A6],implicitevidence$1837:kantan.csv.CellEncoder[A7],implicitevidence$1838:kantan.csv.CellDecoder[A7],implicitevidence$1839:kantan.csv.CellEncoder[A8],implicitevidence$1840:kantan.csv.CellDecoder[A8],implicitevidence$1841:kantan.csv.CellEncoder[A9],implicitevidence$1842:kantan.csv.CellDecoder[A9],implicitevidence$1843:kantan.csv.CellEncoder[A10],implicitevidence$1844:kantan.csv.CellDecoder[A10],implicitevidence$1845:kantan.csv.CellEncoder[A11],implicitevidence$1846:kantan.csv.CellDecoder[A11],implicitevidence$1847:kantan.csv.CellEncoder[A12],implicitevidence$1848:kantan.csv.CellDecoder[A12],implicitevidence$1849:kantan.csv.CellEncoder[A13],implicitevidence$1850:kantan.csv.CellDecoder[A13],implicitevidence$1851:kantan.csv.CellEncoder[A14],implicitevidence$1852:kantan.csv.CellDecoder[A14],implicitevidence$1853:kantan.csv.CellEncoder[A15],implicitevidence$1854:kantan.csv.CellDecoder[A15],implicitevidence$1855:kantan.csv.CellEncoder[A16],implicitevidence$1856:kantan.csv.CellDecoder[A16],implicitevidence$1857:kantan.csv.CellEncoder[A17],implicitevidence$1858:kantan.csv.CellDecoder[A17],implicitevidence$1859:kantan.csv.CellEncoder[A18],implicitevidence$1860:kantan.csv.CellDecoder[A18]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$1791:kantan.csv.CellEncoder[A1],implicitevidence$1792:kantan.csv.CellDecoder[A1],implicitevidence$1793:kantan.csv.CellEncoder[A2],implicitevidence$1794:kantan.csv.CellDecoder[A2],implicitevidence$1795:kantan.csv.CellEncoder[A3],implicitevidence$1796:kantan.csv.CellDecoder[A3],implicitevidence$1797:kantan.csv.CellEncoder[A4],implicitevidence$1798:kantan.csv.CellDecoder[A4],implicitevidence$1799:kantan.csv.CellEncoder[A5],implicitevidence$1800:kantan.csv.CellDecoder[A5],implicitevidence$1801:kantan.csv.CellEncoder[A6],implicitevidence$1802:kantan.csv.CellDecoder[A6],implicitevidence$1803:kantan.csv.CellEncoder[A7],implicitevidence$1804:kantan.csv.CellDecoder[A7],implicitevidence$1805:kantan.csv.CellEncoder[A8],implicitevidence$1806:kantan.csv.CellDecoder[A8],implicitevidence$1807:kantan.csv.CellEncoder[A9],implicitevidence$1808:kantan.csv.CellDecoder[A9],implicitevidence$1809:kantan.csv.CellEncoder[A10],implicitevidence$1810:kantan.csv.CellDecoder[A10],implicitevidence$1811:kantan.csv.CellEncoder[A11],implicitevidence$1812:kantan.csv.CellDecoder[A11],implicitevidence$1813:kantan.csv.CellEncoder[A12],implicitevidence$1814:kantan.csv.CellDecoder[A12],implicitevidence$1815:kantan.csv.CellEncoder[A13],implicitevidence$1816:kantan.csv.CellDecoder[A13],implicitevidence$1817:kantan.csv.CellEncoder[A14],implicitevidence$1818:kantan.csv.CellDecoder[A14],implicitevidence$1819:kantan.csv.CellEncoder[A15],implicitevidence$1820:kantan.csv.CellDecoder[A15],implicitevidence$1821:kantan.csv.CellEncoder[A16],implicitevidence$1822:kantan.csv.CellDecoder[A16],implicitevidence$1823:kantan.csv.CellEncoder[A17],implicitevidence$1824:kantan.csv.CellDecoder[A17]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$1759:kantan.csv.CellEncoder[A1],implicitevidence$1760:kantan.csv.CellDecoder[A1],implicitevidence$1761:kantan.csv.CellEncoder[A2],implicitevidence$1762:kantan.csv.CellDecoder[A2],implicitevidence$1763:kantan.csv.CellEncoder[A3],implicitevidence$1764:kantan.csv.CellDecoder[A3],implicitevidence$1765:kantan.csv.CellEncoder[A4],implicitevidence$1766:kantan.csv.CellDecoder[A4],implicitevidence$1767:kantan.csv.CellEncoder[A5],implicitevidence$1768:kantan.csv.CellDecoder[A5],implicitevidence$1769:kantan.csv.CellEncoder[A6],implicitevidence$1770:kantan.csv.CellDecoder[A6],implicitevidence$1771:kantan.csv.CellEncoder[A7],implicitevidence$1772:kantan.csv.CellDecoder[A7],implicitevidence$1773:kantan.csv.CellEncoder[A8],implicitevidence$1774:kantan.csv.CellDecoder[A8],implicitevidence$1775:kantan.csv.CellEncoder[A9],implicitevidence$1776:kantan.csv.CellDecoder[A9],implicitevidence$1777:kantan.csv.CellEncoder[A10],implicitevidence$1778:kantan.csv.CellDecoder[A10],implicitevidence$1779:kantan.csv.CellEncoder[A11],implicitevidence$1780:kantan.csv.CellDecoder[A11],implicitevidence$1781:kantan.csv.CellEncoder[A12],implicitevidence$1782:kantan.csv.CellDecoder[A12],implicitevidence$1783:kantan.csv.CellEncoder[A13],implicitevidence$1784:kantan.csv.CellDecoder[A13],implicitevidence$1785:kantan.csv.CellEncoder[A14],implicitevidence$1786:kantan.csv.CellDecoder[A14],implicitevidence$1787:kantan.csv.CellEncoder[A15],implicitevidence$1788:kantan.csv.CellDecoder[A15],implicitevidence$1789:kantan.csv.CellEncoder[A16],implicitevidence$1790:kantan.csv.CellDecoder[A16]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$1729:kantan.csv.CellEncoder[A1],implicitevidence$1730:kantan.csv.CellDecoder[A1],implicitevidence$1731:kantan.csv.CellEncoder[A2],implicitevidence$1732:kantan.csv.CellDecoder[A2],implicitevidence$1733:kantan.csv.CellEncoder[A3],implicitevidence$1734:kantan.csv.CellDecoder[A3],implicitevidence$1735:kantan.csv.CellEncoder[A4],implicitevidence$1736:kantan.csv.CellDecoder[A4],implicitevidence$1737:kantan.csv.CellEncoder[A5],implicitevidence$1738:kantan.csv.CellDecoder[A5],implicitevidence$1739:kantan.csv.CellEncoder[A6],implicitevidence$1740:kantan.csv.CellDecoder[A6],implicitevidence$1741:kantan.csv.CellEncoder[A7],implicitevidence$1742:kantan.csv.CellDecoder[A7],implicitevidence$1743:kantan.csv.CellEncoder[A8],implicitevidence$1744:kantan.csv.CellDecoder[A8],implicitevidence$1745:kantan.csv.CellEncoder[A9],implicitevidence$1746:kantan.csv.CellDecoder[A9],implicitevidence$1747:kantan.csv.CellEncoder[A10],implicitevidence$1748:kantan.csv.CellDecoder[A10],implicitevidence$1749:kantan.csv.CellEncoder[A11],implicitevidence$1750:kantan.csv.CellDecoder[A11],implicitevidence$1751:kantan.csv.CellEncoder[A12],implicitevidence$1752:kantan.csv.CellDecoder[A12],implicitevidence$1753:kantan.csv.CellEncoder[A13],implicitevidence$1754:kantan.csv.CellDecoder[A13],implicitevidence$1755:kantan.csv.CellEncoder[A14],implicitevidence$1756:kantan.csv.CellDecoder[A14],implicitevidence$1757:kantan.csv.CellEncoder[A15],implicitevidence$1758:kantan.csv.CellDecoder[A15]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$1701:kantan.csv.CellEncoder[A1],implicitevidence$1702:kantan.csv.CellDecoder[A1],implicitevidence$1703:kantan.csv.CellEncoder[A2],implicitevidence$1704:kantan.csv.CellDecoder[A2],implicitevidence$1705:kantan.csv.CellEncoder[A3],implicitevidence$1706:kantan.csv.CellDecoder[A3],implicitevidence$1707:kantan.csv.CellEncoder[A4],implicitevidence$1708:kantan.csv.CellDecoder[A4],implicitevidence$1709:kantan.csv.CellEncoder[A5],implicitevidence$1710:kantan.csv.CellDecoder[A5],implicitevidence$1711:kantan.csv.CellEncoder[A6],implicitevidence$1712:kantan.csv.CellDecoder[A6],implicitevidence$1713:kantan.csv.CellEncoder[A7],implicitevidence$1714:kantan.csv.CellDecoder[A7],implicitevidence$1715:kantan.csv.CellEncoder[A8],implicitevidence$1716:kantan.csv.CellDecoder[A8],implicitevidence$1717:kantan.csv.CellEncoder[A9],implicitevidence$1718:kantan.csv.CellDecoder[A9],implicitevidence$1719:kantan.csv.CellEncoder[A10],implicitevidence$1720:kantan.csv.CellDecoder[A10],implicitevidence$1721:kantan.csv.CellEncoder[A11],implicitevidence$1722:kantan.csv.CellDecoder[A11],implicitevidence$1723:kantan.csv.CellEncoder[A12],implicitevidence$1724:kantan.csv.CellDecoder[A12],implicitevidence$1725:kantan.csv.CellEncoder[A13],implicitevidence$1726:kantan.csv.CellDecoder[A13],implicitevidence$1727:kantan.csv.CellEncoder[A14],implicitevidence$1728:kantan.csv.CellDecoder[A14]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$1675:kantan.csv.CellEncoder[A1],implicitevidence$1676:kantan.csv.CellDecoder[A1],implicitevidence$1677:kantan.csv.CellEncoder[A2],implicitevidence$1678:kantan.csv.CellDecoder[A2],implicitevidence$1679:kantan.csv.CellEncoder[A3],implicitevidence$1680:kantan.csv.CellDecoder[A3],implicitevidence$1681:kantan.csv.CellEncoder[A4],implicitevidence$1682:kantan.csv.CellDecoder[A4],implicitevidence$1683:kantan.csv.CellEncoder[A5],implicitevidence$1684:kantan.csv.CellDecoder[A5],implicitevidence$1685:kantan.csv.CellEncoder[A6],implicitevidence$1686:kantan.csv.CellDecoder[A6],implicitevidence$1687:kantan.csv.CellEncoder[A7],implicitevidence$1688:kantan.csv.CellDecoder[A7],implicitevidence$1689:kantan.csv.CellEncoder[A8],implicitevidence$1690:kantan.csv.CellDecoder[A8],implicitevidence$1691:kantan.csv.CellEncoder[A9],implicitevidence$1692:kantan.csv.CellDecoder[A9],implicitevidence$1693:kantan.csv.CellEncoder[A10],implicitevidence$1694:kantan.csv.CellDecoder[A10],implicitevidence$1695:kantan.csv.CellEncoder[A11],implicitevidence$1696:kantan.csv.CellDecoder[A11],implicitevidence$1697:kantan.csv.CellEncoder[A12],implicitevidence$1698:kantan.csv.CellDecoder[A12],implicitevidence$1699:kantan.csv.CellEncoder[A13],implicitevidence$1700:kantan.csv.CellDecoder[A13]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$1651:kantan.csv.CellEncoder[A1],implicitevidence$1652:kantan.csv.CellDecoder[A1],implicitevidence$1653:kantan.csv.CellEncoder[A2],implicitevidence$1654:kantan.csv.CellDecoder[A2],implicitevidence$1655:kantan.csv.CellEncoder[A3],implicitevidence$1656:kantan.csv.CellDecoder[A3],implicitevidence$1657:kantan.csv.CellEncoder[A4],implicitevidence$1658:kantan.csv.CellDecoder[A4],implicitevidence$1659:kantan.csv.CellEncoder[A5],implicitevidence$1660:kantan.csv.CellDecoder[A5],implicitevidence$1661:kantan.csv.CellEncoder[A6],implicitevidence$1662:kantan.csv.CellDecoder[A6],implicitevidence$1663:kantan.csv.CellEncoder[A7],implicitevidence$1664:kantan.csv.CellDecoder[A7],implicitevidence$1665:kantan.csv.CellEncoder[A8],implicitevidence$1666:kantan.csv.CellDecoder[A8],implicitevidence$1667:kantan.csv.CellEncoder[A9],implicitevidence$1668:kantan.csv.CellDecoder[A9],implicitevidence$1669:kantan.csv.CellEncoder[A10],implicitevidence$1670:kantan.csv.CellDecoder[A10],implicitevidence$1671:kantan.csv.CellEncoder[A11],implicitevidence$1672:kantan.csv.CellDecoder[A11],implicitevidence$1673:kantan.csv.CellEncoder[A12],implicitevidence$1674:kantan.csv.CellDecoder[A12]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$1629:kantan.csv.CellEncoder[A1],implicitevidence$1630:kantan.csv.CellDecoder[A1],implicitevidence$1631:kantan.csv.CellEncoder[A2],implicitevidence$1632:kantan.csv.CellDecoder[A2],implicitevidence$1633:kantan.csv.CellEncoder[A3],implicitevidence$1634:kantan.csv.CellDecoder[A3],implicitevidence$1635:kantan.csv.CellEncoder[A4],implicitevidence$1636:kantan.csv.CellDecoder[A4],implicitevidence$1637:kantan.csv.CellEncoder[A5],implicitevidence$1638:kantan.csv.CellDecoder[A5],implicitevidence$1639:kantan.csv.CellEncoder[A6],implicitevidence$1640:kantan.csv.CellDecoder[A6],implicitevidence$1641:kantan.csv.CellEncoder[A7],implicitevidence$1642:kantan.csv.CellDecoder[A7],implicitevidence$1643:kantan.csv.CellEncoder[A8],implicitevidence$1644:kantan.csv.CellDecoder[A8],implicitevidence$1645:kantan.csv.CellEncoder[A9],implicitevidence$1646:kantan.csv.CellDecoder[A9],implicitevidence$1647:kantan.csv.CellEncoder[A10],implicitevidence$1648:kantan.csv.CellDecoder[A10],implicitevidence$1649:kantan.csv.CellEncoder[A11],implicitevidence$1650:kantan.csv.CellDecoder[A11]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$1609:kantan.csv.CellEncoder[A1],implicitevidence$1610:kantan.csv.CellDecoder[A1],implicitevidence$1611:kantan.csv.CellEncoder[A2],implicitevidence$1612:kantan.csv.CellDecoder[A2],implicitevidence$1613:kantan.csv.CellEncoder[A3],implicitevidence$1614:kantan.csv.CellDecoder[A3],implicitevidence$1615:kantan.csv.CellEncoder[A4],implicitevidence$1616:kantan.csv.CellDecoder[A4],implicitevidence$1617:kantan.csv.CellEncoder[A5],implicitevidence$1618:kantan.csv.CellDecoder[A5],implicitevidence$1619:kantan.csv.CellEncoder[A6],implicitevidence$1620:kantan.csv.CellDecoder[A6],implicitevidence$1621:kantan.csv.CellEncoder[A7],implicitevidence$1622:kantan.csv.CellDecoder[A7],implicitevidence$1623:kantan.csv.CellEncoder[A8],implicitevidence$1624:kantan.csv.CellDecoder[A8],implicitevidence$1625:kantan.csv.CellEncoder[A9],implicitevidence$1626:kantan.csv.CellDecoder[A9],implicitevidence$1627:kantan.csv.CellEncoder[A10],implicitevidence$1628:kantan.csv.CellDecoder[A10]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$1591:kantan.csv.CellEncoder[A1],implicitevidence$1592:kantan.csv.CellDecoder[A1],implicitevidence$1593:kantan.csv.CellEncoder[A2],implicitevidence$1594:kantan.csv.CellDecoder[A2],implicitevidence$1595:kantan.csv.CellEncoder[A3],implicitevidence$1596:kantan.csv.CellDecoder[A3],implicitevidence$1597:kantan.csv.CellEncoder[A4],implicitevidence$1598:kantan.csv.CellDecoder[A4],implicitevidence$1599:kantan.csv.CellEncoder[A5],implicitevidence$1600:kantan.csv.CellDecoder[A5],implicitevidence$1601:kantan.csv.CellEncoder[A6],implicitevidence$1602:kantan.csv.CellDecoder[A6],implicitevidence$1603:kantan.csv.CellEncoder[A7],implicitevidence$1604:kantan.csv.CellDecoder[A7],implicitevidence$1605:kantan.csv.CellEncoder[A8],implicitevidence$1606:kantan.csv.CellDecoder[A8],implicitevidence$1607:kantan.csv.CellEncoder[A9],implicitevidence$1608:kantan.csv.CellDecoder[A9]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8](f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$1575:kantan.csv.CellEncoder[A1],implicitevidence$1576:kantan.csv.CellDecoder[A1],implicitevidence$1577:kantan.csv.CellEncoder[A2],implicitevidence$1578:kantan.csv.CellDecoder[A2],implicitevidence$1579:kantan.csv.CellEncoder[A3],implicitevidence$1580:kantan.csv.CellDecoder[A3],implicitevidence$1581:kantan.csv.CellEncoder[A4],implicitevidence$1582:kantan.csv.CellDecoder[A4],implicitevidence$1583:kantan.csv.CellEncoder[A5],implicitevidence$1584:kantan.csv.CellDecoder[A5],implicitevidence$1585:kantan.csv.CellEncoder[A6],implicitevidence$1586:kantan.csv.CellDecoder[A6],implicitevidence$1587:kantan.csv.CellEncoder[A7],implicitevidence$1588:kantan.csv.CellDecoder[A7],implicitevidence$1589:kantan.csv.CellEncoder[A8],implicitevidence$1590:kantan.csv.CellDecoder[A8]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7](f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$1561:kantan.csv.CellEncoder[A1],implicitevidence$1562:kantan.csv.CellDecoder[A1],implicitevidence$1563:kantan.csv.CellEncoder[A2],implicitevidence$1564:kantan.csv.CellDecoder[A2],implicitevidence$1565:kantan.csv.CellEncoder[A3],implicitevidence$1566:kantan.csv.CellDecoder[A3],implicitevidence$1567:kantan.csv.CellEncoder[A4],implicitevidence$1568:kantan.csv.CellDecoder[A4],implicitevidence$1569:kantan.csv.CellEncoder[A5],implicitevidence$1570:kantan.csv.CellDecoder[A5],implicitevidence$1571:kantan.csv.CellEncoder[A6],implicitevidence$1572:kantan.csv.CellDecoder[A6],implicitevidence$1573:kantan.csv.CellEncoder[A7],implicitevidence$1574:kantan.csv.CellDecoder[A7]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5,A6](f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$1549:kantan.csv.CellEncoder[A1],implicitevidence$1550:kantan.csv.CellDecoder[A1],implicitevidence$1551:kantan.csv.CellEncoder[A2],implicitevidence$1552:kantan.csv.CellDecoder[A2],implicitevidence$1553:kantan.csv.CellEncoder[A3],implicitevidence$1554:kantan.csv.CellDecoder[A3],implicitevidence$1555:kantan.csv.CellEncoder[A4],implicitevidence$1556:kantan.csv.CellDecoder[A4],implicitevidence$1557:kantan.csv.CellEncoder[A5],implicitevidence$1558:kantan.csv.CellDecoder[A5],implicitevidence$1559:kantan.csv.CellEncoder[A6],implicitevidence$1560:kantan.csv.CellDecoder[A6]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5) => C)(g: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4,A5](f:(A1,A2,A3,A4,A5)=>C)(g:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$1539:kantan.csv.CellEncoder[A1],implicitevidence$1540:kantan.csv.CellDecoder[A1],implicitevidence$1541:kantan.csv.CellEncoder[A2],implicitevidence$1542:kantan.csv.CellDecoder[A2],implicitevidence$1543:kantan.csv.CellEncoder[A3],implicitevidence$1544:kantan.csv.CellDecoder[A3],implicitevidence$1545:kantan.csv.CellEncoder[A4],implicitevidence$1546:kantan.csv.CellDecoder[A4],implicitevidence$1547:kantan.csv.CellEncoder[A5],implicitevidence$1548:kantan.csv.CellDecoder[A5]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4) => C)(g: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3,A4](f:(A1,A2,A3,A4)=>C)(g:C=>Option[(A1,A2,A3,A4)])(implicitevidence$1531:kantan.csv.CellEncoder[A1],implicitevidence$1532:kantan.csv.CellDecoder[A1],implicitevidence$1533:kantan.csv.CellEncoder[A2],implicitevidence$1534:kantan.csv.CellDecoder[A2],implicitevidence$1535:kantan.csv.CellEncoder[A3],implicitevidence$1536:kantan.csv.CellDecoder[A3],implicitevidence$1537:kantan.csv.CellEncoder[A4],implicitevidence$1538:kantan.csv.CellDecoder[A4]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3) => C)(g: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2,A3](f:(A1,A2,A3)=>C)(g:C=>Option[(A1,A2,A3)])(implicitevidence$1525:kantan.csv.CellEncoder[A1],implicitevidence$1526:kantan.csv.CellDecoder[A1],implicitevidence$1527:kantan.csv.CellEncoder[A2],implicitevidence$1528:kantan.csv.CellDecoder[A2],implicitevidence$1529:kantan.csv.CellEncoder[A3],implicitevidence$1530:kantan.csv.CellDecoder[A3]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2) => C)(g: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1,A2](f:(A1,A2)=>C)(g:C=>Option[(A1,A2)])(implicitevidence$1521:kantan.csv.CellEncoder[A1],implicitevidence$1522:kantan.csv.CellDecoder[A1],implicitevidence$1523:kantan.csv.CellEncoder[A2],implicitevidence$1524:kantan.csv.CellDecoder[A2]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1) => C)(g: (C) => Option[A1])(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseOrdered[C,A1](f:A1=>C)(g:C=>Option[A1])(implicitevidence$1519:kantan.csv.CellEncoder[A1],implicitevidence$1520:kantan.csv.CellDecoder[A1]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$1475:kantan.csv.CellEncoder[A1],implicitevidence$1476:kantan.csv.CellDecoder[A1],implicitevidence$1477:kantan.csv.CellEncoder[A2],implicitevidence$1478:kantan.csv.CellDecoder[A2],implicitevidence$1479:kantan.csv.CellEncoder[A3],implicitevidence$1480:kantan.csv.CellDecoder[A3],implicitevidence$1481:kantan.csv.CellEncoder[A4],implicitevidence$1482:kantan.csv.CellDecoder[A4],implicitevidence$1483:kantan.csv.CellEncoder[A5],implicitevidence$1484:kantan.csv.CellDecoder[A5],implicitevidence$1485:kantan.csv.CellEncoder[A6],implicitevidence$1486:kantan.csv.CellDecoder[A6],implicitevidence$1487:kantan.csv.CellEncoder[A7],implicitevidence$1488:kantan.csv.CellDecoder[A7],implicitevidence$1489:kantan.csv.CellEncoder[A8],implicitevidence$1490:kantan.csv.CellDecoder[A8],implicitevidence$1491:kantan.csv.CellEncoder[A9],implicitevidence$1492:kantan.csv.CellDecoder[A9],implicitevidence$1493:kantan.csv.CellEncoder[A10],implicitevidence$1494:kantan.csv.CellDecoder[A10],implicitevidence$1495:kantan.csv.CellEncoder[A11],implicitevidence$1496:kantan.csv.CellDecoder[A11],implicitevidence$1497:kantan.csv.CellEncoder[A12],implicitevidence$1498:kantan.csv.CellDecoder[A12],implicitevidence$1499:kantan.csv.CellEncoder[A13],implicitevidence$1500:kantan.csv.CellDecoder[A13],implicitevidence$1501:kantan.csv.CellEncoder[A14],implicitevidence$1502:kantan.csv.CellDecoder[A14],implicitevidence$1503:kantan.csv.CellEncoder[A15],implicitevidence$1504:kantan.csv.CellDecoder[A15],implicitevidence$1505:kantan.csv.CellEncoder[A16],implicitevidence$1506:kantan.csv.CellDecoder[A16],implicitevidence$1507:kantan.csv.CellEncoder[A17],implicitevidence$1508:kantan.csv.CellDecoder[A17],implicitevidence$1509:kantan.csv.CellEncoder[A18],implicitevidence$1510:kantan.csv.CellDecoder[A18],implicitevidence$1511:kantan.csv.CellEncoder[A19],implicitevidence$1512:kantan.csv.CellDecoder[A19],implicitevidence$1513:kantan.csv.CellEncoder[A20],implicitevidence$1514:kantan.csv.CellDecoder[A20],implicitevidence$1515:kantan.csv.CellEncoder[A21],implicitevidence$1516:kantan.csv.CellDecoder[A21],implicitevidence$1517:kantan.csv.CellEncoder[A22],implicitevidence$1518:kantan.csv.CellDecoder[A22]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$1433:kantan.csv.CellEncoder[A1],implicitevidence$1434:kantan.csv.CellDecoder[A1],implicitevidence$1435:kantan.csv.CellEncoder[A2],implicitevidence$1436:kantan.csv.CellDecoder[A2],implicitevidence$1437:kantan.csv.CellEncoder[A3],implicitevidence$1438:kantan.csv.CellDecoder[A3],implicitevidence$1439:kantan.csv.CellEncoder[A4],implicitevidence$1440:kantan.csv.CellDecoder[A4],implicitevidence$1441:kantan.csv.CellEncoder[A5],implicitevidence$1442:kantan.csv.CellDecoder[A5],implicitevidence$1443:kantan.csv.CellEncoder[A6],implicitevidence$1444:kantan.csv.CellDecoder[A6],implicitevidence$1445:kantan.csv.CellEncoder[A7],implicitevidence$1446:kantan.csv.CellDecoder[A7],implicitevidence$1447:kantan.csv.CellEncoder[A8],implicitevidence$1448:kantan.csv.CellDecoder[A8],implicitevidence$1449:kantan.csv.CellEncoder[A9],implicitevidence$1450:kantan.csv.CellDecoder[A9],implicitevidence$1451:kantan.csv.CellEncoder[A10],implicitevidence$1452:kantan.csv.CellDecoder[A10],implicitevidence$1453:kantan.csv.CellEncoder[A11],implicitevidence$1454:kantan.csv.CellDecoder[A11],implicitevidence$1455:kantan.csv.CellEncoder[A12],implicitevidence$1456:kantan.csv.CellDecoder[A12],implicitevidence$1457:kantan.csv.CellEncoder[A13],implicitevidence$1458:kantan.csv.CellDecoder[A13],implicitevidence$1459:kantan.csv.CellEncoder[A14],implicitevidence$1460:kantan.csv.CellDecoder[A14],implicitevidence$1461:kantan.csv.CellEncoder[A15],implicitevidence$1462:kantan.csv.CellDecoder[A15],implicitevidence$1463:kantan.csv.CellEncoder[A16],implicitevidence$1464:kantan.csv.CellDecoder[A16],implicitevidence$1465:kantan.csv.CellEncoder[A17],implicitevidence$1466:kantan.csv.CellDecoder[A17],implicitevidence$1467:kantan.csv.CellEncoder[A18],implicitevidence$1468:kantan.csv.CellDecoder[A18],implicitevidence$1469:kantan.csv.CellEncoder[A19],implicitevidence$1470:kantan.csv.CellDecoder[A19],implicitevidence$1471:kantan.csv.CellEncoder[A20],implicitevidence$1472:kantan.csv.CellDecoder[A20],implicitevidence$1473:kantan.csv.CellEncoder[A21],implicitevidence$1474:kantan.csv.CellDecoder[A21]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$1393:kantan.csv.CellEncoder[A1],implicitevidence$1394:kantan.csv.CellDecoder[A1],implicitevidence$1395:kantan.csv.CellEncoder[A2],implicitevidence$1396:kantan.csv.CellDecoder[A2],implicitevidence$1397:kantan.csv.CellEncoder[A3],implicitevidence$1398:kantan.csv.CellDecoder[A3],implicitevidence$1399:kantan.csv.CellEncoder[A4],implicitevidence$1400:kantan.csv.CellDecoder[A4],implicitevidence$1401:kantan.csv.CellEncoder[A5],implicitevidence$1402:kantan.csv.CellDecoder[A5],implicitevidence$1403:kantan.csv.CellEncoder[A6],implicitevidence$1404:kantan.csv.CellDecoder[A6],implicitevidence$1405:kantan.csv.CellEncoder[A7],implicitevidence$1406:kantan.csv.CellDecoder[A7],implicitevidence$1407:kantan.csv.CellEncoder[A8],implicitevidence$1408:kantan.csv.CellDecoder[A8],implicitevidence$1409:kantan.csv.CellEncoder[A9],implicitevidence$1410:kantan.csv.CellDecoder[A9],implicitevidence$1411:kantan.csv.CellEncoder[A10],implicitevidence$1412:kantan.csv.CellDecoder[A10],implicitevidence$1413:kantan.csv.CellEncoder[A11],implicitevidence$1414:kantan.csv.CellDecoder[A11],implicitevidence$1415:kantan.csv.CellEncoder[A12],implicitevidence$1416:kantan.csv.CellDecoder[A12],implicitevidence$1417:kantan.csv.CellEncoder[A13],implicitevidence$1418:kantan.csv.CellDecoder[A13],implicitevidence$1419:kantan.csv.CellEncoder[A14],implicitevidence$1420:kantan.csv.CellDecoder[A14],implicitevidence$1421:kantan.csv.CellEncoder[A15],implicitevidence$1422:kantan.csv.CellDecoder[A15],implicitevidence$1423:kantan.csv.CellEncoder[A16],implicitevidence$1424:kantan.csv.CellDecoder[A16],implicitevidence$1425:kantan.csv.CellEncoder[A17],implicitevidence$1426:kantan.csv.CellDecoder[A17],implicitevidence$1427:kantan.csv.CellEncoder[A18],implicitevidence$1428:kantan.csv.CellDecoder[A18],implicitevidence$1429:kantan.csv.CellEncoder[A19],implicitevidence$1430:kantan.csv.CellDecoder[A19],implicitevidence$1431:kantan.csv.CellEncoder[A20],implicitevidence$1432:kantan.csv.CellDecoder[A20]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$1355:kantan.csv.CellEncoder[A1],implicitevidence$1356:kantan.csv.CellDecoder[A1],implicitevidence$1357:kantan.csv.CellEncoder[A2],implicitevidence$1358:kantan.csv.CellDecoder[A2],implicitevidence$1359:kantan.csv.CellEncoder[A3],implicitevidence$1360:kantan.csv.CellDecoder[A3],implicitevidence$1361:kantan.csv.CellEncoder[A4],implicitevidence$1362:kantan.csv.CellDecoder[A4],implicitevidence$1363:kantan.csv.CellEncoder[A5],implicitevidence$1364:kantan.csv.CellDecoder[A5],implicitevidence$1365:kantan.csv.CellEncoder[A6],implicitevidence$1366:kantan.csv.CellDecoder[A6],implicitevidence$1367:kantan.csv.CellEncoder[A7],implicitevidence$1368:kantan.csv.CellDecoder[A7],implicitevidence$1369:kantan.csv.CellEncoder[A8],implicitevidence$1370:kantan.csv.CellDecoder[A8],implicitevidence$1371:kantan.csv.CellEncoder[A9],implicitevidence$1372:kantan.csv.CellDecoder[A9],implicitevidence$1373:kantan.csv.CellEncoder[A10],implicitevidence$1374:kantan.csv.CellDecoder[A10],implicitevidence$1375:kantan.csv.CellEncoder[A11],implicitevidence$1376:kantan.csv.CellDecoder[A11],implicitevidence$1377:kantan.csv.CellEncoder[A12],implicitevidence$1378:kantan.csv.CellDecoder[A12],implicitevidence$1379:kantan.csv.CellEncoder[A13],implicitevidence$1380:kantan.csv.CellDecoder[A13],implicitevidence$1381:kantan.csv.CellEncoder[A14],implicitevidence$1382:kantan.csv.CellDecoder[A14],implicitevidence$1383:kantan.csv.CellEncoder[A15],implicitevidence$1384:kantan.csv.CellDecoder[A15],implicitevidence$1385:kantan.csv.CellEncoder[A16],implicitevidence$1386:kantan.csv.CellDecoder[A16],implicitevidence$1387:kantan.csv.CellEncoder[A17],implicitevidence$1388:kantan.csv.CellDecoder[A17],implicitevidence$1389:kantan.csv.CellEncoder[A18],implicitevidence$1390:kantan.csv.CellDecoder[A18],implicitevidence$1391:kantan.csv.CellEncoder[A19],implicitevidence$1392:kantan.csv.CellDecoder[A19]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$1319:kantan.csv.CellEncoder[A1],implicitevidence$1320:kantan.csv.CellDecoder[A1],implicitevidence$1321:kantan.csv.CellEncoder[A2],implicitevidence$1322:kantan.csv.CellDecoder[A2],implicitevidence$1323:kantan.csv.CellEncoder[A3],implicitevidence$1324:kantan.csv.CellDecoder[A3],implicitevidence$1325:kantan.csv.CellEncoder[A4],implicitevidence$1326:kantan.csv.CellDecoder[A4],implicitevidence$1327:kantan.csv.CellEncoder[A5],implicitevidence$1328:kantan.csv.CellDecoder[A5],implicitevidence$1329:kantan.csv.CellEncoder[A6],implicitevidence$1330:kantan.csv.CellDecoder[A6],implicitevidence$1331:kantan.csv.CellEncoder[A7],implicitevidence$1332:kantan.csv.CellDecoder[A7],implicitevidence$1333:kantan.csv.CellEncoder[A8],implicitevidence$1334:kantan.csv.CellDecoder[A8],implicitevidence$1335:kantan.csv.CellEncoder[A9],implicitevidence$1336:kantan.csv.CellDecoder[A9],implicitevidence$1337:kantan.csv.CellEncoder[A10],implicitevidence$1338:kantan.csv.CellDecoder[A10],implicitevidence$1339:kantan.csv.CellEncoder[A11],implicitevidence$1340:kantan.csv.CellDecoder[A11],implicitevidence$1341:kantan.csv.CellEncoder[A12],implicitevidence$1342:kantan.csv.CellDecoder[A12],implicitevidence$1343:kantan.csv.CellEncoder[A13],implicitevidence$1344:kantan.csv.CellDecoder[A13],implicitevidence$1345:kantan.csv.CellEncoder[A14],implicitevidence$1346:kantan.csv.CellDecoder[A14],implicitevidence$1347:kantan.csv.CellEncoder[A15],implicitevidence$1348:kantan.csv.CellDecoder[A15],implicitevidence$1349:kantan.csv.CellEncoder[A16],implicitevidence$1350:kantan.csv.CellDecoder[A16],implicitevidence$1351:kantan.csv.CellEncoder[A17],implicitevidence$1352:kantan.csv.CellDecoder[A17],implicitevidence$1353:kantan.csv.CellEncoder[A18],implicitevidence$1354:kantan.csv.CellDecoder[A18]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$1285:kantan.csv.CellEncoder[A1],implicitevidence$1286:kantan.csv.CellDecoder[A1],implicitevidence$1287:kantan.csv.CellEncoder[A2],implicitevidence$1288:kantan.csv.CellDecoder[A2],implicitevidence$1289:kantan.csv.CellEncoder[A3],implicitevidence$1290:kantan.csv.CellDecoder[A3],implicitevidence$1291:kantan.csv.CellEncoder[A4],implicitevidence$1292:kantan.csv.CellDecoder[A4],implicitevidence$1293:kantan.csv.CellEncoder[A5],implicitevidence$1294:kantan.csv.CellDecoder[A5],implicitevidence$1295:kantan.csv.CellEncoder[A6],implicitevidence$1296:kantan.csv.CellDecoder[A6],implicitevidence$1297:kantan.csv.CellEncoder[A7],implicitevidence$1298:kantan.csv.CellDecoder[A7],implicitevidence$1299:kantan.csv.CellEncoder[A8],implicitevidence$1300:kantan.csv.CellDecoder[A8],implicitevidence$1301:kantan.csv.CellEncoder[A9],implicitevidence$1302:kantan.csv.CellDecoder[A9],implicitevidence$1303:kantan.csv.CellEncoder[A10],implicitevidence$1304:kantan.csv.CellDecoder[A10],implicitevidence$1305:kantan.csv.CellEncoder[A11],implicitevidence$1306:kantan.csv.CellDecoder[A11],implicitevidence$1307:kantan.csv.CellEncoder[A12],implicitevidence$1308:kantan.csv.CellDecoder[A12],implicitevidence$1309:kantan.csv.CellEncoder[A13],implicitevidence$1310:kantan.csv.CellDecoder[A13],implicitevidence$1311:kantan.csv.CellEncoder[A14],implicitevidence$1312:kantan.csv.CellDecoder[A14],implicitevidence$1313:kantan.csv.CellEncoder[A15],implicitevidence$1314:kantan.csv.CellDecoder[A15],implicitevidence$1315:kantan.csv.CellEncoder[A16],implicitevidence$1316:kantan.csv.CellDecoder[A16],implicitevidence$1317:kantan.csv.CellEncoder[A17],implicitevidence$1318:kantan.csv.CellDecoder[A17]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$1253:kantan.csv.CellEncoder[A1],implicitevidence$1254:kantan.csv.CellDecoder[A1],implicitevidence$1255:kantan.csv.CellEncoder[A2],implicitevidence$1256:kantan.csv.CellDecoder[A2],implicitevidence$1257:kantan.csv.CellEncoder[A3],implicitevidence$1258:kantan.csv.CellDecoder[A3],implicitevidence$1259:kantan.csv.CellEncoder[A4],implicitevidence$1260:kantan.csv.CellDecoder[A4],implicitevidence$1261:kantan.csv.CellEncoder[A5],implicitevidence$1262:kantan.csv.CellDecoder[A5],implicitevidence$1263:kantan.csv.CellEncoder[A6],implicitevidence$1264:kantan.csv.CellDecoder[A6],implicitevidence$1265:kantan.csv.CellEncoder[A7],implicitevidence$1266:kantan.csv.CellDecoder[A7],implicitevidence$1267:kantan.csv.CellEncoder[A8],implicitevidence$1268:kantan.csv.CellDecoder[A8],implicitevidence$1269:kantan.csv.CellEncoder[A9],implicitevidence$1270:kantan.csv.CellDecoder[A9],implicitevidence$1271:kantan.csv.CellEncoder[A10],implicitevidence$1272:kantan.csv.CellDecoder[A10],implicitevidence$1273:kantan.csv.CellEncoder[A11],implicitevidence$1274:kantan.csv.CellDecoder[A11],implicitevidence$1275:kantan.csv.CellEncoder[A12],implicitevidence$1276:kantan.csv.CellDecoder[A12],implicitevidence$1277:kantan.csv.CellEncoder[A13],implicitevidence$1278:kantan.csv.CellDecoder[A13],implicitevidence$1279:kantan.csv.CellEncoder[A14],implicitevidence$1280:kantan.csv.CellDecoder[A14],implicitevidence$1281:kantan.csv.CellEncoder[A15],implicitevidence$1282:kantan.csv.CellDecoder[A15],implicitevidence$1283:kantan.csv.CellEncoder[A16],implicitevidence$1284:kantan.csv.CellDecoder[A16]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$1223:kantan.csv.CellEncoder[A1],implicitevidence$1224:kantan.csv.CellDecoder[A1],implicitevidence$1225:kantan.csv.CellEncoder[A2],implicitevidence$1226:kantan.csv.CellDecoder[A2],implicitevidence$1227:kantan.csv.CellEncoder[A3],implicitevidence$1228:kantan.csv.CellDecoder[A3],implicitevidence$1229:kantan.csv.CellEncoder[A4],implicitevidence$1230:kantan.csv.CellDecoder[A4],implicitevidence$1231:kantan.csv.CellEncoder[A5],implicitevidence$1232:kantan.csv.CellDecoder[A5],implicitevidence$1233:kantan.csv.CellEncoder[A6],implicitevidence$1234:kantan.csv.CellDecoder[A6],implicitevidence$1235:kantan.csv.CellEncoder[A7],implicitevidence$1236:kantan.csv.CellDecoder[A7],implicitevidence$1237:kantan.csv.CellEncoder[A8],implicitevidence$1238:kantan.csv.CellDecoder[A8],implicitevidence$1239:kantan.csv.CellEncoder[A9],implicitevidence$1240:kantan.csv.CellDecoder[A9],implicitevidence$1241:kantan.csv.CellEncoder[A10],implicitevidence$1242:kantan.csv.CellDecoder[A10],implicitevidence$1243:kantan.csv.CellEncoder[A11],implicitevidence$1244:kantan.csv.CellDecoder[A11],implicitevidence$1245:kantan.csv.CellEncoder[A12],implicitevidence$1246:kantan.csv.CellDecoder[A12],implicitevidence$1247:kantan.csv.CellEncoder[A13],implicitevidence$1248:kantan.csv.CellDecoder[A13],implicitevidence$1249:kantan.csv.CellEncoder[A14],implicitevidence$1250:kantan.csv.CellDecoder[A14],implicitevidence$1251:kantan.csv.CellEncoder[A15],implicitevidence$1252:kantan.csv.CellDecoder[A15]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$1195:kantan.csv.CellEncoder[A1],implicitevidence$1196:kantan.csv.CellDecoder[A1],implicitevidence$1197:kantan.csv.CellEncoder[A2],implicitevidence$1198:kantan.csv.CellDecoder[A2],implicitevidence$1199:kantan.csv.CellEncoder[A3],implicitevidence$1200:kantan.csv.CellDecoder[A3],implicitevidence$1201:kantan.csv.CellEncoder[A4],implicitevidence$1202:kantan.csv.CellDecoder[A4],implicitevidence$1203:kantan.csv.CellEncoder[A5],implicitevidence$1204:kantan.csv.CellDecoder[A5],implicitevidence$1205:kantan.csv.CellEncoder[A6],implicitevidence$1206:kantan.csv.CellDecoder[A6],implicitevidence$1207:kantan.csv.CellEncoder[A7],implicitevidence$1208:kantan.csv.CellDecoder[A7],implicitevidence$1209:kantan.csv.CellEncoder[A8],implicitevidence$1210:kantan.csv.CellDecoder[A8],implicitevidence$1211:kantan.csv.CellEncoder[A9],implicitevidence$1212:kantan.csv.CellDecoder[A9],implicitevidence$1213:kantan.csv.CellEncoder[A10],implicitevidence$1214:kantan.csv.CellDecoder[A10],implicitevidence$1215:kantan.csv.CellEncoder[A11],implicitevidence$1216:kantan.csv.CellDecoder[A11],implicitevidence$1217:kantan.csv.CellEncoder[A12],implicitevidence$1218:kantan.csv.CellDecoder[A12],implicitevidence$1219:kantan.csv.CellEncoder[A13],implicitevidence$1220:kantan.csv.CellDecoder[A13],implicitevidence$1221:kantan.csv.CellEncoder[A14],implicitevidence$1222:kantan.csv.CellDecoder[A14]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$1169:kantan.csv.CellEncoder[A1],implicitevidence$1170:kantan.csv.CellDecoder[A1],implicitevidence$1171:kantan.csv.CellEncoder[A2],implicitevidence$1172:kantan.csv.CellDecoder[A2],implicitevidence$1173:kantan.csv.CellEncoder[A3],implicitevidence$1174:kantan.csv.CellDecoder[A3],implicitevidence$1175:kantan.csv.CellEncoder[A4],implicitevidence$1176:kantan.csv.CellDecoder[A4],implicitevidence$1177:kantan.csv.CellEncoder[A5],implicitevidence$1178:kantan.csv.CellDecoder[A5],implicitevidence$1179:kantan.csv.CellEncoder[A6],implicitevidence$1180:kantan.csv.CellDecoder[A6],implicitevidence$1181:kantan.csv.CellEncoder[A7],implicitevidence$1182:kantan.csv.CellDecoder[A7],implicitevidence$1183:kantan.csv.CellEncoder[A8],implicitevidence$1184:kantan.csv.CellDecoder[A8],implicitevidence$1185:kantan.csv.CellEncoder[A9],implicitevidence$1186:kantan.csv.CellDecoder[A9],implicitevidence$1187:kantan.csv.CellEncoder[A10],implicitevidence$1188:kantan.csv.CellDecoder[A10],implicitevidence$1189:kantan.csv.CellEncoder[A11],implicitevidence$1190:kantan.csv.CellDecoder[A11],implicitevidence$1191:kantan.csv.CellEncoder[A12],implicitevidence$1192:kantan.csv.CellDecoder[A12],implicitevidence$1193:kantan.csv.CellEncoder[A13],implicitevidence$1194:kantan.csv.CellDecoder[A13]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$1145:kantan.csv.CellEncoder[A1],implicitevidence$1146:kantan.csv.CellDecoder[A1],implicitevidence$1147:kantan.csv.CellEncoder[A2],implicitevidence$1148:kantan.csv.CellDecoder[A2],implicitevidence$1149:kantan.csv.CellEncoder[A3],implicitevidence$1150:kantan.csv.CellDecoder[A3],implicitevidence$1151:kantan.csv.CellEncoder[A4],implicitevidence$1152:kantan.csv.CellDecoder[A4],implicitevidence$1153:kantan.csv.CellEncoder[A5],implicitevidence$1154:kantan.csv.CellDecoder[A5],implicitevidence$1155:kantan.csv.CellEncoder[A6],implicitevidence$1156:kantan.csv.CellDecoder[A6],implicitevidence$1157:kantan.csv.CellEncoder[A7],implicitevidence$1158:kantan.csv.CellDecoder[A7],implicitevidence$1159:kantan.csv.CellEncoder[A8],implicitevidence$1160:kantan.csv.CellDecoder[A8],implicitevidence$1161:kantan.csv.CellEncoder[A9],implicitevidence$1162:kantan.csv.CellDecoder[A9],implicitevidence$1163:kantan.csv.CellEncoder[A10],implicitevidence$1164:kantan.csv.CellDecoder[A10],implicitevidence$1165:kantan.csv.CellEncoder[A11],implicitevidence$1166:kantan.csv.CellDecoder[A11],implicitevidence$1167:kantan.csv.CellEncoder[A12],implicitevidence$1168:kantan.csv.CellDecoder[A12]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$1123:kantan.csv.CellEncoder[A1],implicitevidence$1124:kantan.csv.CellDecoder[A1],implicitevidence$1125:kantan.csv.CellEncoder[A2],implicitevidence$1126:kantan.csv.CellDecoder[A2],implicitevidence$1127:kantan.csv.CellEncoder[A3],implicitevidence$1128:kantan.csv.CellDecoder[A3],implicitevidence$1129:kantan.csv.CellEncoder[A4],implicitevidence$1130:kantan.csv.CellDecoder[A4],implicitevidence$1131:kantan.csv.CellEncoder[A5],implicitevidence$1132:kantan.csv.CellDecoder[A5],implicitevidence$1133:kantan.csv.CellEncoder[A6],implicitevidence$1134:kantan.csv.CellDecoder[A6],implicitevidence$1135:kantan.csv.CellEncoder[A7],implicitevidence$1136:kantan.csv.CellDecoder[A7],implicitevidence$1137:kantan.csv.CellEncoder[A8],implicitevidence$1138:kantan.csv.CellDecoder[A8],implicitevidence$1139:kantan.csv.CellEncoder[A9],implicitevidence$1140:kantan.csv.CellDecoder[A9],implicitevidence$1141:kantan.csv.CellEncoder[A10],implicitevidence$1142:kantan.csv.CellDecoder[A10],implicitevidence$1143:kantan.csv.CellEncoder[A11],implicitevidence$1144:kantan.csv.CellDecoder[A11]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$1103:kantan.csv.CellEncoder[A1],implicitevidence$1104:kantan.csv.CellDecoder[A1],implicitevidence$1105:kantan.csv.CellEncoder[A2],implicitevidence$1106:kantan.csv.CellDecoder[A2],implicitevidence$1107:kantan.csv.CellEncoder[A3],implicitevidence$1108:kantan.csv.CellDecoder[A3],implicitevidence$1109:kantan.csv.CellEncoder[A4],implicitevidence$1110:kantan.csv.CellDecoder[A4],implicitevidence$1111:kantan.csv.CellEncoder[A5],implicitevidence$1112:kantan.csv.CellDecoder[A5],implicitevidence$1113:kantan.csv.CellEncoder[A6],implicitevidence$1114:kantan.csv.CellDecoder[A6],implicitevidence$1115:kantan.csv.CellEncoder[A7],implicitevidence$1116:kantan.csv.CellDecoder[A7],implicitevidence$1117:kantan.csv.CellEncoder[A8],implicitevidence$1118:kantan.csv.CellDecoder[A8],implicitevidence$1119:kantan.csv.CellEncoder[A9],implicitevidence$1120:kantan.csv.CellDecoder[A9],implicitevidence$1121:kantan.csv.CellEncoder[A10],implicitevidence$1122:kantan.csv.CellDecoder[A10]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$1085:kantan.csv.CellEncoder[A1],implicitevidence$1086:kantan.csv.CellDecoder[A1],implicitevidence$1087:kantan.csv.CellEncoder[A2],implicitevidence$1088:kantan.csv.CellDecoder[A2],implicitevidence$1089:kantan.csv.CellEncoder[A3],implicitevidence$1090:kantan.csv.CellDecoder[A3],implicitevidence$1091:kantan.csv.CellEncoder[A4],implicitevidence$1092:kantan.csv.CellDecoder[A4],implicitevidence$1093:kantan.csv.CellEncoder[A5],implicitevidence$1094:kantan.csv.CellDecoder[A5],implicitevidence$1095:kantan.csv.CellEncoder[A6],implicitevidence$1096:kantan.csv.CellDecoder[A6],implicitevidence$1097:kantan.csv.CellEncoder[A7],implicitevidence$1098:kantan.csv.CellDecoder[A7],implicitevidence$1099:kantan.csv.CellEncoder[A8],implicitevidence$1100:kantan.csv.CellDecoder[A8],implicitevidence$1101:kantan.csv.CellEncoder[A9],implicitevidence$1102:kantan.csv.CellDecoder[A9]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$1069:kantan.csv.CellEncoder[A1],implicitevidence$1070:kantan.csv.CellDecoder[A1],implicitevidence$1071:kantan.csv.CellEncoder[A2],implicitevidence$1072:kantan.csv.CellDecoder[A2],implicitevidence$1073:kantan.csv.CellEncoder[A3],implicitevidence$1074:kantan.csv.CellDecoder[A3],implicitevidence$1075:kantan.csv.CellEncoder[A4],implicitevidence$1076:kantan.csv.CellDecoder[A4],implicitevidence$1077:kantan.csv.CellEncoder[A5],implicitevidence$1078:kantan.csv.CellDecoder[A5],implicitevidence$1079:kantan.csv.CellEncoder[A6],implicitevidence$1080:kantan.csv.CellDecoder[A6],implicitevidence$1081:kantan.csv.CellEncoder[A7],implicitevidence$1082:kantan.csv.CellDecoder[A7],implicitevidence$1083:kantan.csv.CellEncoder[A8],implicitevidence$1084:kantan.csv.CellDecoder[A8]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$1055:kantan.csv.CellEncoder[A1],implicitevidence$1056:kantan.csv.CellDecoder[A1],implicitevidence$1057:kantan.csv.CellEncoder[A2],implicitevidence$1058:kantan.csv.CellDecoder[A2],implicitevidence$1059:kantan.csv.CellEncoder[A3],implicitevidence$1060:kantan.csv.CellDecoder[A3],implicitevidence$1061:kantan.csv.CellEncoder[A4],implicitevidence$1062:kantan.csv.CellDecoder[A4],implicitevidence$1063:kantan.csv.CellEncoder[A5],implicitevidence$1064:kantan.csv.CellDecoder[A5],implicitevidence$1065:kantan.csv.CellEncoder[A6],implicitevidence$1066:kantan.csv.CellDecoder[A6],implicitevidence$1067:kantan.csv.CellEncoder[A7],implicitevidence$1068:kantan.csv.CellDecoder[A7]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$1043:kantan.csv.CellEncoder[A1],implicitevidence$1044:kantan.csv.CellDecoder[A1],implicitevidence$1045:kantan.csv.CellEncoder[A2],implicitevidence$1046:kantan.csv.CellDecoder[A2],implicitevidence$1047:kantan.csv.CellEncoder[A3],implicitevidence$1048:kantan.csv.CellDecoder[A3],implicitevidence$1049:kantan.csv.CellEncoder[A4],implicitevidence$1050:kantan.csv.CellDecoder[A4],implicitevidence$1051:kantan.csv.CellEncoder[A5],implicitevidence$1052:kantan.csv.CellDecoder[A5],implicitevidence$1053:kantan.csv.CellEncoder[A6],implicitevidence$1054:kantan.csv.CellDecoder[A6]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (A1, A2, A3, A4, A5) => C)(g: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:(A1,A2,A3,A4,A5)=>C)(g:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$1033:kantan.csv.CellEncoder[A1],implicitevidence$1034:kantan.csv.CellDecoder[A1],implicitevidence$1035:kantan.csv.CellEncoder[A2],implicitevidence$1036:kantan.csv.CellDecoder[A2],implicitevidence$1037:kantan.csv.CellEncoder[A3],implicitevidence$1038:kantan.csv.CellDecoder[A3],implicitevidence$1039:kantan.csv.CellEncoder[A4],implicitevidence$1040:kantan.csv.CellDecoder[A4],implicitevidence$1041:kantan.csv.CellEncoder[A5],implicitevidence$1042:kantan.csv.CellDecoder[A5]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (A1, A2, A3, A4) => C)(g: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(f:(A1,A2,A3,A4)=>C)(g:C=>Option[(A1,A2,A3,A4)])(implicitevidence$1025:kantan.csv.CellEncoder[A1],implicitevidence$1026:kantan.csv.CellDecoder[A1],implicitevidence$1027:kantan.csv.CellEncoder[A2],implicitevidence$1028:kantan.csv.CellDecoder[A2],implicitevidence$1029:kantan.csv.CellEncoder[A3],implicitevidence$1030:kantan.csv.CellDecoder[A3],implicitevidence$1031:kantan.csv.CellEncoder[A4],implicitevidence$1032:kantan.csv.CellDecoder[A4]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (A1, A2, A3) => C)(g: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2,A3](i1:Int,i2:Int,i3:Int)(f:(A1,A2,A3)=>C)(g:C=>Option[(A1,A2,A3)])(implicitevidence$1019:kantan.csv.CellEncoder[A1],implicitevidence$1020:kantan.csv.CellDecoder[A1],implicitevidence$1021:kantan.csv.CellEncoder[A2],implicitevidence$1022:kantan.csv.CellDecoder[A2],implicitevidence$1023:kantan.csv.CellEncoder[A3],implicitevidence$1024:kantan.csv.CellDecoder[A3]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int)(f: (A1, A2) => C)(g: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1,A2](i1:Int,i2:Int)(f:(A1,A2)=>C)(g:C=>Option[(A1,A2)])(implicitevidence$1015:kantan.csv.CellEncoder[A1],implicitevidence$1016:kantan.csv.CellDecoder[A1],implicitevidence$1017:kantan.csv.CellEncoder[A2],implicitevidence$1018:kantan.csv.CellDecoder[A2]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f: (A1) => C)(g: (C) => Option[A1])(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#caseCodec[C,A1](f:A1=>C)(g:C=>Option[A1])(implicitevidence$1013:kantan.csv.CellEncoder[A1],implicitevidence$1014:kantan.csv.CellDecoder[A1]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$969:kantan.csv.CellEncoder[A1],implicitevidence$970:kantan.csv.CellDecoder[A1],implicitevidence$971:kantan.csv.CellEncoder[A2],implicitevidence$972:kantan.csv.CellDecoder[A2],implicitevidence$973:kantan.csv.CellEncoder[A3],implicitevidence$974:kantan.csv.CellDecoder[A3],implicitevidence$975:kantan.csv.CellEncoder[A4],implicitevidence$976:kantan.csv.CellDecoder[A4],implicitevidence$977:kantan.csv.CellEncoder[A5],implicitevidence$978:kantan.csv.CellDecoder[A5],implicitevidence$979:kantan.csv.CellEncoder[A6],implicitevidence$980:kantan.csv.CellDecoder[A6],implicitevidence$981:kantan.csv.CellEncoder[A7],implicitevidence$982:kantan.csv.CellDecoder[A7],implicitevidence$983:kantan.csv.CellEncoder[A8],implicitevidence$984:kantan.csv.CellDecoder[A8],implicitevidence$985:kantan.csv.CellEncoder[A9],implicitevidence$986:kantan.csv.CellDecoder[A9],implicitevidence$987:kantan.csv.CellEncoder[A10],implicitevidence$988:kantan.csv.CellDecoder[A10],implicitevidence$989:kantan.csv.CellEncoder[A11],implicitevidence$990:kantan.csv.CellDecoder[A11],implicitevidence$991:kantan.csv.CellEncoder[A12],implicitevidence$992:kantan.csv.CellDecoder[A12],implicitevidence$993:kantan.csv.CellEncoder[A13],implicitevidence$994:kantan.csv.CellDecoder[A13],implicitevidence$995:kantan.csv.CellEncoder[A14],implicitevidence$996:kantan.csv.CellDecoder[A14],implicitevidence$997:kantan.csv.CellEncoder[A15],implicitevidence$998:kantan.csv.CellDecoder[A15],implicitevidence$999:kantan.csv.CellEncoder[A16],implicitevidence$1000:kantan.csv.CellDecoder[A16],implicitevidence$1001:kantan.csv.CellEncoder[A17],implicitevidence$1002:kantan.csv.CellDecoder[A17],implicitevidence$1003:kantan.csv.CellEncoder[A18],implicitevidence$1004:kantan.csv.CellDecoder[A18],implicitevidence$1005:kantan.csv.CellEncoder[A19],implicitevidence$1006:kantan.csv.CellDecoder[A19],implicitevidence$1007:kantan.csv.CellEncoder[A20],implicitevidence$1008:kantan.csv.CellDecoder[A20],implicitevidence$1009:kantan.csv.CellEncoder[A21],implicitevidence$1010:kantan.csv.CellDecoder[A21],implicitevidence$1011:kantan.csv.CellEncoder[A22],implicitevidence$1012:kantan.csv.CellDecoder[A22]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$927:kantan.csv.CellEncoder[A1],implicitevidence$928:kantan.csv.CellDecoder[A1],implicitevidence$929:kantan.csv.CellEncoder[A2],implicitevidence$930:kantan.csv.CellDecoder[A2],implicitevidence$931:kantan.csv.CellEncoder[A3],implicitevidence$932:kantan.csv.CellDecoder[A3],implicitevidence$933:kantan.csv.CellEncoder[A4],implicitevidence$934:kantan.csv.CellDecoder[A4],implicitevidence$935:kantan.csv.CellEncoder[A5],implicitevidence$936:kantan.csv.CellDecoder[A5],implicitevidence$937:kantan.csv.CellEncoder[A6],implicitevidence$938:kantan.csv.CellDecoder[A6],implicitevidence$939:kantan.csv.CellEncoder[A7],implicitevidence$940:kantan.csv.CellDecoder[A7],implicitevidence$941:kantan.csv.CellEncoder[A8],implicitevidence$942:kantan.csv.CellDecoder[A8],implicitevidence$943:kantan.csv.CellEncoder[A9],implicitevidence$944:kantan.csv.CellDecoder[A9],implicitevidence$945:kantan.csv.CellEncoder[A10],implicitevidence$946:kantan.csv.CellDecoder[A10],implicitevidence$947:kantan.csv.CellEncoder[A11],implicitevidence$948:kantan.csv.CellDecoder[A11],implicitevidence$949:kantan.csv.CellEncoder[A12],implicitevidence$950:kantan.csv.CellDecoder[A12],implicitevidence$951:kantan.csv.CellEncoder[A13],implicitevidence$952:kantan.csv.CellDecoder[A13],implicitevidence$953:kantan.csv.CellEncoder[A14],implicitevidence$954:kantan.csv.CellDecoder[A14],implicitevidence$955:kantan.csv.CellEncoder[A15],implicitevidence$956:kantan.csv.CellDecoder[A15],implicitevidence$957:kantan.csv.CellEncoder[A16],implicitevidence$958:kantan.csv.CellDecoder[A16],implicitevidence$959:kantan.csv.CellEncoder[A17],implicitevidence$960:kantan.csv.CellDecoder[A17],implicitevidence$961:kantan.csv.CellEncoder[A18],implicitevidence$962:kantan.csv.CellDecoder[A18],implicitevidence$963:kantan.csv.CellEncoder[A19],implicitevidence$964:kantan.csv.CellDecoder[A19],implicitevidence$965:kantan.csv.CellEncoder[A20],implicitevidence$966:kantan.csv.CellDecoder[A20],implicitevidence$967:kantan.csv.CellEncoder[A21],implicitevidence$968:kantan.csv.CellDecoder[A21]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$887:kantan.csv.CellEncoder[A1],implicitevidence$888:kantan.csv.CellDecoder[A1],implicitevidence$889:kantan.csv.CellEncoder[A2],implicitevidence$890:kantan.csv.CellDecoder[A2],implicitevidence$891:kantan.csv.CellEncoder[A3],implicitevidence$892:kantan.csv.CellDecoder[A3],implicitevidence$893:kantan.csv.CellEncoder[A4],implicitevidence$894:kantan.csv.CellDecoder[A4],implicitevidence$895:kantan.csv.CellEncoder[A5],implicitevidence$896:kantan.csv.CellDecoder[A5],implicitevidence$897:kantan.csv.CellEncoder[A6],implicitevidence$898:kantan.csv.CellDecoder[A6],implicitevidence$899:kantan.csv.CellEncoder[A7],implicitevidence$900:kantan.csv.CellDecoder[A7],implicitevidence$901:kantan.csv.CellEncoder[A8],implicitevidence$902:kantan.csv.CellDecoder[A8],implicitevidence$903:kantan.csv.CellEncoder[A9],implicitevidence$904:kantan.csv.CellDecoder[A9],implicitevidence$905:kantan.csv.CellEncoder[A10],implicitevidence$906:kantan.csv.CellDecoder[A10],implicitevidence$907:kantan.csv.CellEncoder[A11],implicitevidence$908:kantan.csv.CellDecoder[A11],implicitevidence$909:kantan.csv.CellEncoder[A12],implicitevidence$910:kantan.csv.CellDecoder[A12],implicitevidence$911:kantan.csv.CellEncoder[A13],implicitevidence$912:kantan.csv.CellDecoder[A13],implicitevidence$913:kantan.csv.CellEncoder[A14],implicitevidence$914:kantan.csv.CellDecoder[A14],implicitevidence$915:kantan.csv.CellEncoder[A15],implicitevidence$916:kantan.csv.CellDecoder[A15],implicitevidence$917:kantan.csv.CellEncoder[A16],implicitevidence$918:kantan.csv.CellDecoder[A16],implicitevidence$919:kantan.csv.CellEncoder[A17],implicitevidence$920:kantan.csv.CellDecoder[A17],implicitevidence$921:kantan.csv.CellEncoder[A18],implicitevidence$922:kantan.csv.CellDecoder[A18],implicitevidence$923:kantan.csv.CellEncoder[A19],implicitevidence$924:kantan.csv.CellDecoder[A19],implicitevidence$925:kantan.csv.CellEncoder[A20],implicitevidence$926:kantan.csv.CellDecoder[A20]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$849:kantan.csv.CellEncoder[A1],implicitevidence$850:kantan.csv.CellDecoder[A1],implicitevidence$851:kantan.csv.CellEncoder[A2],implicitevidence$852:kantan.csv.CellDecoder[A2],implicitevidence$853:kantan.csv.CellEncoder[A3],implicitevidence$854:kantan.csv.CellDecoder[A3],implicitevidence$855:kantan.csv.CellEncoder[A4],implicitevidence$856:kantan.csv.CellDecoder[A4],implicitevidence$857:kantan.csv.CellEncoder[A5],implicitevidence$858:kantan.csv.CellDecoder[A5],implicitevidence$859:kantan.csv.CellEncoder[A6],implicitevidence$860:kantan.csv.CellDecoder[A6],implicitevidence$861:kantan.csv.CellEncoder[A7],implicitevidence$862:kantan.csv.CellDecoder[A7],implicitevidence$863:kantan.csv.CellEncoder[A8],implicitevidence$864:kantan.csv.CellDecoder[A8],implicitevidence$865:kantan.csv.CellEncoder[A9],implicitevidence$866:kantan.csv.CellDecoder[A9],implicitevidence$867:kantan.csv.CellEncoder[A10],implicitevidence$868:kantan.csv.CellDecoder[A10],implicitevidence$869:kantan.csv.CellEncoder[A11],implicitevidence$870:kantan.csv.CellDecoder[A11],implicitevidence$871:kantan.csv.CellEncoder[A12],implicitevidence$872:kantan.csv.CellDecoder[A12],implicitevidence$873:kantan.csv.CellEncoder[A13],implicitevidence$874:kantan.csv.CellDecoder[A13],implicitevidence$875:kantan.csv.CellEncoder[A14],implicitevidence$876:kantan.csv.CellDecoder[A14],implicitevidence$877:kantan.csv.CellEncoder[A15],implicitevidence$878:kantan.csv.CellDecoder[A15],implicitevidence$879:kantan.csv.CellEncoder[A16],implicitevidence$880:kantan.csv.CellDecoder[A16],implicitevidence$881:kantan.csv.CellEncoder[A17],implicitevidence$882:kantan.csv.CellDecoder[A17],implicitevidence$883:kantan.csv.CellEncoder[A18],implicitevidence$884:kantan.csv.CellDecoder[A18],implicitevidence$885:kantan.csv.CellEncoder[A19],implicitevidence$886:kantan.csv.CellDecoder[A19]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$813:kantan.csv.CellEncoder[A1],implicitevidence$814:kantan.csv.CellDecoder[A1],implicitevidence$815:kantan.csv.CellEncoder[A2],implicitevidence$816:kantan.csv.CellDecoder[A2],implicitevidence$817:kantan.csv.CellEncoder[A3],implicitevidence$818:kantan.csv.CellDecoder[A3],implicitevidence$819:kantan.csv.CellEncoder[A4],implicitevidence$820:kantan.csv.CellDecoder[A4],implicitevidence$821:kantan.csv.CellEncoder[A5],implicitevidence$822:kantan.csv.CellDecoder[A5],implicitevidence$823:kantan.csv.CellEncoder[A6],implicitevidence$824:kantan.csv.CellDecoder[A6],implicitevidence$825:kantan.csv.CellEncoder[A7],implicitevidence$826:kantan.csv.CellDecoder[A7],implicitevidence$827:kantan.csv.CellEncoder[A8],implicitevidence$828:kantan.csv.CellDecoder[A8],implicitevidence$829:kantan.csv.CellEncoder[A9],implicitevidence$830:kantan.csv.CellDecoder[A9],implicitevidence$831:kantan.csv.CellEncoder[A10],implicitevidence$832:kantan.csv.CellDecoder[A10],implicitevidence$833:kantan.csv.CellEncoder[A11],implicitevidence$834:kantan.csv.CellDecoder[A11],implicitevidence$835:kantan.csv.CellEncoder[A12],implicitevidence$836:kantan.csv.CellDecoder[A12],implicitevidence$837:kantan.csv.CellEncoder[A13],implicitevidence$838:kantan.csv.CellDecoder[A13],implicitevidence$839:kantan.csv.CellEncoder[A14],implicitevidence$840:kantan.csv.CellDecoder[A14],implicitevidence$841:kantan.csv.CellEncoder[A15],implicitevidence$842:kantan.csv.CellDecoder[A15],implicitevidence$843:kantan.csv.CellEncoder[A16],implicitevidence$844:kantan.csv.CellDecoder[A16],implicitevidence$845:kantan.csv.CellEncoder[A17],implicitevidence$846:kantan.csv.CellDecoder[A17],implicitevidence$847:kantan.csv.CellEncoder[A18],implicitevidence$848:kantan.csv.CellDecoder[A18]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$779:kantan.csv.CellEncoder[A1],implicitevidence$780:kantan.csv.CellDecoder[A1],implicitevidence$781:kantan.csv.CellEncoder[A2],implicitevidence$782:kantan.csv.CellDecoder[A2],implicitevidence$783:kantan.csv.CellEncoder[A3],implicitevidence$784:kantan.csv.CellDecoder[A3],implicitevidence$785:kantan.csv.CellEncoder[A4],implicitevidence$786:kantan.csv.CellDecoder[A4],implicitevidence$787:kantan.csv.CellEncoder[A5],implicitevidence$788:kantan.csv.CellDecoder[A5],implicitevidence$789:kantan.csv.CellEncoder[A6],implicitevidence$790:kantan.csv.CellDecoder[A6],implicitevidence$791:kantan.csv.CellEncoder[A7],implicitevidence$792:kantan.csv.CellDecoder[A7],implicitevidence$793:kantan.csv.CellEncoder[A8],implicitevidence$794:kantan.csv.CellDecoder[A8],implicitevidence$795:kantan.csv.CellEncoder[A9],implicitevidence$796:kantan.csv.CellDecoder[A9],implicitevidence$797:kantan.csv.CellEncoder[A10],implicitevidence$798:kantan.csv.CellDecoder[A10],implicitevidence$799:kantan.csv.CellEncoder[A11],implicitevidence$800:kantan.csv.CellDecoder[A11],implicitevidence$801:kantan.csv.CellEncoder[A12],implicitevidence$802:kantan.csv.CellDecoder[A12],implicitevidence$803:kantan.csv.CellEncoder[A13],implicitevidence$804:kantan.csv.CellDecoder[A13],implicitevidence$805:kantan.csv.CellEncoder[A14],implicitevidence$806:kantan.csv.CellDecoder[A14],implicitevidence$807:kantan.csv.CellEncoder[A15],implicitevidence$808:kantan.csv.CellDecoder[A15],implicitevidence$809:kantan.csv.CellEncoder[A16],implicitevidence$810:kantan.csv.CellDecoder[A16],implicitevidence$811:kantan.csv.CellEncoder[A17],implicitevidence$812:kantan.csv.CellDecoder[A17]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$747:kantan.csv.CellEncoder[A1],implicitevidence$748:kantan.csv.CellDecoder[A1],implicitevidence$749:kantan.csv.CellEncoder[A2],implicitevidence$750:kantan.csv.CellDecoder[A2],implicitevidence$751:kantan.csv.CellEncoder[A3],implicitevidence$752:kantan.csv.CellDecoder[A3],implicitevidence$753:kantan.csv.CellEncoder[A4],implicitevidence$754:kantan.csv.CellDecoder[A4],implicitevidence$755:kantan.csv.CellEncoder[A5],implicitevidence$756:kantan.csv.CellDecoder[A5],implicitevidence$757:kantan.csv.CellEncoder[A6],implicitevidence$758:kantan.csv.CellDecoder[A6],implicitevidence$759:kantan.csv.CellEncoder[A7],implicitevidence$760:kantan.csv.CellDecoder[A7],implicitevidence$761:kantan.csv.CellEncoder[A8],implicitevidence$762:kantan.csv.CellDecoder[A8],implicitevidence$763:kantan.csv.CellEncoder[A9],implicitevidence$764:kantan.csv.CellDecoder[A9],implicitevidence$765:kantan.csv.CellEncoder[A10],implicitevidence$766:kantan.csv.CellDecoder[A10],implicitevidence$767:kantan.csv.CellEncoder[A11],implicitevidence$768:kantan.csv.CellDecoder[A11],implicitevidence$769:kantan.csv.CellEncoder[A12],implicitevidence$770:kantan.csv.CellDecoder[A12],implicitevidence$771:kantan.csv.CellEncoder[A13],implicitevidence$772:kantan.csv.CellDecoder[A13],implicitevidence$773:kantan.csv.CellEncoder[A14],implicitevidence$774:kantan.csv.CellDecoder[A14],implicitevidence$775:kantan.csv.CellEncoder[A15],implicitevidence$776:kantan.csv.CellDecoder[A15],implicitevidence$777:kantan.csv.CellEncoder[A16],implicitevidence$778:kantan.csv.CellDecoder[A16]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$717:kantan.csv.CellEncoder[A1],implicitevidence$718:kantan.csv.CellDecoder[A1],implicitevidence$719:kantan.csv.CellEncoder[A2],implicitevidence$720:kantan.csv.CellDecoder[A2],implicitevidence$721:kantan.csv.CellEncoder[A3],implicitevidence$722:kantan.csv.CellDecoder[A3],implicitevidence$723:kantan.csv.CellEncoder[A4],implicitevidence$724:kantan.csv.CellDecoder[A4],implicitevidence$725:kantan.csv.CellEncoder[A5],implicitevidence$726:kantan.csv.CellDecoder[A5],implicitevidence$727:kantan.csv.CellEncoder[A6],implicitevidence$728:kantan.csv.CellDecoder[A6],implicitevidence$729:kantan.csv.CellEncoder[A7],implicitevidence$730:kantan.csv.CellDecoder[A7],implicitevidence$731:kantan.csv.CellEncoder[A8],implicitevidence$732:kantan.csv.CellDecoder[A8],implicitevidence$733:kantan.csv.CellEncoder[A9],implicitevidence$734:kantan.csv.CellDecoder[A9],implicitevidence$735:kantan.csv.CellEncoder[A10],implicitevidence$736:kantan.csv.CellDecoder[A10],implicitevidence$737:kantan.csv.CellEncoder[A11],implicitevidence$738:kantan.csv.CellDecoder[A11],implicitevidence$739:kantan.csv.CellEncoder[A12],implicitevidence$740:kantan.csv.CellDecoder[A12],implicitevidence$741:kantan.csv.CellEncoder[A13],implicitevidence$742:kantan.csv.CellDecoder[A13],implicitevidence$743:kantan.csv.CellEncoder[A14],implicitevidence$744:kantan.csv.CellDecoder[A14],implicitevidence$745:kantan.csv.CellEncoder[A15],implicitevidence$746:kantan.csv.CellDecoder[A15]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$689:kantan.csv.CellEncoder[A1],implicitevidence$690:kantan.csv.CellDecoder[A1],implicitevidence$691:kantan.csv.CellEncoder[A2],implicitevidence$692:kantan.csv.CellDecoder[A2],implicitevidence$693:kantan.csv.CellEncoder[A3],implicitevidence$694:kantan.csv.CellDecoder[A3],implicitevidence$695:kantan.csv.CellEncoder[A4],implicitevidence$696:kantan.csv.CellDecoder[A4],implicitevidence$697:kantan.csv.CellEncoder[A5],implicitevidence$698:kantan.csv.CellDecoder[A5],implicitevidence$699:kantan.csv.CellEncoder[A6],implicitevidence$700:kantan.csv.CellDecoder[A6],implicitevidence$701:kantan.csv.CellEncoder[A7],implicitevidence$702:kantan.csv.CellDecoder[A7],implicitevidence$703:kantan.csv.CellEncoder[A8],implicitevidence$704:kantan.csv.CellDecoder[A8],implicitevidence$705:kantan.csv.CellEncoder[A9],implicitevidence$706:kantan.csv.CellDecoder[A9],implicitevidence$707:kantan.csv.CellEncoder[A10],implicitevidence$708:kantan.csv.CellDecoder[A10],implicitevidence$709:kantan.csv.CellEncoder[A11],implicitevidence$710:kantan.csv.CellDecoder[A11],implicitevidence$711:kantan.csv.CellEncoder[A12],implicitevidence$712:kantan.csv.CellDecoder[A12],implicitevidence$713:kantan.csv.CellEncoder[A13],implicitevidence$714:kantan.csv.CellDecoder[A13],implicitevidence$715:kantan.csv.CellEncoder[A14],implicitevidence$716:kantan.csv.CellDecoder[A14]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$663:kantan.csv.CellEncoder[A1],implicitevidence$664:kantan.csv.CellDecoder[A1],implicitevidence$665:kantan.csv.CellEncoder[A2],implicitevidence$666:kantan.csv.CellDecoder[A2],implicitevidence$667:kantan.csv.CellEncoder[A3],implicitevidence$668:kantan.csv.CellDecoder[A3],implicitevidence$669:kantan.csv.CellEncoder[A4],implicitevidence$670:kantan.csv.CellDecoder[A4],implicitevidence$671:kantan.csv.CellEncoder[A5],implicitevidence$672:kantan.csv.CellDecoder[A5],implicitevidence$673:kantan.csv.CellEncoder[A6],implicitevidence$674:kantan.csv.CellDecoder[A6],implicitevidence$675:kantan.csv.CellEncoder[A7],implicitevidence$676:kantan.csv.CellDecoder[A7],implicitevidence$677:kantan.csv.CellEncoder[A8],implicitevidence$678:kantan.csv.CellDecoder[A8],implicitevidence$679:kantan.csv.CellEncoder[A9],implicitevidence$680:kantan.csv.CellDecoder[A9],implicitevidence$681:kantan.csv.CellEncoder[A10],implicitevidence$682:kantan.csv.CellDecoder[A10],implicitevidence$683:kantan.csv.CellEncoder[A11],implicitevidence$684:kantan.csv.CellDecoder[A11],implicitevidence$685:kantan.csv.CellEncoder[A12],implicitevidence$686:kantan.csv.CellDecoder[A12],implicitevidence$687:kantan.csv.CellEncoder[A13],implicitevidence$688:kantan.csv.CellDecoder[A13]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$639:kantan.csv.CellEncoder[A1],implicitevidence$640:kantan.csv.CellDecoder[A1],implicitevidence$641:kantan.csv.CellEncoder[A2],implicitevidence$642:kantan.csv.CellDecoder[A2],implicitevidence$643:kantan.csv.CellEncoder[A3],implicitevidence$644:kantan.csv.CellDecoder[A3],implicitevidence$645:kantan.csv.CellEncoder[A4],implicitevidence$646:kantan.csv.CellDecoder[A4],implicitevidence$647:kantan.csv.CellEncoder[A5],implicitevidence$648:kantan.csv.CellDecoder[A5],implicitevidence$649:kantan.csv.CellEncoder[A6],implicitevidence$650:kantan.csv.CellDecoder[A6],implicitevidence$651:kantan.csv.CellEncoder[A7],implicitevidence$652:kantan.csv.CellDecoder[A7],implicitevidence$653:kantan.csv.CellEncoder[A8],implicitevidence$654:kantan.csv.CellDecoder[A8],implicitevidence$655:kantan.csv.CellEncoder[A9],implicitevidence$656:kantan.csv.CellDecoder[A9],implicitevidence$657:kantan.csv.CellEncoder[A10],implicitevidence$658:kantan.csv.CellDecoder[A10],implicitevidence$659:kantan.csv.CellEncoder[A11],implicitevidence$660:kantan.csv.CellDecoder[A11],implicitevidence$661:kantan.csv.CellEncoder[A12],implicitevidence$662:kantan.csv.CellDecoder[A12]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$617:kantan.csv.CellEncoder[A1],implicitevidence$618:kantan.csv.CellDecoder[A1],implicitevidence$619:kantan.csv.CellEncoder[A2],implicitevidence$620:kantan.csv.CellDecoder[A2],implicitevidence$621:kantan.csv.CellEncoder[A3],implicitevidence$622:kantan.csv.CellDecoder[A3],implicitevidence$623:kantan.csv.CellEncoder[A4],implicitevidence$624:kantan.csv.CellDecoder[A4],implicitevidence$625:kantan.csv.CellEncoder[A5],implicitevidence$626:kantan.csv.CellDecoder[A5],implicitevidence$627:kantan.csv.CellEncoder[A6],implicitevidence$628:kantan.csv.CellDecoder[A6],implicitevidence$629:kantan.csv.CellEncoder[A7],implicitevidence$630:kantan.csv.CellDecoder[A7],implicitevidence$631:kantan.csv.CellEncoder[A8],implicitevidence$632:kantan.csv.CellDecoder[A8],implicitevidence$633:kantan.csv.CellEncoder[A9],implicitevidence$634:kantan.csv.CellDecoder[A9],implicitevidence$635:kantan.csv.CellEncoder[A10],implicitevidence$636:kantan.csv.CellDecoder[A10],implicitevidence$637:kantan.csv.CellEncoder[A11],implicitevidence$638:kantan.csv.CellDecoder[A11]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$597:kantan.csv.CellEncoder[A1],implicitevidence$598:kantan.csv.CellDecoder[A1],implicitevidence$599:kantan.csv.CellEncoder[A2],implicitevidence$600:kantan.csv.CellDecoder[A2],implicitevidence$601:kantan.csv.CellEncoder[A3],implicitevidence$602:kantan.csv.CellDecoder[A3],implicitevidence$603:kantan.csv.CellEncoder[A4],implicitevidence$604:kantan.csv.CellDecoder[A4],implicitevidence$605:kantan.csv.CellEncoder[A5],implicitevidence$606:kantan.csv.CellDecoder[A5],implicitevidence$607:kantan.csv.CellEncoder[A6],implicitevidence$608:kantan.csv.CellDecoder[A6],implicitevidence$609:kantan.csv.CellEncoder[A7],implicitevidence$610:kantan.csv.CellDecoder[A7],implicitevidence$611:kantan.csv.CellEncoder[A8],implicitevidence$612:kantan.csv.CellDecoder[A8],implicitevidence$613:kantan.csv.CellEncoder[A9],implicitevidence$614:kantan.csv.CellDecoder[A9],implicitevidence$615:kantan.csv.CellEncoder[A10],implicitevidence$616:kantan.csv.CellDecoder[A10]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$579:kantan.csv.CellEncoder[A1],implicitevidence$580:kantan.csv.CellDecoder[A1],implicitevidence$581:kantan.csv.CellEncoder[A2],implicitevidence$582:kantan.csv.CellDecoder[A2],implicitevidence$583:kantan.csv.CellEncoder[A3],implicitevidence$584:kantan.csv.CellDecoder[A3],implicitevidence$585:kantan.csv.CellEncoder[A4],implicitevidence$586:kantan.csv.CellDecoder[A4],implicitevidence$587:kantan.csv.CellEncoder[A5],implicitevidence$588:kantan.csv.CellDecoder[A5],implicitevidence$589:kantan.csv.CellEncoder[A6],implicitevidence$590:kantan.csv.CellDecoder[A6],implicitevidence$591:kantan.csv.CellEncoder[A7],implicitevidence$592:kantan.csv.CellDecoder[A7],implicitevidence$593:kantan.csv.CellEncoder[A8],implicitevidence$594:kantan.csv.CellDecoder[A8],implicitevidence$595:kantan.csv.CellEncoder[A9],implicitevidence$596:kantan.csv.CellDecoder[A9]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8](f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$563:kantan.csv.CellEncoder[A1],implicitevidence$564:kantan.csv.CellDecoder[A1],implicitevidence$565:kantan.csv.CellEncoder[A2],implicitevidence$566:kantan.csv.CellDecoder[A2],implicitevidence$567:kantan.csv.CellEncoder[A3],implicitevidence$568:kantan.csv.CellDecoder[A3],implicitevidence$569:kantan.csv.CellEncoder[A4],implicitevidence$570:kantan.csv.CellDecoder[A4],implicitevidence$571:kantan.csv.CellEncoder[A5],implicitevidence$572:kantan.csv.CellDecoder[A5],implicitevidence$573:kantan.csv.CellEncoder[A6],implicitevidence$574:kantan.csv.CellDecoder[A6],implicitevidence$575:kantan.csv.CellEncoder[A7],implicitevidence$576:kantan.csv.CellDecoder[A7],implicitevidence$577:kantan.csv.CellEncoder[A8],implicitevidence$578:kantan.csv.CellDecoder[A8]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6,A7](f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$549:kantan.csv.CellEncoder[A1],implicitevidence$550:kantan.csv.CellDecoder[A1],implicitevidence$551:kantan.csv.CellEncoder[A2],implicitevidence$552:kantan.csv.CellDecoder[A2],implicitevidence$553:kantan.csv.CellEncoder[A3],implicitevidence$554:kantan.csv.CellDecoder[A3],implicitevidence$555:kantan.csv.CellEncoder[A4],implicitevidence$556:kantan.csv.CellDecoder[A4],implicitevidence$557:kantan.csv.CellEncoder[A5],implicitevidence$558:kantan.csv.CellDecoder[A5],implicitevidence$559:kantan.csv.CellEncoder[A6],implicitevidence$560:kantan.csv.CellDecoder[A6],implicitevidence$561:kantan.csv.CellEncoder[A7],implicitevidence$562:kantan.csv.CellDecoder[A7]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5,A6](f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$537:kantan.csv.CellEncoder[A1],implicitevidence$538:kantan.csv.CellDecoder[A1],implicitevidence$539:kantan.csv.CellEncoder[A2],implicitevidence$540:kantan.csv.CellDecoder[A2],implicitevidence$541:kantan.csv.CellEncoder[A3],implicitevidence$542:kantan.csv.CellDecoder[A3],implicitevidence$543:kantan.csv.CellEncoder[A4],implicitevidence$544:kantan.csv.CellDecoder[A4],implicitevidence$545:kantan.csv.CellEncoder[A5],implicitevidence$546:kantan.csv.CellDecoder[A5],implicitevidence$547:kantan.csv.CellEncoder[A6],implicitevidence$548:kantan.csv.CellDecoder[A6]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5) => C)(g: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4,A5](f:(A1,A2,A3,A4,A5)=>C)(g:C=>(A1,A2,A3,A4,A5))(implicitevidence$527:kantan.csv.CellEncoder[A1],implicitevidence$528:kantan.csv.CellDecoder[A1],implicitevidence$529:kantan.csv.CellEncoder[A2],implicitevidence$530:kantan.csv.CellDecoder[A2],implicitevidence$531:kantan.csv.CellEncoder[A3],implicitevidence$532:kantan.csv.CellDecoder[A3],implicitevidence$533:kantan.csv.CellEncoder[A4],implicitevidence$534:kantan.csv.CellDecoder[A4],implicitevidence$535:kantan.csv.CellEncoder[A5],implicitevidence$536:kantan.csv.CellDecoder[A5]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4) => C)(g: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3,A4](f:(A1,A2,A3,A4)=>C)(g:C=>(A1,A2,A3,A4))(implicitevidence$519:kantan.csv.CellEncoder[A1],implicitevidence$520:kantan.csv.CellDecoder[A1],implicitevidence$521:kantan.csv.CellEncoder[A2],implicitevidence$522:kantan.csv.CellDecoder[A2],implicitevidence$523:kantan.csv.CellEncoder[A3],implicitevidence$524:kantan.csv.CellDecoder[A3],implicitevidence$525:kantan.csv.CellEncoder[A4],implicitevidence$526:kantan.csv.CellDecoder[A4]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3) => C)(g: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2,A3](f:(A1,A2,A3)=>C)(g:C=>(A1,A2,A3))(implicitevidence$513:kantan.csv.CellEncoder[A1],implicitevidence$514:kantan.csv.CellDecoder[A1],implicitevidence$515:kantan.csv.CellEncoder[A2],implicitevidence$516:kantan.csv.CellDecoder[A2],implicitevidence$517:kantan.csv.CellEncoder[A3],implicitevidence$518:kantan.csv.CellDecoder[A3]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2) => C)(g: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1,A2](f:(A1,A2)=>C)(g:C=>(A1,A2))(implicitevidence$509:kantan.csv.CellEncoder[A1],implicitevidence$510:kantan.csv.CellDecoder[A1],implicitevidence$511:kantan.csv.CellEncoder[A2],implicitevidence$512:kantan.csv.CellDecoder[A2]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1) => C)(g: (C) => A1)(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ordered[C,A1](f:A1=>C)(g:C=>A1)(implicitevidence$507:kantan.csv.CellEncoder[A1],implicitevidence$508:kantan.csv.CellDecoder[A1]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$463:kantan.csv.CellEncoder[A1],implicitevidence$464:kantan.csv.CellDecoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellDecoder[A2],implicitevidence$467:kantan.csv.CellEncoder[A3],implicitevidence$468:kantan.csv.CellDecoder[A3],implicitevidence$469:kantan.csv.CellEncoder[A4],implicitevidence$470:kantan.csv.CellDecoder[A4],implicitevidence$471:kantan.csv.CellEncoder[A5],implicitevidence$472:kantan.csv.CellDecoder[A5],implicitevidence$473:kantan.csv.CellEncoder[A6],implicitevidence$474:kantan.csv.CellDecoder[A6],implicitevidence$475:kantan.csv.CellEncoder[A7],implicitevidence$476:kantan.csv.CellDecoder[A7],implicitevidence$477:kantan.csv.CellEncoder[A8],implicitevidence$478:kantan.csv.CellDecoder[A8],implicitevidence$479:kantan.csv.CellEncoder[A9],implicitevidence$480:kantan.csv.CellDecoder[A9],implicitevidence$481:kantan.csv.CellEncoder[A10],implicitevidence$482:kantan.csv.CellDecoder[A10],implicitevidence$483:kantan.csv.CellEncoder[A11],implicitevidence$484:kantan.csv.CellDecoder[A11],implicitevidence$485:kantan.csv.CellEncoder[A12],implicitevidence$486:kantan.csv.CellDecoder[A12],implicitevidence$487:kantan.csv.CellEncoder[A13],implicitevidence$488:kantan.csv.CellDecoder[A13],implicitevidence$489:kantan.csv.CellEncoder[A14],implicitevidence$490:kantan.csv.CellDecoder[A14],implicitevidence$491:kantan.csv.CellEncoder[A15],implicitevidence$492:kantan.csv.CellDecoder[A15],implicitevidence$493:kantan.csv.CellEncoder[A16],implicitevidence$494:kantan.csv.CellDecoder[A16],implicitevidence$495:kantan.csv.CellEncoder[A17],implicitevidence$496:kantan.csv.CellDecoder[A17],implicitevidence$497:kantan.csv.CellEncoder[A18],implicitevidence$498:kantan.csv.CellDecoder[A18],implicitevidence$499:kantan.csv.CellEncoder[A19],implicitevidence$500:kantan.csv.CellDecoder[A19],implicitevidence$501:kantan.csv.CellEncoder[A20],implicitevidence$502:kantan.csv.CellDecoder[A20],implicitevidence$503:kantan.csv.CellEncoder[A21],implicitevidence$504:kantan.csv.CellDecoder[A21],implicitevidence$505:kantan.csv.CellEncoder[A22],implicitevidence$506:kantan.csv.CellDecoder[A22]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$421:kantan.csv.CellEncoder[A1],implicitevidence$422:kantan.csv.CellDecoder[A1],implicitevidence$423:kantan.csv.CellEncoder[A2],implicitevidence$424:kantan.csv.CellDecoder[A2],implicitevidence$425:kantan.csv.CellEncoder[A3],implicitevidence$426:kantan.csv.CellDecoder[A3],implicitevidence$427:kantan.csv.CellEncoder[A4],implicitevidence$428:kantan.csv.CellDecoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellDecoder[A5],implicitevidence$431:kantan.csv.CellEncoder[A6],implicitevidence$432:kantan.csv.CellDecoder[A6],implicitevidence$433:kantan.csv.CellEncoder[A7],implicitevidence$434:kantan.csv.CellDecoder[A7],implicitevidence$435:kantan.csv.CellEncoder[A8],implicitevidence$436:kantan.csv.CellDecoder[A8],implicitevidence$437:kantan.csv.CellEncoder[A9],implicitevidence$438:kantan.csv.CellDecoder[A9],implicitevidence$439:kantan.csv.CellEncoder[A10],implicitevidence$440:kantan.csv.CellDecoder[A10],implicitevidence$441:kantan.csv.CellEncoder[A11],implicitevidence$442:kantan.csv.CellDecoder[A11],implicitevidence$443:kantan.csv.CellEncoder[A12],implicitevidence$444:kantan.csv.CellDecoder[A12],implicitevidence$445:kantan.csv.CellEncoder[A13],implicitevidence$446:kantan.csv.CellDecoder[A13],implicitevidence$447:kantan.csv.CellEncoder[A14],implicitevidence$448:kantan.csv.CellDecoder[A14],implicitevidence$449:kantan.csv.CellEncoder[A15],implicitevidence$450:kantan.csv.CellDecoder[A15],implicitevidence$451:kantan.csv.CellEncoder[A16],implicitevidence$452:kantan.csv.CellDecoder[A16],implicitevidence$453:kantan.csv.CellEncoder[A17],implicitevidence$454:kantan.csv.CellDecoder[A17],implicitevidence$455:kantan.csv.CellEncoder[A18],implicitevidence$456:kantan.csv.CellDecoder[A18],implicitevidence$457:kantan.csv.CellEncoder[A19],implicitevidence$458:kantan.csv.CellDecoder[A19],implicitevidence$459:kantan.csv.CellEncoder[A20],implicitevidence$460:kantan.csv.CellDecoder[A20],implicitevidence$461:kantan.csv.CellEncoder[A21],implicitevidence$462:kantan.csv.CellDecoder[A21]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$381:kantan.csv.CellEncoder[A1],implicitevidence$382:kantan.csv.CellDecoder[A1],implicitevidence$383:kantan.csv.CellEncoder[A2],implicitevidence$384:kantan.csv.CellDecoder[A2],implicitevidence$385:kantan.csv.CellEncoder[A3],implicitevidence$386:kantan.csv.CellDecoder[A3],implicitevidence$387:kantan.csv.CellEncoder[A4],implicitevidence$388:kantan.csv.CellDecoder[A4],implicitevidence$389:kantan.csv.CellEncoder[A5],implicitevidence$390:kantan.csv.CellDecoder[A5],implicitevidence$391:kantan.csv.CellEncoder[A6],implicitevidence$392:kantan.csv.CellDecoder[A6],implicitevidence$393:kantan.csv.CellEncoder[A7],implicitevidence$394:kantan.csv.CellDecoder[A7],implicitevidence$395:kantan.csv.CellEncoder[A8],implicitevidence$396:kantan.csv.CellDecoder[A8],implicitevidence$397:kantan.csv.CellEncoder[A9],implicitevidence$398:kantan.csv.CellDecoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellDecoder[A10],implicitevidence$401:kantan.csv.CellEncoder[A11],implicitevidence$402:kantan.csv.CellDecoder[A11],implicitevidence$403:kantan.csv.CellEncoder[A12],implicitevidence$404:kantan.csv.CellDecoder[A12],implicitevidence$405:kantan.csv.CellEncoder[A13],implicitevidence$406:kantan.csv.CellDecoder[A13],implicitevidence$407:kantan.csv.CellEncoder[A14],implicitevidence$408:kantan.csv.CellDecoder[A14],implicitevidence$409:kantan.csv.CellEncoder[A15],implicitevidence$410:kantan.csv.CellDecoder[A15],implicitevidence$411:kantan.csv.CellEncoder[A16],implicitevidence$412:kantan.csv.CellDecoder[A16],implicitevidence$413:kantan.csv.CellEncoder[A17],implicitevidence$414:kantan.csv.CellDecoder[A17],implicitevidence$415:kantan.csv.CellEncoder[A18],implicitevidence$416:kantan.csv.CellDecoder[A18],implicitevidence$417:kantan.csv.CellEncoder[A19],implicitevidence$418:kantan.csv.CellDecoder[A19],implicitevidence$419:kantan.csv.CellEncoder[A20],implicitevidence$420:kantan.csv.CellDecoder[A20]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$343:kantan.csv.CellEncoder[A1],implicitevidence$344:kantan.csv.CellDecoder[A1],implicitevidence$345:kantan.csv.CellEncoder[A2],implicitevidence$346:kantan.csv.CellDecoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellDecoder[A3],implicitevidence$349:kantan.csv.CellEncoder[A4],implicitevidence$350:kantan.csv.CellDecoder[A4],implicitevidence$351:kantan.csv.CellEncoder[A5],implicitevidence$352:kantan.csv.CellDecoder[A5],implicitevidence$353:kantan.csv.CellEncoder[A6],implicitevidence$354:kantan.csv.CellDecoder[A6],implicitevidence$355:kantan.csv.CellEncoder[A7],implicitevidence$356:kantan.csv.CellDecoder[A7],implicitevidence$357:kantan.csv.CellEncoder[A8],implicitevidence$358:kantan.csv.CellDecoder[A8],implicitevidence$359:kantan.csv.CellEncoder[A9],implicitevidence$360:kantan.csv.CellDecoder[A9],implicitevidence$361:kantan.csv.CellEncoder[A10],implicitevidence$362:kantan.csv.CellDecoder[A10],implicitevidence$363:kantan.csv.CellEncoder[A11],implicitevidence$364:kantan.csv.CellDecoder[A11],implicitevidence$365:kantan.csv.CellEncoder[A12],implicitevidence$366:kantan.csv.CellDecoder[A12],implicitevidence$367:kantan.csv.CellEncoder[A13],implicitevidence$368:kantan.csv.CellDecoder[A13],implicitevidence$369:kantan.csv.CellEncoder[A14],implicitevidence$370:kantan.csv.CellDecoder[A14],implicitevidence$371:kantan.csv.CellEncoder[A15],implicitevidence$372:kantan.csv.CellDecoder[A15],implicitevidence$373:kantan.csv.CellEncoder[A16],implicitevidence$374:kantan.csv.CellDecoder[A16],implicitevidence$375:kantan.csv.CellEncoder[A17],implicitevidence$376:kantan.csv.CellDecoder[A17],implicitevidence$377:kantan.csv.CellEncoder[A18],implicitevidence$378:kantan.csv.CellDecoder[A18],implicitevidence$379:kantan.csv.CellEncoder[A19],implicitevidence$380:kantan.csv.CellDecoder[A19]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$307:kantan.csv.CellEncoder[A1],implicitevidence$308:kantan.csv.CellDecoder[A1],implicitevidence$309:kantan.csv.CellEncoder[A2],implicitevidence$310:kantan.csv.CellDecoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellDecoder[A3],implicitevidence$313:kantan.csv.CellEncoder[A4],implicitevidence$314:kantan.csv.CellDecoder[A4],implicitevidence$315:kantan.csv.CellEncoder[A5],implicitevidence$316:kantan.csv.CellDecoder[A5],implicitevidence$317:kantan.csv.CellEncoder[A6],implicitevidence$318:kantan.csv.CellDecoder[A6],implicitevidence$319:kantan.csv.CellEncoder[A7],implicitevidence$320:kantan.csv.CellDecoder[A7],implicitevidence$321:kantan.csv.CellEncoder[A8],implicitevidence$322:kantan.csv.CellDecoder[A8],implicitevidence$323:kantan.csv.CellEncoder[A9],implicitevidence$324:kantan.csv.CellDecoder[A9],implicitevidence$325:kantan.csv.CellEncoder[A10],implicitevidence$326:kantan.csv.CellDecoder[A10],implicitevidence$327:kantan.csv.CellEncoder[A11],implicitevidence$328:kantan.csv.CellDecoder[A11],implicitevidence$329:kantan.csv.CellEncoder[A12],implicitevidence$330:kantan.csv.CellDecoder[A12],implicitevidence$331:kantan.csv.CellEncoder[A13],implicitevidence$332:kantan.csv.CellDecoder[A13],implicitevidence$333:kantan.csv.CellEncoder[A14],implicitevidence$334:kantan.csv.CellDecoder[A14],implicitevidence$335:kantan.csv.CellEncoder[A15],implicitevidence$336:kantan.csv.CellDecoder[A15],implicitevidence$337:kantan.csv.CellEncoder[A16],implicitevidence$338:kantan.csv.CellDecoder[A16],implicitevidence$339:kantan.csv.CellEncoder[A17],implicitevidence$340:kantan.csv.CellDecoder[A17],implicitevidence$341:kantan.csv.CellEncoder[A18],implicitevidence$342:kantan.csv.CellDecoder[A18]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$273:kantan.csv.CellEncoder[A1],implicitevidence$274:kantan.csv.CellDecoder[A1],implicitevidence$275:kantan.csv.CellEncoder[A2],implicitevidence$276:kantan.csv.CellDecoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellDecoder[A3],implicitevidence$279:kantan.csv.CellEncoder[A4],implicitevidence$280:kantan.csv.CellDecoder[A4],implicitevidence$281:kantan.csv.CellEncoder[A5],implicitevidence$282:kantan.csv.CellDecoder[A5],implicitevidence$283:kantan.csv.CellEncoder[A6],implicitevidence$284:kantan.csv.CellDecoder[A6],implicitevidence$285:kantan.csv.CellEncoder[A7],implicitevidence$286:kantan.csv.CellDecoder[A7],implicitevidence$287:kantan.csv.CellEncoder[A8],implicitevidence$288:kantan.csv.CellDecoder[A8],implicitevidence$289:kantan.csv.CellEncoder[A9],implicitevidence$290:kantan.csv.CellDecoder[A9],implicitevidence$291:kantan.csv.CellEncoder[A10],implicitevidence$292:kantan.csv.CellDecoder[A10],implicitevidence$293:kantan.csv.CellEncoder[A11],implicitevidence$294:kantan.csv.CellDecoder[A11],implicitevidence$295:kantan.csv.CellEncoder[A12],implicitevidence$296:kantan.csv.CellDecoder[A12],implicitevidence$297:kantan.csv.CellEncoder[A13],implicitevidence$298:kantan.csv.CellDecoder[A13],implicitevidence$299:kantan.csv.CellEncoder[A14],implicitevidence$300:kantan.csv.CellDecoder[A14],implicitevidence$301:kantan.csv.CellEncoder[A15],implicitevidence$302:kantan.csv.CellDecoder[A15],implicitevidence$303:kantan.csv.CellEncoder[A16],implicitevidence$304:kantan.csv.CellDecoder[A16],implicitevidence$305:kantan.csv.CellEncoder[A17],implicitevidence$306:kantan.csv.CellDecoder[A17]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$241:kantan.csv.CellEncoder[A1],implicitevidence$242:kantan.csv.CellDecoder[A1],implicitevidence$243:kantan.csv.CellEncoder[A2],implicitevidence$244:kantan.csv.CellDecoder[A2],implicitevidence$245:kantan.csv.CellEncoder[A3],implicitevidence$246:kantan.csv.CellDecoder[A3],implicitevidence$247:kantan.csv.CellEncoder[A4],implicitevidence$248:kantan.csv.CellDecoder[A4],implicitevidence$249:kantan.csv.CellEncoder[A5],implicitevidence$250:kantan.csv.CellDecoder[A5],implicitevidence$251:kantan.csv.CellEncoder[A6],implicitevidence$252:kantan.csv.CellDecoder[A6],implicitevidence$253:kantan.csv.CellEncoder[A7],implicitevidence$254:kantan.csv.CellDecoder[A7],implicitevidence$255:kantan.csv.CellEncoder[A8],implicitevidence$256:kantan.csv.CellDecoder[A8],implicitevidence$257:kantan.csv.CellEncoder[A9],implicitevidence$258:kantan.csv.CellDecoder[A9],implicitevidence$259:kantan.csv.CellEncoder[A10],implicitevidence$260:kantan.csv.CellDecoder[A10],implicitevidence$261:kantan.csv.CellEncoder[A11],implicitevidence$262:kantan.csv.CellDecoder[A11],implicitevidence$263:kantan.csv.CellEncoder[A12],implicitevidence$264:kantan.csv.CellDecoder[A12],implicitevidence$265:kantan.csv.CellEncoder[A13],implicitevidence$266:kantan.csv.CellDecoder[A13],implicitevidence$267:kantan.csv.CellEncoder[A14],implicitevidence$268:kantan.csv.CellDecoder[A14],implicitevidence$269:kantan.csv.CellEncoder[A15],implicitevidence$270:kantan.csv.CellDecoder[A15],implicitevidence$271:kantan.csv.CellEncoder[A16],implicitevidence$272:kantan.csv.CellDecoder[A16]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$211:kantan.csv.CellEncoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A1],implicitevidence$213:kantan.csv.CellEncoder[A2],implicitevidence$214:kantan.csv.CellDecoder[A2],implicitevidence$215:kantan.csv.CellEncoder[A3],implicitevidence$216:kantan.csv.CellDecoder[A3],implicitevidence$217:kantan.csv.CellEncoder[A4],implicitevidence$218:kantan.csv.CellDecoder[A4],implicitevidence$219:kantan.csv.CellEncoder[A5],implicitevidence$220:kantan.csv.CellDecoder[A5],implicitevidence$221:kantan.csv.CellEncoder[A6],implicitevidence$222:kantan.csv.CellDecoder[A6],implicitevidence$223:kantan.csv.CellEncoder[A7],implicitevidence$224:kantan.csv.CellDecoder[A7],implicitevidence$225:kantan.csv.CellEncoder[A8],implicitevidence$226:kantan.csv.CellDecoder[A8],implicitevidence$227:kantan.csv.CellEncoder[A9],implicitevidence$228:kantan.csv.CellDecoder[A9],implicitevidence$229:kantan.csv.CellEncoder[A10],implicitevidence$230:kantan.csv.CellDecoder[A10],implicitevidence$231:kantan.csv.CellEncoder[A11],implicitevidence$232:kantan.csv.CellDecoder[A11],implicitevidence$233:kantan.csv.CellEncoder[A12],implicitevidence$234:kantan.csv.CellDecoder[A12],implicitevidence$235:kantan.csv.CellEncoder[A13],implicitevidence$236:kantan.csv.CellDecoder[A13],implicitevidence$237:kantan.csv.CellEncoder[A14],implicitevidence$238:kantan.csv.CellDecoder[A14],implicitevidence$239:kantan.csv.CellEncoder[A15],implicitevidence$240:kantan.csv.CellDecoder[A15]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$183:kantan.csv.CellEncoder[A1],implicitevidence$184:kantan.csv.CellDecoder[A1],implicitevidence$185:kantan.csv.CellEncoder[A2],implicitevidence$186:kantan.csv.CellDecoder[A2],implicitevidence$187:kantan.csv.CellEncoder[A3],implicitevidence$188:kantan.csv.CellDecoder[A3],implicitevidence$189:kantan.csv.CellEncoder[A4],implicitevidence$190:kantan.csv.CellDecoder[A4],implicitevidence$191:kantan.csv.CellEncoder[A5],implicitevidence$192:kantan.csv.CellDecoder[A5],implicitevidence$193:kantan.csv.CellEncoder[A6],implicitevidence$194:kantan.csv.CellDecoder[A6],implicitevidence$195:kantan.csv.CellEncoder[A7],implicitevidence$196:kantan.csv.CellDecoder[A7],implicitevidence$197:kantan.csv.CellEncoder[A8],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellEncoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A9],implicitevidence$201:kantan.csv.CellEncoder[A10],implicitevidence$202:kantan.csv.CellDecoder[A10],implicitevidence$203:kantan.csv.CellEncoder[A11],implicitevidence$204:kantan.csv.CellDecoder[A11],implicitevidence$205:kantan.csv.CellEncoder[A12],implicitevidence$206:kantan.csv.CellDecoder[A12],implicitevidence$207:kantan.csv.CellEncoder[A13],implicitevidence$208:kantan.csv.CellDecoder[A13],implicitevidence$209:kantan.csv.CellEncoder[A14],implicitevidence$210:kantan.csv.CellDecoder[A14]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$157:kantan.csv.CellEncoder[A1],implicitevidence$158:kantan.csv.CellDecoder[A1],implicitevidence$159:kantan.csv.CellEncoder[A2],implicitevidence$160:kantan.csv.CellDecoder[A2],implicitevidence$161:kantan.csv.CellEncoder[A3],implicitevidence$162:kantan.csv.CellDecoder[A3],implicitevidence$163:kantan.csv.CellEncoder[A4],implicitevidence$164:kantan.csv.CellDecoder[A4],implicitevidence$165:kantan.csv.CellEncoder[A5],implicitevidence$166:kantan.csv.CellDecoder[A5],implicitevidence$167:kantan.csv.CellEncoder[A6],implicitevidence$168:kantan.csv.CellDecoder[A6],implicitevidence$169:kantan.csv.CellEncoder[A7],implicitevidence$170:kantan.csv.CellDecoder[A7],implicitevidence$171:kantan.csv.CellEncoder[A8],implicitevidence$172:kantan.csv.CellDecoder[A8],implicitevidence$173:kantan.csv.CellEncoder[A9],implicitevidence$174:kantan.csv.CellDecoder[A9],implicitevidence$175:kantan.csv.CellEncoder[A10],implicitevidence$176:kantan.csv.CellDecoder[A10],implicitevidence$177:kantan.csv.CellEncoder[A11],implicitevidence$178:kantan.csv.CellDecoder[A11],implicitevidence$179:kantan.csv.CellEncoder[A12],implicitevidence$180:kantan.csv.CellDecoder[A12],implicitevidence$181:kantan.csv.CellEncoder[A13],implicitevidence$182:kantan.csv.CellDecoder[A13]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$133:kantan.csv.CellEncoder[A1],implicitevidence$134:kantan.csv.CellDecoder[A1],implicitevidence$135:kantan.csv.CellEncoder[A2],implicitevidence$136:kantan.csv.CellDecoder[A2],implicitevidence$137:kantan.csv.CellEncoder[A3],implicitevidence$138:kantan.csv.CellDecoder[A3],implicitevidence$139:kantan.csv.CellEncoder[A4],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellEncoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A5],implicitevidence$143:kantan.csv.CellEncoder[A6],implicitevidence$144:kantan.csv.CellDecoder[A6],implicitevidence$145:kantan.csv.CellEncoder[A7],implicitevidence$146:kantan.csv.CellDecoder[A7],implicitevidence$147:kantan.csv.CellEncoder[A8],implicitevidence$148:kantan.csv.CellDecoder[A8],implicitevidence$149:kantan.csv.CellEncoder[A9],implicitevidence$150:kantan.csv.CellDecoder[A9],implicitevidence$151:kantan.csv.CellEncoder[A10],implicitevidence$152:kantan.csv.CellDecoder[A10],implicitevidence$153:kantan.csv.CellEncoder[A11],implicitevidence$154:kantan.csv.CellDecoder[A11],implicitevidence$155:kantan.csv.CellEncoder[A12],implicitevidence$156:kantan.csv.CellDecoder[A12]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$111:kantan.csv.CellEncoder[A1],implicitevidence$112:kantan.csv.CellDecoder[A1],implicitevidence$113:kantan.csv.CellEncoder[A2],implicitevidence$114:kantan.csv.CellDecoder[A2],implicitevidence$115:kantan.csv.CellEncoder[A3],implicitevidence$116:kantan.csv.CellDecoder[A3],implicitevidence$117:kantan.csv.CellEncoder[A4],implicitevidence$118:kantan.csv.CellDecoder[A4],implicitevidence$119:kantan.csv.CellEncoder[A5],implicitevidence$120:kantan.csv.CellDecoder[A5],implicitevidence$121:kantan.csv.CellEncoder[A6],implicitevidence$122:kantan.csv.CellDecoder[A6],implicitevidence$123:kantan.csv.CellEncoder[A7],implicitevidence$124:kantan.csv.CellDecoder[A7],implicitevidence$125:kantan.csv.CellEncoder[A8],implicitevidence$126:kantan.csv.CellDecoder[A8],implicitevidence$127:kantan.csv.CellEncoder[A9],implicitevidence$128:kantan.csv.CellDecoder[A9],implicitevidence$129:kantan.csv.CellEncoder[A10],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellEncoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A11]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$91:kantan.csv.CellEncoder[A1],implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellEncoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A2],implicitevidence$95:kantan.csv.CellEncoder[A3],implicitevidence$96:kantan.csv.CellDecoder[A3],implicitevidence$97:kantan.csv.CellEncoder[A4],implicitevidence$98:kantan.csv.CellDecoder[A4],implicitevidence$99:kantan.csv.CellEncoder[A5],implicitevidence$100:kantan.csv.CellDecoder[A5],implicitevidence$101:kantan.csv.CellEncoder[A6],implicitevidence$102:kantan.csv.CellDecoder[A6],implicitevidence$103:kantan.csv.CellEncoder[A7],implicitevidence$104:kantan.csv.CellDecoder[A7],implicitevidence$105:kantan.csv.CellEncoder[A8],implicitevidence$106:kantan.csv.CellDecoder[A8],implicitevidence$107:kantan.csv.CellEncoder[A9],implicitevidence$108:kantan.csv.CellDecoder[A9],implicitevidence$109:kantan.csv.CellEncoder[A10],implicitevidence$110:kantan.csv.CellDecoder[A10]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$73:kantan.csv.CellEncoder[A1],implicitevidence$74:kantan.csv.CellDecoder[A1],implicitevidence$75:kantan.csv.CellEncoder[A2],implicitevidence$76:kantan.csv.CellDecoder[A2],implicitevidence$77:kantan.csv.CellEncoder[A3],implicitevidence$78:kantan.csv.CellDecoder[A3],implicitevidence$79:kantan.csv.CellEncoder[A4],implicitevidence$80:kantan.csv.CellDecoder[A4],implicitevidence$81:kantan.csv.CellEncoder[A5],implicitevidence$82:kantan.csv.CellDecoder[A5],implicitevidence$83:kantan.csv.CellEncoder[A6],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellEncoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A7],implicitevidence$87:kantan.csv.CellEncoder[A8],implicitevidence$88:kantan.csv.CellDecoder[A8],implicitevidence$89:kantan.csv.CellEncoder[A9],implicitevidence$90:kantan.csv.CellDecoder[A9]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$57:kantan.csv.CellEncoder[A1],implicitevidence$58:kantan.csv.CellDecoder[A1],implicitevidence$59:kantan.csv.CellEncoder[A2],implicitevidence$60:kantan.csv.CellDecoder[A2],implicitevidence$61:kantan.csv.CellEncoder[A3],implicitevidence$62:kantan.csv.CellDecoder[A3],implicitevidence$63:kantan.csv.CellEncoder[A4],implicitevidence$64:kantan.csv.CellDecoder[A4],implicitevidence$65:kantan.csv.CellEncoder[A5],implicitevidence$66:kantan.csv.CellDecoder[A5],implicitevidence$67:kantan.csv.CellEncoder[A6],implicitevidence$68:kantan.csv.CellDecoder[A6],implicitevidence$69:kantan.csv.CellEncoder[A7],implicitevidence$70:kantan.csv.CellDecoder[A7],implicitevidence$71:kantan.csv.CellEncoder[A8],implicitevidence$72:kantan.csv.CellDecoder[A8]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$43:kantan.csv.CellEncoder[A1],implicitevidence$44:kantan.csv.CellDecoder[A1],implicitevidence$45:kantan.csv.CellEncoder[A2],implicitevidence$46:kantan.csv.CellDecoder[A2],implicitevidence$47:kantan.csv.CellEncoder[A3],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellEncoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A4],implicitevidence$51:kantan.csv.CellEncoder[A5],implicitevidence$52:kantan.csv.CellDecoder[A5],implicitevidence$53:kantan.csv.CellEncoder[A6],implicitevidence$54:kantan.csv.CellDecoder[A6],implicitevidence$55:kantan.csv.CellEncoder[A7],implicitevidence$56:kantan.csv.CellDecoder[A7]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$31:kantan.csv.CellEncoder[A1],implicitevidence$32:kantan.csv.CellDecoder[A1],implicitevidence$33:kantan.csv.CellEncoder[A2],implicitevidence$34:kantan.csv.CellDecoder[A2],implicitevidence$35:kantan.csv.CellEncoder[A3],implicitevidence$36:kantan.csv.CellDecoder[A3],implicitevidence$37:kantan.csv.CellEncoder[A4],implicitevidence$38:kantan.csv.CellDecoder[A4],implicitevidence$39:kantan.csv.CellEncoder[A5],implicitevidence$40:kantan.csv.CellDecoder[A5],implicitevidence$41:kantan.csv.CellEncoder[A6],implicitevidence$42:kantan.csv.CellDecoder[A6]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (A1, A2, A3, A4, A5) => C)(g: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:(A1,A2,A3,A4,A5)=>C)(g:C=>(A1,A2,A3,A4,A5))(implicitevidence$21:kantan.csv.CellEncoder[A1],implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellEncoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A2],implicitevidence$25:kantan.csv.CellEncoder[A3],implicitevidence$26:kantan.csv.CellDecoder[A3],implicitevidence$27:kantan.csv.CellEncoder[A4],implicitevidence$28:kantan.csv.CellDecoder[A4],implicitevidence$29:kantan.csv.CellEncoder[A5],implicitevidence$30:kantan.csv.CellDecoder[A5]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (A1, A2, A3, A4) => C)(g: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(f:(A1,A2,A3,A4)=>C)(g:C=>(A1,A2,A3,A4))(implicitevidence$13:kantan.csv.CellEncoder[A1],implicitevidence$14:kantan.csv.CellDecoder[A1],implicitevidence$15:kantan.csv.CellEncoder[A2],implicitevidence$16:kantan.csv.CellDecoder[A2],implicitevidence$17:kantan.csv.CellEncoder[A3],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellEncoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A4]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (A1, A2, A3) => C)(g: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2,A3](i1:Int,i2:Int,i3:Int)(f:(A1,A2,A3)=>C)(g:C=>(A1,A2,A3))(implicitevidence$7:kantan.csv.CellEncoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A1],implicitevidence$9:kantan.csv.CellEncoder[A2],implicitevidence$10:kantan.csv.CellDecoder[A2],implicitevidence$11:kantan.csv.CellEncoder[A3],implicitevidence$12:kantan.csv.CellDecoder[A3]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int)(f: (A1, A2) => C)(g: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1,A2](i1:Int,i2:Int)(f:(A1,A2)=>C)(g:C=>(A1,A2))(implicitevidence$3:kantan.csv.CellEncoder[A1],implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellEncoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A2]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f: (A1) => C)(g: (C) => A1)(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/GeneratedRowCodecs.html#codec[C,A1](f:A1=>C)(g:C=>A1)(implicitevidence$1:kantan.csv.CellEncoder[A1],implicitevidence$2:kantan.csv.CellDecoder[A1]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/GeneratedRowCodecs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/GeneratedRowCodecs.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/GeneratedRowCodecs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/GeneratedRowCodecs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/GeneratedRowCodecs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/GeneratedRowCodecs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/GeneratedRowCodecs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowCodecs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowCodecs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowCodecs.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/GeneratedRowCodecs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/GeneratedRowCodecs.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/GeneratedRowCodecs.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/GeneratedRowCodecs.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/GeneratedRowCodecs.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/GeneratedRowCodecs.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/GeneratedRowCodecs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/GeneratedRowCodecs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/GeneratedRowCodecs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Defines RowDecoder instances for types with various arities."}, {"name" : "kantan.csv.GeneratedRowDecoders", "trait" : "kantan\/csv\/GeneratedRowDecoders.html", "kind" : "trait", "members_trait" : [{"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21], arg21: CellDecoder[A22]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>R)(implicitevidence$485:kantan.csv.CellDecoder[A1],implicitevidence$486:kantan.csv.CellDecoder[A2],implicitevidence$487:kantan.csv.CellDecoder[A3],implicitevidence$488:kantan.csv.CellDecoder[A4],implicitevidence$489:kantan.csv.CellDecoder[A5],implicitevidence$490:kantan.csv.CellDecoder[A6],implicitevidence$491:kantan.csv.CellDecoder[A7],implicitevidence$492:kantan.csv.CellDecoder[A8],implicitevidence$493:kantan.csv.CellDecoder[A9],implicitevidence$494:kantan.csv.CellDecoder[A10],implicitevidence$495:kantan.csv.CellDecoder[A11],implicitevidence$496:kantan.csv.CellDecoder[A12],implicitevidence$497:kantan.csv.CellDecoder[A13],implicitevidence$498:kantan.csv.CellDecoder[A14],implicitevidence$499:kantan.csv.CellDecoder[A15],implicitevidence$500:kantan.csv.CellDecoder[A16],implicitevidence$501:kantan.csv.CellDecoder[A17],implicitevidence$502:kantan.csv.CellDecoder[A18],implicitevidence$503:kantan.csv.CellDecoder[A19],implicitevidence$504:kantan.csv.CellDecoder[A20],implicitevidence$505:kantan.csv.CellDecoder[A21],implicitevidence$506:kantan.csv.CellDecoder[A22]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>R)(implicitevidence$464:kantan.csv.CellDecoder[A1],implicitevidence$465:kantan.csv.CellDecoder[A2],implicitevidence$466:kantan.csv.CellDecoder[A3],implicitevidence$467:kantan.csv.CellDecoder[A4],implicitevidence$468:kantan.csv.CellDecoder[A5],implicitevidence$469:kantan.csv.CellDecoder[A6],implicitevidence$470:kantan.csv.CellDecoder[A7],implicitevidence$471:kantan.csv.CellDecoder[A8],implicitevidence$472:kantan.csv.CellDecoder[A9],implicitevidence$473:kantan.csv.CellDecoder[A10],implicitevidence$474:kantan.csv.CellDecoder[A11],implicitevidence$475:kantan.csv.CellDecoder[A12],implicitevidence$476:kantan.csv.CellDecoder[A13],implicitevidence$477:kantan.csv.CellDecoder[A14],implicitevidence$478:kantan.csv.CellDecoder[A15],implicitevidence$479:kantan.csv.CellDecoder[A16],implicitevidence$480:kantan.csv.CellDecoder[A17],implicitevidence$481:kantan.csv.CellDecoder[A18],implicitevidence$482:kantan.csv.CellDecoder[A19],implicitevidence$483:kantan.csv.CellDecoder[A20],implicitevidence$484:kantan.csv.CellDecoder[A21]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>R)(implicitevidence$444:kantan.csv.CellDecoder[A1],implicitevidence$445:kantan.csv.CellDecoder[A2],implicitevidence$446:kantan.csv.CellDecoder[A3],implicitevidence$447:kantan.csv.CellDecoder[A4],implicitevidence$448:kantan.csv.CellDecoder[A5],implicitevidence$449:kantan.csv.CellDecoder[A6],implicitevidence$450:kantan.csv.CellDecoder[A7],implicitevidence$451:kantan.csv.CellDecoder[A8],implicitevidence$452:kantan.csv.CellDecoder[A9],implicitevidence$453:kantan.csv.CellDecoder[A10],implicitevidence$454:kantan.csv.CellDecoder[A11],implicitevidence$455:kantan.csv.CellDecoder[A12],implicitevidence$456:kantan.csv.CellDecoder[A13],implicitevidence$457:kantan.csv.CellDecoder[A14],implicitevidence$458:kantan.csv.CellDecoder[A15],implicitevidence$459:kantan.csv.CellDecoder[A16],implicitevidence$460:kantan.csv.CellDecoder[A17],implicitevidence$461:kantan.csv.CellDecoder[A18],implicitevidence$462:kantan.csv.CellDecoder[A19],implicitevidence$463:kantan.csv.CellDecoder[A20]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>R)(implicitevidence$425:kantan.csv.CellDecoder[A1],implicitevidence$426:kantan.csv.CellDecoder[A2],implicitevidence$427:kantan.csv.CellDecoder[A3],implicitevidence$428:kantan.csv.CellDecoder[A4],implicitevidence$429:kantan.csv.CellDecoder[A5],implicitevidence$430:kantan.csv.CellDecoder[A6],implicitevidence$431:kantan.csv.CellDecoder[A7],implicitevidence$432:kantan.csv.CellDecoder[A8],implicitevidence$433:kantan.csv.CellDecoder[A9],implicitevidence$434:kantan.csv.CellDecoder[A10],implicitevidence$435:kantan.csv.CellDecoder[A11],implicitevidence$436:kantan.csv.CellDecoder[A12],implicitevidence$437:kantan.csv.CellDecoder[A13],implicitevidence$438:kantan.csv.CellDecoder[A14],implicitevidence$439:kantan.csv.CellDecoder[A15],implicitevidence$440:kantan.csv.CellDecoder[A16],implicitevidence$441:kantan.csv.CellDecoder[A17],implicitevidence$442:kantan.csv.CellDecoder[A18],implicitevidence$443:kantan.csv.CellDecoder[A19]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>R)(implicitevidence$407:kantan.csv.CellDecoder[A1],implicitevidence$408:kantan.csv.CellDecoder[A2],implicitevidence$409:kantan.csv.CellDecoder[A3],implicitevidence$410:kantan.csv.CellDecoder[A4],implicitevidence$411:kantan.csv.CellDecoder[A5],implicitevidence$412:kantan.csv.CellDecoder[A6],implicitevidence$413:kantan.csv.CellDecoder[A7],implicitevidence$414:kantan.csv.CellDecoder[A8],implicitevidence$415:kantan.csv.CellDecoder[A9],implicitevidence$416:kantan.csv.CellDecoder[A10],implicitevidence$417:kantan.csv.CellDecoder[A11],implicitevidence$418:kantan.csv.CellDecoder[A12],implicitevidence$419:kantan.csv.CellDecoder[A13],implicitevidence$420:kantan.csv.CellDecoder[A14],implicitevidence$421:kantan.csv.CellDecoder[A15],implicitevidence$422:kantan.csv.CellDecoder[A16],implicitevidence$423:kantan.csv.CellDecoder[A17],implicitevidence$424:kantan.csv.CellDecoder[A18]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>R)(implicitevidence$390:kantan.csv.CellDecoder[A1],implicitevidence$391:kantan.csv.CellDecoder[A2],implicitevidence$392:kantan.csv.CellDecoder[A3],implicitevidence$393:kantan.csv.CellDecoder[A4],implicitevidence$394:kantan.csv.CellDecoder[A5],implicitevidence$395:kantan.csv.CellDecoder[A6],implicitevidence$396:kantan.csv.CellDecoder[A7],implicitevidence$397:kantan.csv.CellDecoder[A8],implicitevidence$398:kantan.csv.CellDecoder[A9],implicitevidence$399:kantan.csv.CellDecoder[A10],implicitevidence$400:kantan.csv.CellDecoder[A11],implicitevidence$401:kantan.csv.CellDecoder[A12],implicitevidence$402:kantan.csv.CellDecoder[A13],implicitevidence$403:kantan.csv.CellDecoder[A14],implicitevidence$404:kantan.csv.CellDecoder[A15],implicitevidence$405:kantan.csv.CellDecoder[A16],implicitevidence$406:kantan.csv.CellDecoder[A17]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>R)(implicitevidence$374:kantan.csv.CellDecoder[A1],implicitevidence$375:kantan.csv.CellDecoder[A2],implicitevidence$376:kantan.csv.CellDecoder[A3],implicitevidence$377:kantan.csv.CellDecoder[A4],implicitevidence$378:kantan.csv.CellDecoder[A5],implicitevidence$379:kantan.csv.CellDecoder[A6],implicitevidence$380:kantan.csv.CellDecoder[A7],implicitevidence$381:kantan.csv.CellDecoder[A8],implicitevidence$382:kantan.csv.CellDecoder[A9],implicitevidence$383:kantan.csv.CellDecoder[A10],implicitevidence$384:kantan.csv.CellDecoder[A11],implicitevidence$385:kantan.csv.CellDecoder[A12],implicitevidence$386:kantan.csv.CellDecoder[A13],implicitevidence$387:kantan.csv.CellDecoder[A14],implicitevidence$388:kantan.csv.CellDecoder[A15],implicitevidence$389:kantan.csv.CellDecoder[A16]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>R)(implicitevidence$359:kantan.csv.CellDecoder[A1],implicitevidence$360:kantan.csv.CellDecoder[A2],implicitevidence$361:kantan.csv.CellDecoder[A3],implicitevidence$362:kantan.csv.CellDecoder[A4],implicitevidence$363:kantan.csv.CellDecoder[A5],implicitevidence$364:kantan.csv.CellDecoder[A6],implicitevidence$365:kantan.csv.CellDecoder[A7],implicitevidence$366:kantan.csv.CellDecoder[A8],implicitevidence$367:kantan.csv.CellDecoder[A9],implicitevidence$368:kantan.csv.CellDecoder[A10],implicitevidence$369:kantan.csv.CellDecoder[A11],implicitevidence$370:kantan.csv.CellDecoder[A12],implicitevidence$371:kantan.csv.CellDecoder[A13],implicitevidence$372:kantan.csv.CellDecoder[A14],implicitevidence$373:kantan.csv.CellDecoder[A15]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>R)(implicitevidence$345:kantan.csv.CellDecoder[A1],implicitevidence$346:kantan.csv.CellDecoder[A2],implicitevidence$347:kantan.csv.CellDecoder[A3],implicitevidence$348:kantan.csv.CellDecoder[A4],implicitevidence$349:kantan.csv.CellDecoder[A5],implicitevidence$350:kantan.csv.CellDecoder[A6],implicitevidence$351:kantan.csv.CellDecoder[A7],implicitevidence$352:kantan.csv.CellDecoder[A8],implicitevidence$353:kantan.csv.CellDecoder[A9],implicitevidence$354:kantan.csv.CellDecoder[A10],implicitevidence$355:kantan.csv.CellDecoder[A11],implicitevidence$356:kantan.csv.CellDecoder[A12],implicitevidence$357:kantan.csv.CellDecoder[A13],implicitevidence$358:kantan.csv.CellDecoder[A14]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>R)(implicitevidence$332:kantan.csv.CellDecoder[A1],implicitevidence$333:kantan.csv.CellDecoder[A2],implicitevidence$334:kantan.csv.CellDecoder[A3],implicitevidence$335:kantan.csv.CellDecoder[A4],implicitevidence$336:kantan.csv.CellDecoder[A5],implicitevidence$337:kantan.csv.CellDecoder[A6],implicitevidence$338:kantan.csv.CellDecoder[A7],implicitevidence$339:kantan.csv.CellDecoder[A8],implicitevidence$340:kantan.csv.CellDecoder[A9],implicitevidence$341:kantan.csv.CellDecoder[A10],implicitevidence$342:kantan.csv.CellDecoder[A11],implicitevidence$343:kantan.csv.CellDecoder[A12],implicitevidence$344:kantan.csv.CellDecoder[A13]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>R)(implicitevidence$320:kantan.csv.CellDecoder[A1],implicitevidence$321:kantan.csv.CellDecoder[A2],implicitevidence$322:kantan.csv.CellDecoder[A3],implicitevidence$323:kantan.csv.CellDecoder[A4],implicitevidence$324:kantan.csv.CellDecoder[A5],implicitevidence$325:kantan.csv.CellDecoder[A6],implicitevidence$326:kantan.csv.CellDecoder[A7],implicitevidence$327:kantan.csv.CellDecoder[A8],implicitevidence$328:kantan.csv.CellDecoder[A9],implicitevidence$329:kantan.csv.CellDecoder[A10],implicitevidence$330:kantan.csv.CellDecoder[A11],implicitevidence$331:kantan.csv.CellDecoder[A12]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>R)(implicitevidence$309:kantan.csv.CellDecoder[A1],implicitevidence$310:kantan.csv.CellDecoder[A2],implicitevidence$311:kantan.csv.CellDecoder[A3],implicitevidence$312:kantan.csv.CellDecoder[A4],implicitevidence$313:kantan.csv.CellDecoder[A5],implicitevidence$314:kantan.csv.CellDecoder[A6],implicitevidence$315:kantan.csv.CellDecoder[A7],implicitevidence$316:kantan.csv.CellDecoder[A8],implicitevidence$317:kantan.csv.CellDecoder[A9],implicitevidence$318:kantan.csv.CellDecoder[A10],implicitevidence$319:kantan.csv.CellDecoder[A11]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>R)(implicitevidence$299:kantan.csv.CellDecoder[A1],implicitevidence$300:kantan.csv.CellDecoder[A2],implicitevidence$301:kantan.csv.CellDecoder[A3],implicitevidence$302:kantan.csv.CellDecoder[A4],implicitevidence$303:kantan.csv.CellDecoder[A5],implicitevidence$304:kantan.csv.CellDecoder[A6],implicitevidence$305:kantan.csv.CellDecoder[A7],implicitevidence$306:kantan.csv.CellDecoder[A8],implicitevidence$307:kantan.csv.CellDecoder[A9],implicitevidence$308:kantan.csv.CellDecoder[A10]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>R)(implicitevidence$290:kantan.csv.CellDecoder[A1],implicitevidence$291:kantan.csv.CellDecoder[A2],implicitevidence$292:kantan.csv.CellDecoder[A3],implicitevidence$293:kantan.csv.CellDecoder[A4],implicitevidence$294:kantan.csv.CellDecoder[A5],implicitevidence$295:kantan.csv.CellDecoder[A6],implicitevidence$296:kantan.csv.CellDecoder[A7],implicitevidence$297:kantan.csv.CellDecoder[A8],implicitevidence$298:kantan.csv.CellDecoder[A9]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,R](f:(A1,A2,A3,A4,A5,A6,A7,A8)=>R)(implicitevidence$282:kantan.csv.CellDecoder[A1],implicitevidence$283:kantan.csv.CellDecoder[A2],implicitevidence$284:kantan.csv.CellDecoder[A3],implicitevidence$285:kantan.csv.CellDecoder[A4],implicitevidence$286:kantan.csv.CellDecoder[A5],implicitevidence$287:kantan.csv.CellDecoder[A6],implicitevidence$288:kantan.csv.CellDecoder[A7],implicitevidence$289:kantan.csv.CellDecoder[A8]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,R](f:(A1,A2,A3,A4,A5,A6,A7)=>R)(implicitevidence$275:kantan.csv.CellDecoder[A1],implicitevidence$276:kantan.csv.CellDecoder[A2],implicitevidence$277:kantan.csv.CellDecoder[A3],implicitevidence$278:kantan.csv.CellDecoder[A4],implicitevidence$279:kantan.csv.CellDecoder[A5],implicitevidence$280:kantan.csv.CellDecoder[A6],implicitevidence$281:kantan.csv.CellDecoder[A7]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,A6,R](f:(A1,A2,A3,A4,A5,A6)=>R)(implicitevidence$269:kantan.csv.CellDecoder[A1],implicitevidence$270:kantan.csv.CellDecoder[A2],implicitevidence$271:kantan.csv.CellDecoder[A3],implicitevidence$272:kantan.csv.CellDecoder[A4],implicitevidence$273:kantan.csv.CellDecoder[A5],implicitevidence$274:kantan.csv.CellDecoder[A6]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,A5,R](f:(A1,A2,A3,A4,A5)=>R)(implicitevidence$264:kantan.csv.CellDecoder[A1],implicitevidence$265:kantan.csv.CellDecoder[A2],implicitevidence$266:kantan.csv.CellDecoder[A3],implicitevidence$267:kantan.csv.CellDecoder[A4],implicitevidence$268:kantan.csv.CellDecoder[A5]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,A4,R](f:(A1,A2,A3,A4)=>R)(implicitevidence$260:kantan.csv.CellDecoder[A1],implicitevidence$261:kantan.csv.CellDecoder[A2],implicitevidence$262:kantan.csv.CellDecoder[A3],implicitevidence$263:kantan.csv.CellDecoder[A4]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,A3,R](f:(A1,A2,A3)=>R)(implicitevidence$257:kantan.csv.CellDecoder[A1],implicitevidence$258:kantan.csv.CellDecoder[A2],implicitevidence$259:kantan.csv.CellDecoder[A3]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,A2,R](f:(A1,A2)=>R)(implicitevidence$255:kantan.csv.CellDecoder[A1],implicitevidence$256:kantan.csv.CellDecoder[A2]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1) => R)(arg0: CellDecoder[A1]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ordered[A1,R](f:A1=>R)(implicitevidence$254:kantan.csv.CellDecoder[A1]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21], arg21: CellDecoder[A22]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>R)(implicitevidence$232:kantan.csv.CellDecoder[A1],implicitevidence$233:kantan.csv.CellDecoder[A2],implicitevidence$234:kantan.csv.CellDecoder[A3],implicitevidence$235:kantan.csv.CellDecoder[A4],implicitevidence$236:kantan.csv.CellDecoder[A5],implicitevidence$237:kantan.csv.CellDecoder[A6],implicitevidence$238:kantan.csv.CellDecoder[A7],implicitevidence$239:kantan.csv.CellDecoder[A8],implicitevidence$240:kantan.csv.CellDecoder[A9],implicitevidence$241:kantan.csv.CellDecoder[A10],implicitevidence$242:kantan.csv.CellDecoder[A11],implicitevidence$243:kantan.csv.CellDecoder[A12],implicitevidence$244:kantan.csv.CellDecoder[A13],implicitevidence$245:kantan.csv.CellDecoder[A14],implicitevidence$246:kantan.csv.CellDecoder[A15],implicitevidence$247:kantan.csv.CellDecoder[A16],implicitevidence$248:kantan.csv.CellDecoder[A17],implicitevidence$249:kantan.csv.CellDecoder[A18],implicitevidence$250:kantan.csv.CellDecoder[A19],implicitevidence$251:kantan.csv.CellDecoder[A20],implicitevidence$252:kantan.csv.CellDecoder[A21],implicitevidence$253:kantan.csv.CellDecoder[A22]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>R)(implicitevidence$211:kantan.csv.CellDecoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A2],implicitevidence$213:kantan.csv.CellDecoder[A3],implicitevidence$214:kantan.csv.CellDecoder[A4],implicitevidence$215:kantan.csv.CellDecoder[A5],implicitevidence$216:kantan.csv.CellDecoder[A6],implicitevidence$217:kantan.csv.CellDecoder[A7],implicitevidence$218:kantan.csv.CellDecoder[A8],implicitevidence$219:kantan.csv.CellDecoder[A9],implicitevidence$220:kantan.csv.CellDecoder[A10],implicitevidence$221:kantan.csv.CellDecoder[A11],implicitevidence$222:kantan.csv.CellDecoder[A12],implicitevidence$223:kantan.csv.CellDecoder[A13],implicitevidence$224:kantan.csv.CellDecoder[A14],implicitevidence$225:kantan.csv.CellDecoder[A15],implicitevidence$226:kantan.csv.CellDecoder[A16],implicitevidence$227:kantan.csv.CellDecoder[A17],implicitevidence$228:kantan.csv.CellDecoder[A18],implicitevidence$229:kantan.csv.CellDecoder[A19],implicitevidence$230:kantan.csv.CellDecoder[A20],implicitevidence$231:kantan.csv.CellDecoder[A21]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>R)(implicitevidence$191:kantan.csv.CellDecoder[A1],implicitevidence$192:kantan.csv.CellDecoder[A2],implicitevidence$193:kantan.csv.CellDecoder[A3],implicitevidence$194:kantan.csv.CellDecoder[A4],implicitevidence$195:kantan.csv.CellDecoder[A5],implicitevidence$196:kantan.csv.CellDecoder[A6],implicitevidence$197:kantan.csv.CellDecoder[A7],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellDecoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A10],implicitevidence$201:kantan.csv.CellDecoder[A11],implicitevidence$202:kantan.csv.CellDecoder[A12],implicitevidence$203:kantan.csv.CellDecoder[A13],implicitevidence$204:kantan.csv.CellDecoder[A14],implicitevidence$205:kantan.csv.CellDecoder[A15],implicitevidence$206:kantan.csv.CellDecoder[A16],implicitevidence$207:kantan.csv.CellDecoder[A17],implicitevidence$208:kantan.csv.CellDecoder[A18],implicitevidence$209:kantan.csv.CellDecoder[A19],implicitevidence$210:kantan.csv.CellDecoder[A20]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>R)(implicitevidence$172:kantan.csv.CellDecoder[A1],implicitevidence$173:kantan.csv.CellDecoder[A2],implicitevidence$174:kantan.csv.CellDecoder[A3],implicitevidence$175:kantan.csv.CellDecoder[A4],implicitevidence$176:kantan.csv.CellDecoder[A5],implicitevidence$177:kantan.csv.CellDecoder[A6],implicitevidence$178:kantan.csv.CellDecoder[A7],implicitevidence$179:kantan.csv.CellDecoder[A8],implicitevidence$180:kantan.csv.CellDecoder[A9],implicitevidence$181:kantan.csv.CellDecoder[A10],implicitevidence$182:kantan.csv.CellDecoder[A11],implicitevidence$183:kantan.csv.CellDecoder[A12],implicitevidence$184:kantan.csv.CellDecoder[A13],implicitevidence$185:kantan.csv.CellDecoder[A14],implicitevidence$186:kantan.csv.CellDecoder[A15],implicitevidence$187:kantan.csv.CellDecoder[A16],implicitevidence$188:kantan.csv.CellDecoder[A17],implicitevidence$189:kantan.csv.CellDecoder[A18],implicitevidence$190:kantan.csv.CellDecoder[A19]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>R)(implicitevidence$154:kantan.csv.CellDecoder[A1],implicitevidence$155:kantan.csv.CellDecoder[A2],implicitevidence$156:kantan.csv.CellDecoder[A3],implicitevidence$157:kantan.csv.CellDecoder[A4],implicitevidence$158:kantan.csv.CellDecoder[A5],implicitevidence$159:kantan.csv.CellDecoder[A6],implicitevidence$160:kantan.csv.CellDecoder[A7],implicitevidence$161:kantan.csv.CellDecoder[A8],implicitevidence$162:kantan.csv.CellDecoder[A9],implicitevidence$163:kantan.csv.CellDecoder[A10],implicitevidence$164:kantan.csv.CellDecoder[A11],implicitevidence$165:kantan.csv.CellDecoder[A12],implicitevidence$166:kantan.csv.CellDecoder[A13],implicitevidence$167:kantan.csv.CellDecoder[A14],implicitevidence$168:kantan.csv.CellDecoder[A15],implicitevidence$169:kantan.csv.CellDecoder[A16],implicitevidence$170:kantan.csv.CellDecoder[A17],implicitevidence$171:kantan.csv.CellDecoder[A18]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>R)(implicitevidence$137:kantan.csv.CellDecoder[A1],implicitevidence$138:kantan.csv.CellDecoder[A2],implicitevidence$139:kantan.csv.CellDecoder[A3],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellDecoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A6],implicitevidence$143:kantan.csv.CellDecoder[A7],implicitevidence$144:kantan.csv.CellDecoder[A8],implicitevidence$145:kantan.csv.CellDecoder[A9],implicitevidence$146:kantan.csv.CellDecoder[A10],implicitevidence$147:kantan.csv.CellDecoder[A11],implicitevidence$148:kantan.csv.CellDecoder[A12],implicitevidence$149:kantan.csv.CellDecoder[A13],implicitevidence$150:kantan.csv.CellDecoder[A14],implicitevidence$151:kantan.csv.CellDecoder[A15],implicitevidence$152:kantan.csv.CellDecoder[A16],implicitevidence$153:kantan.csv.CellDecoder[A17]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>R)(implicitevidence$121:kantan.csv.CellDecoder[A1],implicitevidence$122:kantan.csv.CellDecoder[A2],implicitevidence$123:kantan.csv.CellDecoder[A3],implicitevidence$124:kantan.csv.CellDecoder[A4],implicitevidence$125:kantan.csv.CellDecoder[A5],implicitevidence$126:kantan.csv.CellDecoder[A6],implicitevidence$127:kantan.csv.CellDecoder[A7],implicitevidence$128:kantan.csv.CellDecoder[A8],implicitevidence$129:kantan.csv.CellDecoder[A9],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellDecoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A12],implicitevidence$133:kantan.csv.CellDecoder[A13],implicitevidence$134:kantan.csv.CellDecoder[A14],implicitevidence$135:kantan.csv.CellDecoder[A15],implicitevidence$136:kantan.csv.CellDecoder[A16]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>R)(implicitevidence$106:kantan.csv.CellDecoder[A1],implicitevidence$107:kantan.csv.CellDecoder[A2],implicitevidence$108:kantan.csv.CellDecoder[A3],implicitevidence$109:kantan.csv.CellDecoder[A4],implicitevidence$110:kantan.csv.CellDecoder[A5],implicitevidence$111:kantan.csv.CellDecoder[A6],implicitevidence$112:kantan.csv.CellDecoder[A7],implicitevidence$113:kantan.csv.CellDecoder[A8],implicitevidence$114:kantan.csv.CellDecoder[A9],implicitevidence$115:kantan.csv.CellDecoder[A10],implicitevidence$116:kantan.csv.CellDecoder[A11],implicitevidence$117:kantan.csv.CellDecoder[A12],implicitevidence$118:kantan.csv.CellDecoder[A13],implicitevidence$119:kantan.csv.CellDecoder[A14],implicitevidence$120:kantan.csv.CellDecoder[A15]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>R)(implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellDecoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A3],implicitevidence$95:kantan.csv.CellDecoder[A4],implicitevidence$96:kantan.csv.CellDecoder[A5],implicitevidence$97:kantan.csv.CellDecoder[A6],implicitevidence$98:kantan.csv.CellDecoder[A7],implicitevidence$99:kantan.csv.CellDecoder[A8],implicitevidence$100:kantan.csv.CellDecoder[A9],implicitevidence$101:kantan.csv.CellDecoder[A10],implicitevidence$102:kantan.csv.CellDecoder[A11],implicitevidence$103:kantan.csv.CellDecoder[A12],implicitevidence$104:kantan.csv.CellDecoder[A13],implicitevidence$105:kantan.csv.CellDecoder[A14]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>R)(implicitevidence$79:kantan.csv.CellDecoder[A1],implicitevidence$80:kantan.csv.CellDecoder[A2],implicitevidence$81:kantan.csv.CellDecoder[A3],implicitevidence$82:kantan.csv.CellDecoder[A4],implicitevidence$83:kantan.csv.CellDecoder[A5],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellDecoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A8],implicitevidence$87:kantan.csv.CellDecoder[A9],implicitevidence$88:kantan.csv.CellDecoder[A10],implicitevidence$89:kantan.csv.CellDecoder[A11],implicitevidence$90:kantan.csv.CellDecoder[A12],implicitevidence$91:kantan.csv.CellDecoder[A13]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>R)(implicitevidence$67:kantan.csv.CellDecoder[A1],implicitevidence$68:kantan.csv.CellDecoder[A2],implicitevidence$69:kantan.csv.CellDecoder[A3],implicitevidence$70:kantan.csv.CellDecoder[A4],implicitevidence$71:kantan.csv.CellDecoder[A5],implicitevidence$72:kantan.csv.CellDecoder[A6],implicitevidence$73:kantan.csv.CellDecoder[A7],implicitevidence$74:kantan.csv.CellDecoder[A8],implicitevidence$75:kantan.csv.CellDecoder[A9],implicitevidence$76:kantan.csv.CellDecoder[A10],implicitevidence$77:kantan.csv.CellDecoder[A11],implicitevidence$78:kantan.csv.CellDecoder[A12]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>R)(implicitevidence$56:kantan.csv.CellDecoder[A1],implicitevidence$57:kantan.csv.CellDecoder[A2],implicitevidence$58:kantan.csv.CellDecoder[A3],implicitevidence$59:kantan.csv.CellDecoder[A4],implicitevidence$60:kantan.csv.CellDecoder[A5],implicitevidence$61:kantan.csv.CellDecoder[A6],implicitevidence$62:kantan.csv.CellDecoder[A7],implicitevidence$63:kantan.csv.CellDecoder[A8],implicitevidence$64:kantan.csv.CellDecoder[A9],implicitevidence$65:kantan.csv.CellDecoder[A10],implicitevidence$66:kantan.csv.CellDecoder[A11]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>R)(implicitevidence$46:kantan.csv.CellDecoder[A1],implicitevidence$47:kantan.csv.CellDecoder[A2],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellDecoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A5],implicitevidence$51:kantan.csv.CellDecoder[A6],implicitevidence$52:kantan.csv.CellDecoder[A7],implicitevidence$53:kantan.csv.CellDecoder[A8],implicitevidence$54:kantan.csv.CellDecoder[A9],implicitevidence$55:kantan.csv.CellDecoder[A10]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>R)(implicitevidence$37:kantan.csv.CellDecoder[A1],implicitevidence$38:kantan.csv.CellDecoder[A2],implicitevidence$39:kantan.csv.CellDecoder[A3],implicitevidence$40:kantan.csv.CellDecoder[A4],implicitevidence$41:kantan.csv.CellDecoder[A5],implicitevidence$42:kantan.csv.CellDecoder[A6],implicitevidence$43:kantan.csv.CellDecoder[A7],implicitevidence$44:kantan.csv.CellDecoder[A8],implicitevidence$45:kantan.csv.CellDecoder[A9]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>R)(implicitevidence$29:kantan.csv.CellDecoder[A1],implicitevidence$30:kantan.csv.CellDecoder[A2],implicitevidence$31:kantan.csv.CellDecoder[A3],implicitevidence$32:kantan.csv.CellDecoder[A4],implicitevidence$33:kantan.csv.CellDecoder[A5],implicitevidence$34:kantan.csv.CellDecoder[A6],implicitevidence$35:kantan.csv.CellDecoder[A7],implicitevidence$36:kantan.csv.CellDecoder[A8]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (A1, A2, A3, A4, A5, A6, A7) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:(A1,A2,A3,A4,A5,A6,A7)=>R)(implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellDecoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A3],implicitevidence$25:kantan.csv.CellDecoder[A4],implicitevidence$26:kantan.csv.CellDecoder[A5],implicitevidence$27:kantan.csv.CellDecoder[A6],implicitevidence$28:kantan.csv.CellDecoder[A7]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (A1, A2, A3, A4, A5, A6) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,A6,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:(A1,A2,A3,A4,A5,A6)=>R)(implicitevidence$16:kantan.csv.CellDecoder[A1],implicitevidence$17:kantan.csv.CellDecoder[A2],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellDecoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A5],implicitevidence$21:kantan.csv.CellDecoder[A6]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (A1, A2, A3, A4, A5) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,A5,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:(A1,A2,A3,A4,A5)=>R)(implicitevidence$11:kantan.csv.CellDecoder[A1],implicitevidence$12:kantan.csv.CellDecoder[A2],implicitevidence$13:kantan.csv.CellDecoder[A3],implicitevidence$14:kantan.csv.CellDecoder[A4],implicitevidence$15:kantan.csv.CellDecoder[A5]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (A1, A2, A3, A4) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,A4,R](i1:Int,i2:Int,i3:Int,i4:Int)(f:(A1,A2,A3,A4)=>R)(implicitevidence$7:kantan.csv.CellDecoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A2],implicitevidence$9:kantan.csv.CellDecoder[A3],implicitevidence$10:kantan.csv.CellDecoder[A4]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (A1, A2, A3) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,A3,R](i1:Int,i2:Int,i3:Int)(f:(A1,A2,A3)=>R)(implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellDecoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A3]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int)(f: (A1, A2) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,A2,R](i1:Int,i2:Int)(f:(A1,A2)=>R)(implicitevidence$2:kantan.csv.CellDecoder[A1],implicitevidence$3:kantan.csv.CellDecoder[A2]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int)(f: (A1) => R)(arg0: CellDecoder[A1]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/GeneratedRowDecoders.html#decoder[A1,R](i1:Int)(f:A1=>R)(implicitevidence$1:kantan.csv.CellDecoder[A1]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/GeneratedRowDecoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/GeneratedRowDecoders.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/GeneratedRowDecoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/GeneratedRowDecoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/GeneratedRowDecoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/GeneratedRowDecoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/GeneratedRowDecoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowDecoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowDecoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowDecoders.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/GeneratedRowDecoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/GeneratedRowDecoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/GeneratedRowDecoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/GeneratedRowDecoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/GeneratedRowDecoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/GeneratedRowDecoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/GeneratedRowDecoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/GeneratedRowDecoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/GeneratedRowDecoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides RowDecoder instance construction methods."}, {"name" : "kantan.csv.GeneratedRowEncoders", "trait" : "kantan\/csv\/GeneratedRowEncoders.html", "kind" : "trait", "members_trait" : [{"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$991:kantan.csv.CellEncoder[A1],implicitevidence$992:kantan.csv.CellEncoder[A2],implicitevidence$993:kantan.csv.CellEncoder[A3],implicitevidence$994:kantan.csv.CellEncoder[A4],implicitevidence$995:kantan.csv.CellEncoder[A5],implicitevidence$996:kantan.csv.CellEncoder[A6],implicitevidence$997:kantan.csv.CellEncoder[A7],implicitevidence$998:kantan.csv.CellEncoder[A8],implicitevidence$999:kantan.csv.CellEncoder[A9],implicitevidence$1000:kantan.csv.CellEncoder[A10],implicitevidence$1001:kantan.csv.CellEncoder[A11],implicitevidence$1002:kantan.csv.CellEncoder[A12],implicitevidence$1003:kantan.csv.CellEncoder[A13],implicitevidence$1004:kantan.csv.CellEncoder[A14],implicitevidence$1005:kantan.csv.CellEncoder[A15],implicitevidence$1006:kantan.csv.CellEncoder[A16],implicitevidence$1007:kantan.csv.CellEncoder[A17],implicitevidence$1008:kantan.csv.CellEncoder[A18],implicitevidence$1009:kantan.csv.CellEncoder[A19],implicitevidence$1010:kantan.csv.CellEncoder[A20],implicitevidence$1011:kantan.csv.CellEncoder[A21],implicitevidence$1012:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$970:kantan.csv.CellEncoder[A1],implicitevidence$971:kantan.csv.CellEncoder[A2],implicitevidence$972:kantan.csv.CellEncoder[A3],implicitevidence$973:kantan.csv.CellEncoder[A4],implicitevidence$974:kantan.csv.CellEncoder[A5],implicitevidence$975:kantan.csv.CellEncoder[A6],implicitevidence$976:kantan.csv.CellEncoder[A7],implicitevidence$977:kantan.csv.CellEncoder[A8],implicitevidence$978:kantan.csv.CellEncoder[A9],implicitevidence$979:kantan.csv.CellEncoder[A10],implicitevidence$980:kantan.csv.CellEncoder[A11],implicitevidence$981:kantan.csv.CellEncoder[A12],implicitevidence$982:kantan.csv.CellEncoder[A13],implicitevidence$983:kantan.csv.CellEncoder[A14],implicitevidence$984:kantan.csv.CellEncoder[A15],implicitevidence$985:kantan.csv.CellEncoder[A16],implicitevidence$986:kantan.csv.CellEncoder[A17],implicitevidence$987:kantan.csv.CellEncoder[A18],implicitevidence$988:kantan.csv.CellEncoder[A19],implicitevidence$989:kantan.csv.CellEncoder[A20],implicitevidence$990:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$950:kantan.csv.CellEncoder[A1],implicitevidence$951:kantan.csv.CellEncoder[A2],implicitevidence$952:kantan.csv.CellEncoder[A3],implicitevidence$953:kantan.csv.CellEncoder[A4],implicitevidence$954:kantan.csv.CellEncoder[A5],implicitevidence$955:kantan.csv.CellEncoder[A6],implicitevidence$956:kantan.csv.CellEncoder[A7],implicitevidence$957:kantan.csv.CellEncoder[A8],implicitevidence$958:kantan.csv.CellEncoder[A9],implicitevidence$959:kantan.csv.CellEncoder[A10],implicitevidence$960:kantan.csv.CellEncoder[A11],implicitevidence$961:kantan.csv.CellEncoder[A12],implicitevidence$962:kantan.csv.CellEncoder[A13],implicitevidence$963:kantan.csv.CellEncoder[A14],implicitevidence$964:kantan.csv.CellEncoder[A15],implicitevidence$965:kantan.csv.CellEncoder[A16],implicitevidence$966:kantan.csv.CellEncoder[A17],implicitevidence$967:kantan.csv.CellEncoder[A18],implicitevidence$968:kantan.csv.CellEncoder[A19],implicitevidence$969:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$931:kantan.csv.CellEncoder[A1],implicitevidence$932:kantan.csv.CellEncoder[A2],implicitevidence$933:kantan.csv.CellEncoder[A3],implicitevidence$934:kantan.csv.CellEncoder[A4],implicitevidence$935:kantan.csv.CellEncoder[A5],implicitevidence$936:kantan.csv.CellEncoder[A6],implicitevidence$937:kantan.csv.CellEncoder[A7],implicitevidence$938:kantan.csv.CellEncoder[A8],implicitevidence$939:kantan.csv.CellEncoder[A9],implicitevidence$940:kantan.csv.CellEncoder[A10],implicitevidence$941:kantan.csv.CellEncoder[A11],implicitevidence$942:kantan.csv.CellEncoder[A12],implicitevidence$943:kantan.csv.CellEncoder[A13],implicitevidence$944:kantan.csv.CellEncoder[A14],implicitevidence$945:kantan.csv.CellEncoder[A15],implicitevidence$946:kantan.csv.CellEncoder[A16],implicitevidence$947:kantan.csv.CellEncoder[A17],implicitevidence$948:kantan.csv.CellEncoder[A18],implicitevidence$949:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$913:kantan.csv.CellEncoder[A1],implicitevidence$914:kantan.csv.CellEncoder[A2],implicitevidence$915:kantan.csv.CellEncoder[A3],implicitevidence$916:kantan.csv.CellEncoder[A4],implicitevidence$917:kantan.csv.CellEncoder[A5],implicitevidence$918:kantan.csv.CellEncoder[A6],implicitevidence$919:kantan.csv.CellEncoder[A7],implicitevidence$920:kantan.csv.CellEncoder[A8],implicitevidence$921:kantan.csv.CellEncoder[A9],implicitevidence$922:kantan.csv.CellEncoder[A10],implicitevidence$923:kantan.csv.CellEncoder[A11],implicitevidence$924:kantan.csv.CellEncoder[A12],implicitevidence$925:kantan.csv.CellEncoder[A13],implicitevidence$926:kantan.csv.CellEncoder[A14],implicitevidence$927:kantan.csv.CellEncoder[A15],implicitevidence$928:kantan.csv.CellEncoder[A16],implicitevidence$929:kantan.csv.CellEncoder[A17],implicitevidence$930:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$896:kantan.csv.CellEncoder[A1],implicitevidence$897:kantan.csv.CellEncoder[A2],implicitevidence$898:kantan.csv.CellEncoder[A3],implicitevidence$899:kantan.csv.CellEncoder[A4],implicitevidence$900:kantan.csv.CellEncoder[A5],implicitevidence$901:kantan.csv.CellEncoder[A6],implicitevidence$902:kantan.csv.CellEncoder[A7],implicitevidence$903:kantan.csv.CellEncoder[A8],implicitevidence$904:kantan.csv.CellEncoder[A9],implicitevidence$905:kantan.csv.CellEncoder[A10],implicitevidence$906:kantan.csv.CellEncoder[A11],implicitevidence$907:kantan.csv.CellEncoder[A12],implicitevidence$908:kantan.csv.CellEncoder[A13],implicitevidence$909:kantan.csv.CellEncoder[A14],implicitevidence$910:kantan.csv.CellEncoder[A15],implicitevidence$911:kantan.csv.CellEncoder[A16],implicitevidence$912:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$880:kantan.csv.CellEncoder[A1],implicitevidence$881:kantan.csv.CellEncoder[A2],implicitevidence$882:kantan.csv.CellEncoder[A3],implicitevidence$883:kantan.csv.CellEncoder[A4],implicitevidence$884:kantan.csv.CellEncoder[A5],implicitevidence$885:kantan.csv.CellEncoder[A6],implicitevidence$886:kantan.csv.CellEncoder[A7],implicitevidence$887:kantan.csv.CellEncoder[A8],implicitevidence$888:kantan.csv.CellEncoder[A9],implicitevidence$889:kantan.csv.CellEncoder[A10],implicitevidence$890:kantan.csv.CellEncoder[A11],implicitevidence$891:kantan.csv.CellEncoder[A12],implicitevidence$892:kantan.csv.CellEncoder[A13],implicitevidence$893:kantan.csv.CellEncoder[A14],implicitevidence$894:kantan.csv.CellEncoder[A15],implicitevidence$895:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$865:kantan.csv.CellEncoder[A1],implicitevidence$866:kantan.csv.CellEncoder[A2],implicitevidence$867:kantan.csv.CellEncoder[A3],implicitevidence$868:kantan.csv.CellEncoder[A4],implicitevidence$869:kantan.csv.CellEncoder[A5],implicitevidence$870:kantan.csv.CellEncoder[A6],implicitevidence$871:kantan.csv.CellEncoder[A7],implicitevidence$872:kantan.csv.CellEncoder[A8],implicitevidence$873:kantan.csv.CellEncoder[A9],implicitevidence$874:kantan.csv.CellEncoder[A10],implicitevidence$875:kantan.csv.CellEncoder[A11],implicitevidence$876:kantan.csv.CellEncoder[A12],implicitevidence$877:kantan.csv.CellEncoder[A13],implicitevidence$878:kantan.csv.CellEncoder[A14],implicitevidence$879:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$851:kantan.csv.CellEncoder[A1],implicitevidence$852:kantan.csv.CellEncoder[A2],implicitevidence$853:kantan.csv.CellEncoder[A3],implicitevidence$854:kantan.csv.CellEncoder[A4],implicitevidence$855:kantan.csv.CellEncoder[A5],implicitevidence$856:kantan.csv.CellEncoder[A6],implicitevidence$857:kantan.csv.CellEncoder[A7],implicitevidence$858:kantan.csv.CellEncoder[A8],implicitevidence$859:kantan.csv.CellEncoder[A9],implicitevidence$860:kantan.csv.CellEncoder[A10],implicitevidence$861:kantan.csv.CellEncoder[A11],implicitevidence$862:kantan.csv.CellEncoder[A12],implicitevidence$863:kantan.csv.CellEncoder[A13],implicitevidence$864:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$838:kantan.csv.CellEncoder[A1],implicitevidence$839:kantan.csv.CellEncoder[A2],implicitevidence$840:kantan.csv.CellEncoder[A3],implicitevidence$841:kantan.csv.CellEncoder[A4],implicitevidence$842:kantan.csv.CellEncoder[A5],implicitevidence$843:kantan.csv.CellEncoder[A6],implicitevidence$844:kantan.csv.CellEncoder[A7],implicitevidence$845:kantan.csv.CellEncoder[A8],implicitevidence$846:kantan.csv.CellEncoder[A9],implicitevidence$847:kantan.csv.CellEncoder[A10],implicitevidence$848:kantan.csv.CellEncoder[A11],implicitevidence$849:kantan.csv.CellEncoder[A12],implicitevidence$850:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$826:kantan.csv.CellEncoder[A1],implicitevidence$827:kantan.csv.CellEncoder[A2],implicitevidence$828:kantan.csv.CellEncoder[A3],implicitevidence$829:kantan.csv.CellEncoder[A4],implicitevidence$830:kantan.csv.CellEncoder[A5],implicitevidence$831:kantan.csv.CellEncoder[A6],implicitevidence$832:kantan.csv.CellEncoder[A7],implicitevidence$833:kantan.csv.CellEncoder[A8],implicitevidence$834:kantan.csv.CellEncoder[A9],implicitevidence$835:kantan.csv.CellEncoder[A10],implicitevidence$836:kantan.csv.CellEncoder[A11],implicitevidence$837:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$815:kantan.csv.CellEncoder[A1],implicitevidence$816:kantan.csv.CellEncoder[A2],implicitevidence$817:kantan.csv.CellEncoder[A3],implicitevidence$818:kantan.csv.CellEncoder[A4],implicitevidence$819:kantan.csv.CellEncoder[A5],implicitevidence$820:kantan.csv.CellEncoder[A6],implicitevidence$821:kantan.csv.CellEncoder[A7],implicitevidence$822:kantan.csv.CellEncoder[A8],implicitevidence$823:kantan.csv.CellEncoder[A9],implicitevidence$824:kantan.csv.CellEncoder[A10],implicitevidence$825:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$805:kantan.csv.CellEncoder[A1],implicitevidence$806:kantan.csv.CellEncoder[A2],implicitevidence$807:kantan.csv.CellEncoder[A3],implicitevidence$808:kantan.csv.CellEncoder[A4],implicitevidence$809:kantan.csv.CellEncoder[A5],implicitevidence$810:kantan.csv.CellEncoder[A6],implicitevidence$811:kantan.csv.CellEncoder[A7],implicitevidence$812:kantan.csv.CellEncoder[A8],implicitevidence$813:kantan.csv.CellEncoder[A9],implicitevidence$814:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$796:kantan.csv.CellEncoder[A1],implicitevidence$797:kantan.csv.CellEncoder[A2],implicitevidence$798:kantan.csv.CellEncoder[A3],implicitevidence$799:kantan.csv.CellEncoder[A4],implicitevidence$800:kantan.csv.CellEncoder[A5],implicitevidence$801:kantan.csv.CellEncoder[A6],implicitevidence$802:kantan.csv.CellEncoder[A7],implicitevidence$803:kantan.csv.CellEncoder[A8],implicitevidence$804:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$788:kantan.csv.CellEncoder[A1],implicitevidence$789:kantan.csv.CellEncoder[A2],implicitevidence$790:kantan.csv.CellEncoder[A3],implicitevidence$791:kantan.csv.CellEncoder[A4],implicitevidence$792:kantan.csv.CellEncoder[A5],implicitevidence$793:kantan.csv.CellEncoder[A6],implicitevidence$794:kantan.csv.CellEncoder[A7],implicitevidence$795:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$781:kantan.csv.CellEncoder[A1],implicitevidence$782:kantan.csv.CellEncoder[A2],implicitevidence$783:kantan.csv.CellEncoder[A3],implicitevidence$784:kantan.csv.CellEncoder[A4],implicitevidence$785:kantan.csv.CellEncoder[A5],implicitevidence$786:kantan.csv.CellEncoder[A6],implicitevidence$787:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5,A6](f:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$775:kantan.csv.CellEncoder[A1],implicitevidence$776:kantan.csv.CellEncoder[A2],implicitevidence$777:kantan.csv.CellEncoder[A3],implicitevidence$778:kantan.csv.CellEncoder[A4],implicitevidence$779:kantan.csv.CellEncoder[A5],implicitevidence$780:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4,A5](f:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$770:kantan.csv.CellEncoder[A1],implicitevidence$771:kantan.csv.CellEncoder[A2],implicitevidence$772:kantan.csv.CellEncoder[A3],implicitevidence$773:kantan.csv.CellEncoder[A4],implicitevidence$774:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3,A4](f:C=>Option[(A1,A2,A3,A4)])(implicitevidence$766:kantan.csv.CellEncoder[A1],implicitevidence$767:kantan.csv.CellEncoder[A2],implicitevidence$768:kantan.csv.CellEncoder[A3],implicitevidence$769:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2,A3](f:C=>Option[(A1,A2,A3)])(implicitevidence$763:kantan.csv.CellEncoder[A1],implicitevidence$764:kantan.csv.CellEncoder[A2],implicitevidence$765:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1,A2](f:C=>Option[(A1,A2)])(implicitevidence$761:kantan.csv.CellEncoder[A1],implicitevidence$762:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[A1])(arg0: CellEncoder[A1]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseOrdered[C,A1](f:C=>Option[A1])(implicitevidence$760:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$738:kantan.csv.CellEncoder[A1],implicitevidence$739:kantan.csv.CellEncoder[A2],implicitevidence$740:kantan.csv.CellEncoder[A3],implicitevidence$741:kantan.csv.CellEncoder[A4],implicitevidence$742:kantan.csv.CellEncoder[A5],implicitevidence$743:kantan.csv.CellEncoder[A6],implicitevidence$744:kantan.csv.CellEncoder[A7],implicitevidence$745:kantan.csv.CellEncoder[A8],implicitevidence$746:kantan.csv.CellEncoder[A9],implicitevidence$747:kantan.csv.CellEncoder[A10],implicitevidence$748:kantan.csv.CellEncoder[A11],implicitevidence$749:kantan.csv.CellEncoder[A12],implicitevidence$750:kantan.csv.CellEncoder[A13],implicitevidence$751:kantan.csv.CellEncoder[A14],implicitevidence$752:kantan.csv.CellEncoder[A15],implicitevidence$753:kantan.csv.CellEncoder[A16],implicitevidence$754:kantan.csv.CellEncoder[A17],implicitevidence$755:kantan.csv.CellEncoder[A18],implicitevidence$756:kantan.csv.CellEncoder[A19],implicitevidence$757:kantan.csv.CellEncoder[A20],implicitevidence$758:kantan.csv.CellEncoder[A21],implicitevidence$759:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$717:kantan.csv.CellEncoder[A1],implicitevidence$718:kantan.csv.CellEncoder[A2],implicitevidence$719:kantan.csv.CellEncoder[A3],implicitevidence$720:kantan.csv.CellEncoder[A4],implicitevidence$721:kantan.csv.CellEncoder[A5],implicitevidence$722:kantan.csv.CellEncoder[A6],implicitevidence$723:kantan.csv.CellEncoder[A7],implicitevidence$724:kantan.csv.CellEncoder[A8],implicitevidence$725:kantan.csv.CellEncoder[A9],implicitevidence$726:kantan.csv.CellEncoder[A10],implicitevidence$727:kantan.csv.CellEncoder[A11],implicitevidence$728:kantan.csv.CellEncoder[A12],implicitevidence$729:kantan.csv.CellEncoder[A13],implicitevidence$730:kantan.csv.CellEncoder[A14],implicitevidence$731:kantan.csv.CellEncoder[A15],implicitevidence$732:kantan.csv.CellEncoder[A16],implicitevidence$733:kantan.csv.CellEncoder[A17],implicitevidence$734:kantan.csv.CellEncoder[A18],implicitevidence$735:kantan.csv.CellEncoder[A19],implicitevidence$736:kantan.csv.CellEncoder[A20],implicitevidence$737:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$697:kantan.csv.CellEncoder[A1],implicitevidence$698:kantan.csv.CellEncoder[A2],implicitevidence$699:kantan.csv.CellEncoder[A3],implicitevidence$700:kantan.csv.CellEncoder[A4],implicitevidence$701:kantan.csv.CellEncoder[A5],implicitevidence$702:kantan.csv.CellEncoder[A6],implicitevidence$703:kantan.csv.CellEncoder[A7],implicitevidence$704:kantan.csv.CellEncoder[A8],implicitevidence$705:kantan.csv.CellEncoder[A9],implicitevidence$706:kantan.csv.CellEncoder[A10],implicitevidence$707:kantan.csv.CellEncoder[A11],implicitevidence$708:kantan.csv.CellEncoder[A12],implicitevidence$709:kantan.csv.CellEncoder[A13],implicitevidence$710:kantan.csv.CellEncoder[A14],implicitevidence$711:kantan.csv.CellEncoder[A15],implicitevidence$712:kantan.csv.CellEncoder[A16],implicitevidence$713:kantan.csv.CellEncoder[A17],implicitevidence$714:kantan.csv.CellEncoder[A18],implicitevidence$715:kantan.csv.CellEncoder[A19],implicitevidence$716:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$678:kantan.csv.CellEncoder[A1],implicitevidence$679:kantan.csv.CellEncoder[A2],implicitevidence$680:kantan.csv.CellEncoder[A3],implicitevidence$681:kantan.csv.CellEncoder[A4],implicitevidence$682:kantan.csv.CellEncoder[A5],implicitevidence$683:kantan.csv.CellEncoder[A6],implicitevidence$684:kantan.csv.CellEncoder[A7],implicitevidence$685:kantan.csv.CellEncoder[A8],implicitevidence$686:kantan.csv.CellEncoder[A9],implicitevidence$687:kantan.csv.CellEncoder[A10],implicitevidence$688:kantan.csv.CellEncoder[A11],implicitevidence$689:kantan.csv.CellEncoder[A12],implicitevidence$690:kantan.csv.CellEncoder[A13],implicitevidence$691:kantan.csv.CellEncoder[A14],implicitevidence$692:kantan.csv.CellEncoder[A15],implicitevidence$693:kantan.csv.CellEncoder[A16],implicitevidence$694:kantan.csv.CellEncoder[A17],implicitevidence$695:kantan.csv.CellEncoder[A18],implicitevidence$696:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$660:kantan.csv.CellEncoder[A1],implicitevidence$661:kantan.csv.CellEncoder[A2],implicitevidence$662:kantan.csv.CellEncoder[A3],implicitevidence$663:kantan.csv.CellEncoder[A4],implicitevidence$664:kantan.csv.CellEncoder[A5],implicitevidence$665:kantan.csv.CellEncoder[A6],implicitevidence$666:kantan.csv.CellEncoder[A7],implicitevidence$667:kantan.csv.CellEncoder[A8],implicitevidence$668:kantan.csv.CellEncoder[A9],implicitevidence$669:kantan.csv.CellEncoder[A10],implicitevidence$670:kantan.csv.CellEncoder[A11],implicitevidence$671:kantan.csv.CellEncoder[A12],implicitevidence$672:kantan.csv.CellEncoder[A13],implicitevidence$673:kantan.csv.CellEncoder[A14],implicitevidence$674:kantan.csv.CellEncoder[A15],implicitevidence$675:kantan.csv.CellEncoder[A16],implicitevidence$676:kantan.csv.CellEncoder[A17],implicitevidence$677:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$643:kantan.csv.CellEncoder[A1],implicitevidence$644:kantan.csv.CellEncoder[A2],implicitevidence$645:kantan.csv.CellEncoder[A3],implicitevidence$646:kantan.csv.CellEncoder[A4],implicitevidence$647:kantan.csv.CellEncoder[A5],implicitevidence$648:kantan.csv.CellEncoder[A6],implicitevidence$649:kantan.csv.CellEncoder[A7],implicitevidence$650:kantan.csv.CellEncoder[A8],implicitevidence$651:kantan.csv.CellEncoder[A9],implicitevidence$652:kantan.csv.CellEncoder[A10],implicitevidence$653:kantan.csv.CellEncoder[A11],implicitevidence$654:kantan.csv.CellEncoder[A12],implicitevidence$655:kantan.csv.CellEncoder[A13],implicitevidence$656:kantan.csv.CellEncoder[A14],implicitevidence$657:kantan.csv.CellEncoder[A15],implicitevidence$658:kantan.csv.CellEncoder[A16],implicitevidence$659:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$627:kantan.csv.CellEncoder[A1],implicitevidence$628:kantan.csv.CellEncoder[A2],implicitevidence$629:kantan.csv.CellEncoder[A3],implicitevidence$630:kantan.csv.CellEncoder[A4],implicitevidence$631:kantan.csv.CellEncoder[A5],implicitevidence$632:kantan.csv.CellEncoder[A6],implicitevidence$633:kantan.csv.CellEncoder[A7],implicitevidence$634:kantan.csv.CellEncoder[A8],implicitevidence$635:kantan.csv.CellEncoder[A9],implicitevidence$636:kantan.csv.CellEncoder[A10],implicitevidence$637:kantan.csv.CellEncoder[A11],implicitevidence$638:kantan.csv.CellEncoder[A12],implicitevidence$639:kantan.csv.CellEncoder[A13],implicitevidence$640:kantan.csv.CellEncoder[A14],implicitevidence$641:kantan.csv.CellEncoder[A15],implicitevidence$642:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$612:kantan.csv.CellEncoder[A1],implicitevidence$613:kantan.csv.CellEncoder[A2],implicitevidence$614:kantan.csv.CellEncoder[A3],implicitevidence$615:kantan.csv.CellEncoder[A4],implicitevidence$616:kantan.csv.CellEncoder[A5],implicitevidence$617:kantan.csv.CellEncoder[A6],implicitevidence$618:kantan.csv.CellEncoder[A7],implicitevidence$619:kantan.csv.CellEncoder[A8],implicitevidence$620:kantan.csv.CellEncoder[A9],implicitevidence$621:kantan.csv.CellEncoder[A10],implicitevidence$622:kantan.csv.CellEncoder[A11],implicitevidence$623:kantan.csv.CellEncoder[A12],implicitevidence$624:kantan.csv.CellEncoder[A13],implicitevidence$625:kantan.csv.CellEncoder[A14],implicitevidence$626:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$598:kantan.csv.CellEncoder[A1],implicitevidence$599:kantan.csv.CellEncoder[A2],implicitevidence$600:kantan.csv.CellEncoder[A3],implicitevidence$601:kantan.csv.CellEncoder[A4],implicitevidence$602:kantan.csv.CellEncoder[A5],implicitevidence$603:kantan.csv.CellEncoder[A6],implicitevidence$604:kantan.csv.CellEncoder[A7],implicitevidence$605:kantan.csv.CellEncoder[A8],implicitevidence$606:kantan.csv.CellEncoder[A9],implicitevidence$607:kantan.csv.CellEncoder[A10],implicitevidence$608:kantan.csv.CellEncoder[A11],implicitevidence$609:kantan.csv.CellEncoder[A12],implicitevidence$610:kantan.csv.CellEncoder[A13],implicitevidence$611:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$585:kantan.csv.CellEncoder[A1],implicitevidence$586:kantan.csv.CellEncoder[A2],implicitevidence$587:kantan.csv.CellEncoder[A3],implicitevidence$588:kantan.csv.CellEncoder[A4],implicitevidence$589:kantan.csv.CellEncoder[A5],implicitevidence$590:kantan.csv.CellEncoder[A6],implicitevidence$591:kantan.csv.CellEncoder[A7],implicitevidence$592:kantan.csv.CellEncoder[A8],implicitevidence$593:kantan.csv.CellEncoder[A9],implicitevidence$594:kantan.csv.CellEncoder[A10],implicitevidence$595:kantan.csv.CellEncoder[A11],implicitevidence$596:kantan.csv.CellEncoder[A12],implicitevidence$597:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$573:kantan.csv.CellEncoder[A1],implicitevidence$574:kantan.csv.CellEncoder[A2],implicitevidence$575:kantan.csv.CellEncoder[A3],implicitevidence$576:kantan.csv.CellEncoder[A4],implicitevidence$577:kantan.csv.CellEncoder[A5],implicitevidence$578:kantan.csv.CellEncoder[A6],implicitevidence$579:kantan.csv.CellEncoder[A7],implicitevidence$580:kantan.csv.CellEncoder[A8],implicitevidence$581:kantan.csv.CellEncoder[A9],implicitevidence$582:kantan.csv.CellEncoder[A10],implicitevidence$583:kantan.csv.CellEncoder[A11],implicitevidence$584:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$562:kantan.csv.CellEncoder[A1],implicitevidence$563:kantan.csv.CellEncoder[A2],implicitevidence$564:kantan.csv.CellEncoder[A3],implicitevidence$565:kantan.csv.CellEncoder[A4],implicitevidence$566:kantan.csv.CellEncoder[A5],implicitevidence$567:kantan.csv.CellEncoder[A6],implicitevidence$568:kantan.csv.CellEncoder[A7],implicitevidence$569:kantan.csv.CellEncoder[A8],implicitevidence$570:kantan.csv.CellEncoder[A9],implicitevidence$571:kantan.csv.CellEncoder[A10],implicitevidence$572:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$552:kantan.csv.CellEncoder[A1],implicitevidence$553:kantan.csv.CellEncoder[A2],implicitevidence$554:kantan.csv.CellEncoder[A3],implicitevidence$555:kantan.csv.CellEncoder[A4],implicitevidence$556:kantan.csv.CellEncoder[A5],implicitevidence$557:kantan.csv.CellEncoder[A6],implicitevidence$558:kantan.csv.CellEncoder[A7],implicitevidence$559:kantan.csv.CellEncoder[A8],implicitevidence$560:kantan.csv.CellEncoder[A9],implicitevidence$561:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$543:kantan.csv.CellEncoder[A1],implicitevidence$544:kantan.csv.CellEncoder[A2],implicitevidence$545:kantan.csv.CellEncoder[A3],implicitevidence$546:kantan.csv.CellEncoder[A4],implicitevidence$547:kantan.csv.CellEncoder[A5],implicitevidence$548:kantan.csv.CellEncoder[A6],implicitevidence$549:kantan.csv.CellEncoder[A7],implicitevidence$550:kantan.csv.CellEncoder[A8],implicitevidence$551:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$535:kantan.csv.CellEncoder[A1],implicitevidence$536:kantan.csv.CellEncoder[A2],implicitevidence$537:kantan.csv.CellEncoder[A3],implicitevidence$538:kantan.csv.CellEncoder[A4],implicitevidence$539:kantan.csv.CellEncoder[A5],implicitevidence$540:kantan.csv.CellEncoder[A6],implicitevidence$541:kantan.csv.CellEncoder[A7],implicitevidence$542:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$528:kantan.csv.CellEncoder[A1],implicitevidence$529:kantan.csv.CellEncoder[A2],implicitevidence$530:kantan.csv.CellEncoder[A3],implicitevidence$531:kantan.csv.CellEncoder[A4],implicitevidence$532:kantan.csv.CellEncoder[A5],implicitevidence$533:kantan.csv.CellEncoder[A6],implicitevidence$534:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$522:kantan.csv.CellEncoder[A1],implicitevidence$523:kantan.csv.CellEncoder[A2],implicitevidence$524:kantan.csv.CellEncoder[A3],implicitevidence$525:kantan.csv.CellEncoder[A4],implicitevidence$526:kantan.csv.CellEncoder[A5],implicitevidence$527:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$517:kantan.csv.CellEncoder[A1],implicitevidence$518:kantan.csv.CellEncoder[A2],implicitevidence$519:kantan.csv.CellEncoder[A3],implicitevidence$520:kantan.csv.CellEncoder[A4],implicitevidence$521:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(f:C=>Option[(A1,A2,A3,A4)])(implicitevidence$513:kantan.csv.CellEncoder[A1],implicitevidence$514:kantan.csv.CellEncoder[A2],implicitevidence$515:kantan.csv.CellEncoder[A3],implicitevidence$516:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2,A3](i1:Int,i2:Int,i3:Int)(f:C=>Option[(A1,A2,A3)])(implicitevidence$510:kantan.csv.CellEncoder[A1],implicitevidence$511:kantan.csv.CellEncoder[A2],implicitevidence$512:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int)(f: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1,A2](i1:Int,i2:Int)(f:C=>Option[(A1,A2)])(implicitevidence$508:kantan.csv.CellEncoder[A1],implicitevidence$509:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f: (C) => Option[A1])(arg0: CellEncoder[A1]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#caseEncoder[C,A1](f:C=>Option[A1])(implicitevidence$507:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$485:kantan.csv.CellEncoder[A1],implicitevidence$486:kantan.csv.CellEncoder[A2],implicitevidence$487:kantan.csv.CellEncoder[A3],implicitevidence$488:kantan.csv.CellEncoder[A4],implicitevidence$489:kantan.csv.CellEncoder[A5],implicitevidence$490:kantan.csv.CellEncoder[A6],implicitevidence$491:kantan.csv.CellEncoder[A7],implicitevidence$492:kantan.csv.CellEncoder[A8],implicitevidence$493:kantan.csv.CellEncoder[A9],implicitevidence$494:kantan.csv.CellEncoder[A10],implicitevidence$495:kantan.csv.CellEncoder[A11],implicitevidence$496:kantan.csv.CellEncoder[A12],implicitevidence$497:kantan.csv.CellEncoder[A13],implicitevidence$498:kantan.csv.CellEncoder[A14],implicitevidence$499:kantan.csv.CellEncoder[A15],implicitevidence$500:kantan.csv.CellEncoder[A16],implicitevidence$501:kantan.csv.CellEncoder[A17],implicitevidence$502:kantan.csv.CellEncoder[A18],implicitevidence$503:kantan.csv.CellEncoder[A19],implicitevidence$504:kantan.csv.CellEncoder[A20],implicitevidence$505:kantan.csv.CellEncoder[A21],implicitevidence$506:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$464:kantan.csv.CellEncoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellEncoder[A3],implicitevidence$467:kantan.csv.CellEncoder[A4],implicitevidence$468:kantan.csv.CellEncoder[A5],implicitevidence$469:kantan.csv.CellEncoder[A6],implicitevidence$470:kantan.csv.CellEncoder[A7],implicitevidence$471:kantan.csv.CellEncoder[A8],implicitevidence$472:kantan.csv.CellEncoder[A9],implicitevidence$473:kantan.csv.CellEncoder[A10],implicitevidence$474:kantan.csv.CellEncoder[A11],implicitevidence$475:kantan.csv.CellEncoder[A12],implicitevidence$476:kantan.csv.CellEncoder[A13],implicitevidence$477:kantan.csv.CellEncoder[A14],implicitevidence$478:kantan.csv.CellEncoder[A15],implicitevidence$479:kantan.csv.CellEncoder[A16],implicitevidence$480:kantan.csv.CellEncoder[A17],implicitevidence$481:kantan.csv.CellEncoder[A18],implicitevidence$482:kantan.csv.CellEncoder[A19],implicitevidence$483:kantan.csv.CellEncoder[A20],implicitevidence$484:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$444:kantan.csv.CellEncoder[A1],implicitevidence$445:kantan.csv.CellEncoder[A2],implicitevidence$446:kantan.csv.CellEncoder[A3],implicitevidence$447:kantan.csv.CellEncoder[A4],implicitevidence$448:kantan.csv.CellEncoder[A5],implicitevidence$449:kantan.csv.CellEncoder[A6],implicitevidence$450:kantan.csv.CellEncoder[A7],implicitevidence$451:kantan.csv.CellEncoder[A8],implicitevidence$452:kantan.csv.CellEncoder[A9],implicitevidence$453:kantan.csv.CellEncoder[A10],implicitevidence$454:kantan.csv.CellEncoder[A11],implicitevidence$455:kantan.csv.CellEncoder[A12],implicitevidence$456:kantan.csv.CellEncoder[A13],implicitevidence$457:kantan.csv.CellEncoder[A14],implicitevidence$458:kantan.csv.CellEncoder[A15],implicitevidence$459:kantan.csv.CellEncoder[A16],implicitevidence$460:kantan.csv.CellEncoder[A17],implicitevidence$461:kantan.csv.CellEncoder[A18],implicitevidence$462:kantan.csv.CellEncoder[A19],implicitevidence$463:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$425:kantan.csv.CellEncoder[A1],implicitevidence$426:kantan.csv.CellEncoder[A2],implicitevidence$427:kantan.csv.CellEncoder[A3],implicitevidence$428:kantan.csv.CellEncoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellEncoder[A6],implicitevidence$431:kantan.csv.CellEncoder[A7],implicitevidence$432:kantan.csv.CellEncoder[A8],implicitevidence$433:kantan.csv.CellEncoder[A9],implicitevidence$434:kantan.csv.CellEncoder[A10],implicitevidence$435:kantan.csv.CellEncoder[A11],implicitevidence$436:kantan.csv.CellEncoder[A12],implicitevidence$437:kantan.csv.CellEncoder[A13],implicitevidence$438:kantan.csv.CellEncoder[A14],implicitevidence$439:kantan.csv.CellEncoder[A15],implicitevidence$440:kantan.csv.CellEncoder[A16],implicitevidence$441:kantan.csv.CellEncoder[A17],implicitevidence$442:kantan.csv.CellEncoder[A18],implicitevidence$443:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$407:kantan.csv.CellEncoder[A1],implicitevidence$408:kantan.csv.CellEncoder[A2],implicitevidence$409:kantan.csv.CellEncoder[A3],implicitevidence$410:kantan.csv.CellEncoder[A4],implicitevidence$411:kantan.csv.CellEncoder[A5],implicitevidence$412:kantan.csv.CellEncoder[A6],implicitevidence$413:kantan.csv.CellEncoder[A7],implicitevidence$414:kantan.csv.CellEncoder[A8],implicitevidence$415:kantan.csv.CellEncoder[A9],implicitevidence$416:kantan.csv.CellEncoder[A10],implicitevidence$417:kantan.csv.CellEncoder[A11],implicitevidence$418:kantan.csv.CellEncoder[A12],implicitevidence$419:kantan.csv.CellEncoder[A13],implicitevidence$420:kantan.csv.CellEncoder[A14],implicitevidence$421:kantan.csv.CellEncoder[A15],implicitevidence$422:kantan.csv.CellEncoder[A16],implicitevidence$423:kantan.csv.CellEncoder[A17],implicitevidence$424:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$390:kantan.csv.CellEncoder[A1],implicitevidence$391:kantan.csv.CellEncoder[A2],implicitevidence$392:kantan.csv.CellEncoder[A3],implicitevidence$393:kantan.csv.CellEncoder[A4],implicitevidence$394:kantan.csv.CellEncoder[A5],implicitevidence$395:kantan.csv.CellEncoder[A6],implicitevidence$396:kantan.csv.CellEncoder[A7],implicitevidence$397:kantan.csv.CellEncoder[A8],implicitevidence$398:kantan.csv.CellEncoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellEncoder[A11],implicitevidence$401:kantan.csv.CellEncoder[A12],implicitevidence$402:kantan.csv.CellEncoder[A13],implicitevidence$403:kantan.csv.CellEncoder[A14],implicitevidence$404:kantan.csv.CellEncoder[A15],implicitevidence$405:kantan.csv.CellEncoder[A16],implicitevidence$406:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$374:kantan.csv.CellEncoder[A1],implicitevidence$375:kantan.csv.CellEncoder[A2],implicitevidence$376:kantan.csv.CellEncoder[A3],implicitevidence$377:kantan.csv.CellEncoder[A4],implicitevidence$378:kantan.csv.CellEncoder[A5],implicitevidence$379:kantan.csv.CellEncoder[A6],implicitevidence$380:kantan.csv.CellEncoder[A7],implicitevidence$381:kantan.csv.CellEncoder[A8],implicitevidence$382:kantan.csv.CellEncoder[A9],implicitevidence$383:kantan.csv.CellEncoder[A10],implicitevidence$384:kantan.csv.CellEncoder[A11],implicitevidence$385:kantan.csv.CellEncoder[A12],implicitevidence$386:kantan.csv.CellEncoder[A13],implicitevidence$387:kantan.csv.CellEncoder[A14],implicitevidence$388:kantan.csv.CellEncoder[A15],implicitevidence$389:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$359:kantan.csv.CellEncoder[A1],implicitevidence$360:kantan.csv.CellEncoder[A2],implicitevidence$361:kantan.csv.CellEncoder[A3],implicitevidence$362:kantan.csv.CellEncoder[A4],implicitevidence$363:kantan.csv.CellEncoder[A5],implicitevidence$364:kantan.csv.CellEncoder[A6],implicitevidence$365:kantan.csv.CellEncoder[A7],implicitevidence$366:kantan.csv.CellEncoder[A8],implicitevidence$367:kantan.csv.CellEncoder[A9],implicitevidence$368:kantan.csv.CellEncoder[A10],implicitevidence$369:kantan.csv.CellEncoder[A11],implicitevidence$370:kantan.csv.CellEncoder[A12],implicitevidence$371:kantan.csv.CellEncoder[A13],implicitevidence$372:kantan.csv.CellEncoder[A14],implicitevidence$373:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$345:kantan.csv.CellEncoder[A1],implicitevidence$346:kantan.csv.CellEncoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellEncoder[A4],implicitevidence$349:kantan.csv.CellEncoder[A5],implicitevidence$350:kantan.csv.CellEncoder[A6],implicitevidence$351:kantan.csv.CellEncoder[A7],implicitevidence$352:kantan.csv.CellEncoder[A8],implicitevidence$353:kantan.csv.CellEncoder[A9],implicitevidence$354:kantan.csv.CellEncoder[A10],implicitevidence$355:kantan.csv.CellEncoder[A11],implicitevidence$356:kantan.csv.CellEncoder[A12],implicitevidence$357:kantan.csv.CellEncoder[A13],implicitevidence$358:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$332:kantan.csv.CellEncoder[A1],implicitevidence$333:kantan.csv.CellEncoder[A2],implicitevidence$334:kantan.csv.CellEncoder[A3],implicitevidence$335:kantan.csv.CellEncoder[A4],implicitevidence$336:kantan.csv.CellEncoder[A5],implicitevidence$337:kantan.csv.CellEncoder[A6],implicitevidence$338:kantan.csv.CellEncoder[A7],implicitevidence$339:kantan.csv.CellEncoder[A8],implicitevidence$340:kantan.csv.CellEncoder[A9],implicitevidence$341:kantan.csv.CellEncoder[A10],implicitevidence$342:kantan.csv.CellEncoder[A11],implicitevidence$343:kantan.csv.CellEncoder[A12],implicitevidence$344:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$320:kantan.csv.CellEncoder[A1],implicitevidence$321:kantan.csv.CellEncoder[A2],implicitevidence$322:kantan.csv.CellEncoder[A3],implicitevidence$323:kantan.csv.CellEncoder[A4],implicitevidence$324:kantan.csv.CellEncoder[A5],implicitevidence$325:kantan.csv.CellEncoder[A6],implicitevidence$326:kantan.csv.CellEncoder[A7],implicitevidence$327:kantan.csv.CellEncoder[A8],implicitevidence$328:kantan.csv.CellEncoder[A9],implicitevidence$329:kantan.csv.CellEncoder[A10],implicitevidence$330:kantan.csv.CellEncoder[A11],implicitevidence$331:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$309:kantan.csv.CellEncoder[A1],implicitevidence$310:kantan.csv.CellEncoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellEncoder[A4],implicitevidence$313:kantan.csv.CellEncoder[A5],implicitevidence$314:kantan.csv.CellEncoder[A6],implicitevidence$315:kantan.csv.CellEncoder[A7],implicitevidence$316:kantan.csv.CellEncoder[A8],implicitevidence$317:kantan.csv.CellEncoder[A9],implicitevidence$318:kantan.csv.CellEncoder[A10],implicitevidence$319:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$299:kantan.csv.CellEncoder[A1],implicitevidence$300:kantan.csv.CellEncoder[A2],implicitevidence$301:kantan.csv.CellEncoder[A3],implicitevidence$302:kantan.csv.CellEncoder[A4],implicitevidence$303:kantan.csv.CellEncoder[A5],implicitevidence$304:kantan.csv.CellEncoder[A6],implicitevidence$305:kantan.csv.CellEncoder[A7],implicitevidence$306:kantan.csv.CellEncoder[A8],implicitevidence$307:kantan.csv.CellEncoder[A9],implicitevidence$308:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$290:kantan.csv.CellEncoder[A1],implicitevidence$291:kantan.csv.CellEncoder[A2],implicitevidence$292:kantan.csv.CellEncoder[A3],implicitevidence$293:kantan.csv.CellEncoder[A4],implicitevidence$294:kantan.csv.CellEncoder[A5],implicitevidence$295:kantan.csv.CellEncoder[A6],implicitevidence$296:kantan.csv.CellEncoder[A7],implicitevidence$297:kantan.csv.CellEncoder[A8],implicitevidence$298:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$282:kantan.csv.CellEncoder[A1],implicitevidence$283:kantan.csv.CellEncoder[A2],implicitevidence$284:kantan.csv.CellEncoder[A3],implicitevidence$285:kantan.csv.CellEncoder[A4],implicitevidence$286:kantan.csv.CellEncoder[A5],implicitevidence$287:kantan.csv.CellEncoder[A6],implicitevidence$288:kantan.csv.CellEncoder[A7],implicitevidence$289:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6,A7](f:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$275:kantan.csv.CellEncoder[A1],implicitevidence$276:kantan.csv.CellEncoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellEncoder[A4],implicitevidence$279:kantan.csv.CellEncoder[A5],implicitevidence$280:kantan.csv.CellEncoder[A6],implicitevidence$281:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5,A6](f:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$269:kantan.csv.CellEncoder[A1],implicitevidence$270:kantan.csv.CellEncoder[A2],implicitevidence$271:kantan.csv.CellEncoder[A3],implicitevidence$272:kantan.csv.CellEncoder[A4],implicitevidence$273:kantan.csv.CellEncoder[A5],implicitevidence$274:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4,A5](f:C=>(A1,A2,A3,A4,A5))(implicitevidence$264:kantan.csv.CellEncoder[A1],implicitevidence$265:kantan.csv.CellEncoder[A2],implicitevidence$266:kantan.csv.CellEncoder[A3],implicitevidence$267:kantan.csv.CellEncoder[A4],implicitevidence$268:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3,A4](f:C=>(A1,A2,A3,A4))(implicitevidence$260:kantan.csv.CellEncoder[A1],implicitevidence$261:kantan.csv.CellEncoder[A2],implicitevidence$262:kantan.csv.CellEncoder[A3],implicitevidence$263:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2,A3](f:C=>(A1,A2,A3))(implicitevidence$257:kantan.csv.CellEncoder[A1],implicitevidence$258:kantan.csv.CellEncoder[A2],implicitevidence$259:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1,A2](f:C=>(A1,A2))(implicitevidence$255:kantan.csv.CellEncoder[A1],implicitevidence$256:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => A1)(arg0: CellEncoder[A1]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ordered[C,A1](f:C=>A1)(implicitevidence$254:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$232:kantan.csv.CellEncoder[A1],implicitevidence$233:kantan.csv.CellEncoder[A2],implicitevidence$234:kantan.csv.CellEncoder[A3],implicitevidence$235:kantan.csv.CellEncoder[A4],implicitevidence$236:kantan.csv.CellEncoder[A5],implicitevidence$237:kantan.csv.CellEncoder[A6],implicitevidence$238:kantan.csv.CellEncoder[A7],implicitevidence$239:kantan.csv.CellEncoder[A8],implicitevidence$240:kantan.csv.CellEncoder[A9],implicitevidence$241:kantan.csv.CellEncoder[A10],implicitevidence$242:kantan.csv.CellEncoder[A11],implicitevidence$243:kantan.csv.CellEncoder[A12],implicitevidence$244:kantan.csv.CellEncoder[A13],implicitevidence$245:kantan.csv.CellEncoder[A14],implicitevidence$246:kantan.csv.CellEncoder[A15],implicitevidence$247:kantan.csv.CellEncoder[A16],implicitevidence$248:kantan.csv.CellEncoder[A17],implicitevidence$249:kantan.csv.CellEncoder[A18],implicitevidence$250:kantan.csv.CellEncoder[A19],implicitevidence$251:kantan.csv.CellEncoder[A20],implicitevidence$252:kantan.csv.CellEncoder[A21],implicitevidence$253:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$211:kantan.csv.CellEncoder[A1],implicitevidence$212:kantan.csv.CellEncoder[A2],implicitevidence$213:kantan.csv.CellEncoder[A3],implicitevidence$214:kantan.csv.CellEncoder[A4],implicitevidence$215:kantan.csv.CellEncoder[A5],implicitevidence$216:kantan.csv.CellEncoder[A6],implicitevidence$217:kantan.csv.CellEncoder[A7],implicitevidence$218:kantan.csv.CellEncoder[A8],implicitevidence$219:kantan.csv.CellEncoder[A9],implicitevidence$220:kantan.csv.CellEncoder[A10],implicitevidence$221:kantan.csv.CellEncoder[A11],implicitevidence$222:kantan.csv.CellEncoder[A12],implicitevidence$223:kantan.csv.CellEncoder[A13],implicitevidence$224:kantan.csv.CellEncoder[A14],implicitevidence$225:kantan.csv.CellEncoder[A15],implicitevidence$226:kantan.csv.CellEncoder[A16],implicitevidence$227:kantan.csv.CellEncoder[A17],implicitevidence$228:kantan.csv.CellEncoder[A18],implicitevidence$229:kantan.csv.CellEncoder[A19],implicitevidence$230:kantan.csv.CellEncoder[A20],implicitevidence$231:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$191:kantan.csv.CellEncoder[A1],implicitevidence$192:kantan.csv.CellEncoder[A2],implicitevidence$193:kantan.csv.CellEncoder[A3],implicitevidence$194:kantan.csv.CellEncoder[A4],implicitevidence$195:kantan.csv.CellEncoder[A5],implicitevidence$196:kantan.csv.CellEncoder[A6],implicitevidence$197:kantan.csv.CellEncoder[A7],implicitevidence$198:kantan.csv.CellEncoder[A8],implicitevidence$199:kantan.csv.CellEncoder[A9],implicitevidence$200:kantan.csv.CellEncoder[A10],implicitevidence$201:kantan.csv.CellEncoder[A11],implicitevidence$202:kantan.csv.CellEncoder[A12],implicitevidence$203:kantan.csv.CellEncoder[A13],implicitevidence$204:kantan.csv.CellEncoder[A14],implicitevidence$205:kantan.csv.CellEncoder[A15],implicitevidence$206:kantan.csv.CellEncoder[A16],implicitevidence$207:kantan.csv.CellEncoder[A17],implicitevidence$208:kantan.csv.CellEncoder[A18],implicitevidence$209:kantan.csv.CellEncoder[A19],implicitevidence$210:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$172:kantan.csv.CellEncoder[A1],implicitevidence$173:kantan.csv.CellEncoder[A2],implicitevidence$174:kantan.csv.CellEncoder[A3],implicitevidence$175:kantan.csv.CellEncoder[A4],implicitevidence$176:kantan.csv.CellEncoder[A5],implicitevidence$177:kantan.csv.CellEncoder[A6],implicitevidence$178:kantan.csv.CellEncoder[A7],implicitevidence$179:kantan.csv.CellEncoder[A8],implicitevidence$180:kantan.csv.CellEncoder[A9],implicitevidence$181:kantan.csv.CellEncoder[A10],implicitevidence$182:kantan.csv.CellEncoder[A11],implicitevidence$183:kantan.csv.CellEncoder[A12],implicitevidence$184:kantan.csv.CellEncoder[A13],implicitevidence$185:kantan.csv.CellEncoder[A14],implicitevidence$186:kantan.csv.CellEncoder[A15],implicitevidence$187:kantan.csv.CellEncoder[A16],implicitevidence$188:kantan.csv.CellEncoder[A17],implicitevidence$189:kantan.csv.CellEncoder[A18],implicitevidence$190:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$154:kantan.csv.CellEncoder[A1],implicitevidence$155:kantan.csv.CellEncoder[A2],implicitevidence$156:kantan.csv.CellEncoder[A3],implicitevidence$157:kantan.csv.CellEncoder[A4],implicitevidence$158:kantan.csv.CellEncoder[A5],implicitevidence$159:kantan.csv.CellEncoder[A6],implicitevidence$160:kantan.csv.CellEncoder[A7],implicitevidence$161:kantan.csv.CellEncoder[A8],implicitevidence$162:kantan.csv.CellEncoder[A9],implicitevidence$163:kantan.csv.CellEncoder[A10],implicitevidence$164:kantan.csv.CellEncoder[A11],implicitevidence$165:kantan.csv.CellEncoder[A12],implicitevidence$166:kantan.csv.CellEncoder[A13],implicitevidence$167:kantan.csv.CellEncoder[A14],implicitevidence$168:kantan.csv.CellEncoder[A15],implicitevidence$169:kantan.csv.CellEncoder[A16],implicitevidence$170:kantan.csv.CellEncoder[A17],implicitevidence$171:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$137:kantan.csv.CellEncoder[A1],implicitevidence$138:kantan.csv.CellEncoder[A2],implicitevidence$139:kantan.csv.CellEncoder[A3],implicitevidence$140:kantan.csv.CellEncoder[A4],implicitevidence$141:kantan.csv.CellEncoder[A5],implicitevidence$142:kantan.csv.CellEncoder[A6],implicitevidence$143:kantan.csv.CellEncoder[A7],implicitevidence$144:kantan.csv.CellEncoder[A8],implicitevidence$145:kantan.csv.CellEncoder[A9],implicitevidence$146:kantan.csv.CellEncoder[A10],implicitevidence$147:kantan.csv.CellEncoder[A11],implicitevidence$148:kantan.csv.CellEncoder[A12],implicitevidence$149:kantan.csv.CellEncoder[A13],implicitevidence$150:kantan.csv.CellEncoder[A14],implicitevidence$151:kantan.csv.CellEncoder[A15],implicitevidence$152:kantan.csv.CellEncoder[A16],implicitevidence$153:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$121:kantan.csv.CellEncoder[A1],implicitevidence$122:kantan.csv.CellEncoder[A2],implicitevidence$123:kantan.csv.CellEncoder[A3],implicitevidence$124:kantan.csv.CellEncoder[A4],implicitevidence$125:kantan.csv.CellEncoder[A5],implicitevidence$126:kantan.csv.CellEncoder[A6],implicitevidence$127:kantan.csv.CellEncoder[A7],implicitevidence$128:kantan.csv.CellEncoder[A8],implicitevidence$129:kantan.csv.CellEncoder[A9],implicitevidence$130:kantan.csv.CellEncoder[A10],implicitevidence$131:kantan.csv.CellEncoder[A11],implicitevidence$132:kantan.csv.CellEncoder[A12],implicitevidence$133:kantan.csv.CellEncoder[A13],implicitevidence$134:kantan.csv.CellEncoder[A14],implicitevidence$135:kantan.csv.CellEncoder[A15],implicitevidence$136:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$106:kantan.csv.CellEncoder[A1],implicitevidence$107:kantan.csv.CellEncoder[A2],implicitevidence$108:kantan.csv.CellEncoder[A3],implicitevidence$109:kantan.csv.CellEncoder[A4],implicitevidence$110:kantan.csv.CellEncoder[A5],implicitevidence$111:kantan.csv.CellEncoder[A6],implicitevidence$112:kantan.csv.CellEncoder[A7],implicitevidence$113:kantan.csv.CellEncoder[A8],implicitevidence$114:kantan.csv.CellEncoder[A9],implicitevidence$115:kantan.csv.CellEncoder[A10],implicitevidence$116:kantan.csv.CellEncoder[A11],implicitevidence$117:kantan.csv.CellEncoder[A12],implicitevidence$118:kantan.csv.CellEncoder[A13],implicitevidence$119:kantan.csv.CellEncoder[A14],implicitevidence$120:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$92:kantan.csv.CellEncoder[A1],implicitevidence$93:kantan.csv.CellEncoder[A2],implicitevidence$94:kantan.csv.CellEncoder[A3],implicitevidence$95:kantan.csv.CellEncoder[A4],implicitevidence$96:kantan.csv.CellEncoder[A5],implicitevidence$97:kantan.csv.CellEncoder[A6],implicitevidence$98:kantan.csv.CellEncoder[A7],implicitevidence$99:kantan.csv.CellEncoder[A8],implicitevidence$100:kantan.csv.CellEncoder[A9],implicitevidence$101:kantan.csv.CellEncoder[A10],implicitevidence$102:kantan.csv.CellEncoder[A11],implicitevidence$103:kantan.csv.CellEncoder[A12],implicitevidence$104:kantan.csv.CellEncoder[A13],implicitevidence$105:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$79:kantan.csv.CellEncoder[A1],implicitevidence$80:kantan.csv.CellEncoder[A2],implicitevidence$81:kantan.csv.CellEncoder[A3],implicitevidence$82:kantan.csv.CellEncoder[A4],implicitevidence$83:kantan.csv.CellEncoder[A5],implicitevidence$84:kantan.csv.CellEncoder[A6],implicitevidence$85:kantan.csv.CellEncoder[A7],implicitevidence$86:kantan.csv.CellEncoder[A8],implicitevidence$87:kantan.csv.CellEncoder[A9],implicitevidence$88:kantan.csv.CellEncoder[A10],implicitevidence$89:kantan.csv.CellEncoder[A11],implicitevidence$90:kantan.csv.CellEncoder[A12],implicitevidence$91:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$67:kantan.csv.CellEncoder[A1],implicitevidence$68:kantan.csv.CellEncoder[A2],implicitevidence$69:kantan.csv.CellEncoder[A3],implicitevidence$70:kantan.csv.CellEncoder[A4],implicitevidence$71:kantan.csv.CellEncoder[A5],implicitevidence$72:kantan.csv.CellEncoder[A6],implicitevidence$73:kantan.csv.CellEncoder[A7],implicitevidence$74:kantan.csv.CellEncoder[A8],implicitevidence$75:kantan.csv.CellEncoder[A9],implicitevidence$76:kantan.csv.CellEncoder[A10],implicitevidence$77:kantan.csv.CellEncoder[A11],implicitevidence$78:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$56:kantan.csv.CellEncoder[A1],implicitevidence$57:kantan.csv.CellEncoder[A2],implicitevidence$58:kantan.csv.CellEncoder[A3],implicitevidence$59:kantan.csv.CellEncoder[A4],implicitevidence$60:kantan.csv.CellEncoder[A5],implicitevidence$61:kantan.csv.CellEncoder[A6],implicitevidence$62:kantan.csv.CellEncoder[A7],implicitevidence$63:kantan.csv.CellEncoder[A8],implicitevidence$64:kantan.csv.CellEncoder[A9],implicitevidence$65:kantan.csv.CellEncoder[A10],implicitevidence$66:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$46:kantan.csv.CellEncoder[A1],implicitevidence$47:kantan.csv.CellEncoder[A2],implicitevidence$48:kantan.csv.CellEncoder[A3],implicitevidence$49:kantan.csv.CellEncoder[A4],implicitevidence$50:kantan.csv.CellEncoder[A5],implicitevidence$51:kantan.csv.CellEncoder[A6],implicitevidence$52:kantan.csv.CellEncoder[A7],implicitevidence$53:kantan.csv.CellEncoder[A8],implicitevidence$54:kantan.csv.CellEncoder[A9],implicitevidence$55:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$37:kantan.csv.CellEncoder[A1],implicitevidence$38:kantan.csv.CellEncoder[A2],implicitevidence$39:kantan.csv.CellEncoder[A3],implicitevidence$40:kantan.csv.CellEncoder[A4],implicitevidence$41:kantan.csv.CellEncoder[A5],implicitevidence$42:kantan.csv.CellEncoder[A6],implicitevidence$43:kantan.csv.CellEncoder[A7],implicitevidence$44:kantan.csv.CellEncoder[A8],implicitevidence$45:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$29:kantan.csv.CellEncoder[A1],implicitevidence$30:kantan.csv.CellEncoder[A2],implicitevidence$31:kantan.csv.CellEncoder[A3],implicitevidence$32:kantan.csv.CellEncoder[A4],implicitevidence$33:kantan.csv.CellEncoder[A5],implicitevidence$34:kantan.csv.CellEncoder[A6],implicitevidence$35:kantan.csv.CellEncoder[A7],implicitevidence$36:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$22:kantan.csv.CellEncoder[A1],implicitevidence$23:kantan.csv.CellEncoder[A2],implicitevidence$24:kantan.csv.CellEncoder[A3],implicitevidence$25:kantan.csv.CellEncoder[A4],implicitevidence$26:kantan.csv.CellEncoder[A5],implicitevidence$27:kantan.csv.CellEncoder[A6],implicitevidence$28:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$16:kantan.csv.CellEncoder[A1],implicitevidence$17:kantan.csv.CellEncoder[A2],implicitevidence$18:kantan.csv.CellEncoder[A3],implicitevidence$19:kantan.csv.CellEncoder[A4],implicitevidence$20:kantan.csv.CellEncoder[A5],implicitevidence$21:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:C=>(A1,A2,A3,A4,A5))(implicitevidence$11:kantan.csv.CellEncoder[A1],implicitevidence$12:kantan.csv.CellEncoder[A2],implicitevidence$13:kantan.csv.CellEncoder[A3],implicitevidence$14:kantan.csv.CellEncoder[A4],implicitevidence$15:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(f:C=>(A1,A2,A3,A4))(implicitevidence$7:kantan.csv.CellEncoder[A1],implicitevidence$8:kantan.csv.CellEncoder[A2],implicitevidence$9:kantan.csv.CellEncoder[A3],implicitevidence$10:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2,A3](i1:Int,i2:Int,i3:Int)(f:C=>(A1,A2,A3))(implicitevidence$4:kantan.csv.CellEncoder[A1],implicitevidence$5:kantan.csv.CellEncoder[A2],implicitevidence$6:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int)(f: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1,A2](i1:Int,i2:Int)(f:C=>(A1,A2))(implicitevidence$2:kantan.csv.CellEncoder[A1],implicitevidence$3:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f: (C) => A1)(arg0: CellEncoder[A1]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/GeneratedRowEncoders.html#encoder[C,A1](f:C=>A1)(implicitevidence$1:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/GeneratedRowEncoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/GeneratedRowEncoders.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/GeneratedRowEncoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/GeneratedRowEncoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/GeneratedRowEncoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/GeneratedRowEncoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/GeneratedRowEncoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowEncoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowEncoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/GeneratedRowEncoders.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/GeneratedRowEncoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/GeneratedRowEncoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/GeneratedRowEncoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/GeneratedRowEncoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/GeneratedRowEncoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/GeneratedRowEncoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/GeneratedRowEncoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/GeneratedRowEncoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/GeneratedRowEncoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides RowEncoder instance construction methods."}, {"name" : "kantan.csv.HeaderCodec", "object" : "kantan\/csv\/HeaderCodec$.html", "members_object" : [{"label" : "from", "tail" : "(dec: HeaderDecoder[A])(enc: HeaderEncoder[A]): HeaderCodec[A]", "member" : "kantan.csv.HeaderCodec.from", "link" : "kantan\/csv\/HeaderCodec$.html#from[A](dec:kantan.csv.HeaderDecoder[A])(enc:kantan.csv.HeaderEncoder[A]):kantan.csv.HeaderCodec[A]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$969:kantan.csv.CellEncoder[A1],implicitevidence$970:kantan.csv.CellDecoder[A1],implicitevidence$971:kantan.csv.CellEncoder[A2],implicitevidence$972:kantan.csv.CellDecoder[A2],implicitevidence$973:kantan.csv.CellEncoder[A3],implicitevidence$974:kantan.csv.CellDecoder[A3],implicitevidence$975:kantan.csv.CellEncoder[A4],implicitevidence$976:kantan.csv.CellDecoder[A4],implicitevidence$977:kantan.csv.CellEncoder[A5],implicitevidence$978:kantan.csv.CellDecoder[A5],implicitevidence$979:kantan.csv.CellEncoder[A6],implicitevidence$980:kantan.csv.CellDecoder[A6],implicitevidence$981:kantan.csv.CellEncoder[A7],implicitevidence$982:kantan.csv.CellDecoder[A7],implicitevidence$983:kantan.csv.CellEncoder[A8],implicitevidence$984:kantan.csv.CellDecoder[A8],implicitevidence$985:kantan.csv.CellEncoder[A9],implicitevidence$986:kantan.csv.CellDecoder[A9],implicitevidence$987:kantan.csv.CellEncoder[A10],implicitevidence$988:kantan.csv.CellDecoder[A10],implicitevidence$989:kantan.csv.CellEncoder[A11],implicitevidence$990:kantan.csv.CellDecoder[A11],implicitevidence$991:kantan.csv.CellEncoder[A12],implicitevidence$992:kantan.csv.CellDecoder[A12],implicitevidence$993:kantan.csv.CellEncoder[A13],implicitevidence$994:kantan.csv.CellDecoder[A13],implicitevidence$995:kantan.csv.CellEncoder[A14],implicitevidence$996:kantan.csv.CellDecoder[A14],implicitevidence$997:kantan.csv.CellEncoder[A15],implicitevidence$998:kantan.csv.CellDecoder[A15],implicitevidence$999:kantan.csv.CellEncoder[A16],implicitevidence$1000:kantan.csv.CellDecoder[A16],implicitevidence$1001:kantan.csv.CellEncoder[A17],implicitevidence$1002:kantan.csv.CellDecoder[A17],implicitevidence$1003:kantan.csv.CellEncoder[A18],implicitevidence$1004:kantan.csv.CellDecoder[A18],implicitevidence$1005:kantan.csv.CellEncoder[A19],implicitevidence$1006:kantan.csv.CellDecoder[A19],implicitevidence$1007:kantan.csv.CellEncoder[A20],implicitevidence$1008:kantan.csv.CellDecoder[A20],implicitevidence$1009:kantan.csv.CellEncoder[A21],implicitevidence$1010:kantan.csv.CellDecoder[A21],implicitevidence$1011:kantan.csv.CellEncoder[A22],implicitevidence$1012:kantan.csv.CellDecoder[A22]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$927:kantan.csv.CellEncoder[A1],implicitevidence$928:kantan.csv.CellDecoder[A1],implicitevidence$929:kantan.csv.CellEncoder[A2],implicitevidence$930:kantan.csv.CellDecoder[A2],implicitevidence$931:kantan.csv.CellEncoder[A3],implicitevidence$932:kantan.csv.CellDecoder[A3],implicitevidence$933:kantan.csv.CellEncoder[A4],implicitevidence$934:kantan.csv.CellDecoder[A4],implicitevidence$935:kantan.csv.CellEncoder[A5],implicitevidence$936:kantan.csv.CellDecoder[A5],implicitevidence$937:kantan.csv.CellEncoder[A6],implicitevidence$938:kantan.csv.CellDecoder[A6],implicitevidence$939:kantan.csv.CellEncoder[A7],implicitevidence$940:kantan.csv.CellDecoder[A7],implicitevidence$941:kantan.csv.CellEncoder[A8],implicitevidence$942:kantan.csv.CellDecoder[A8],implicitevidence$943:kantan.csv.CellEncoder[A9],implicitevidence$944:kantan.csv.CellDecoder[A9],implicitevidence$945:kantan.csv.CellEncoder[A10],implicitevidence$946:kantan.csv.CellDecoder[A10],implicitevidence$947:kantan.csv.CellEncoder[A11],implicitevidence$948:kantan.csv.CellDecoder[A11],implicitevidence$949:kantan.csv.CellEncoder[A12],implicitevidence$950:kantan.csv.CellDecoder[A12],implicitevidence$951:kantan.csv.CellEncoder[A13],implicitevidence$952:kantan.csv.CellDecoder[A13],implicitevidence$953:kantan.csv.CellEncoder[A14],implicitevidence$954:kantan.csv.CellDecoder[A14],implicitevidence$955:kantan.csv.CellEncoder[A15],implicitevidence$956:kantan.csv.CellDecoder[A15],implicitevidence$957:kantan.csv.CellEncoder[A16],implicitevidence$958:kantan.csv.CellDecoder[A16],implicitevidence$959:kantan.csv.CellEncoder[A17],implicitevidence$960:kantan.csv.CellDecoder[A17],implicitevidence$961:kantan.csv.CellEncoder[A18],implicitevidence$962:kantan.csv.CellDecoder[A18],implicitevidence$963:kantan.csv.CellEncoder[A19],implicitevidence$964:kantan.csv.CellDecoder[A19],implicitevidence$965:kantan.csv.CellEncoder[A20],implicitevidence$966:kantan.csv.CellDecoder[A20],implicitevidence$967:kantan.csv.CellEncoder[A21],implicitevidence$968:kantan.csv.CellDecoder[A21]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$887:kantan.csv.CellEncoder[A1],implicitevidence$888:kantan.csv.CellDecoder[A1],implicitevidence$889:kantan.csv.CellEncoder[A2],implicitevidence$890:kantan.csv.CellDecoder[A2],implicitevidence$891:kantan.csv.CellEncoder[A3],implicitevidence$892:kantan.csv.CellDecoder[A3],implicitevidence$893:kantan.csv.CellEncoder[A4],implicitevidence$894:kantan.csv.CellDecoder[A4],implicitevidence$895:kantan.csv.CellEncoder[A5],implicitevidence$896:kantan.csv.CellDecoder[A5],implicitevidence$897:kantan.csv.CellEncoder[A6],implicitevidence$898:kantan.csv.CellDecoder[A6],implicitevidence$899:kantan.csv.CellEncoder[A7],implicitevidence$900:kantan.csv.CellDecoder[A7],implicitevidence$901:kantan.csv.CellEncoder[A8],implicitevidence$902:kantan.csv.CellDecoder[A8],implicitevidence$903:kantan.csv.CellEncoder[A9],implicitevidence$904:kantan.csv.CellDecoder[A9],implicitevidence$905:kantan.csv.CellEncoder[A10],implicitevidence$906:kantan.csv.CellDecoder[A10],implicitevidence$907:kantan.csv.CellEncoder[A11],implicitevidence$908:kantan.csv.CellDecoder[A11],implicitevidence$909:kantan.csv.CellEncoder[A12],implicitevidence$910:kantan.csv.CellDecoder[A12],implicitevidence$911:kantan.csv.CellEncoder[A13],implicitevidence$912:kantan.csv.CellDecoder[A13],implicitevidence$913:kantan.csv.CellEncoder[A14],implicitevidence$914:kantan.csv.CellDecoder[A14],implicitevidence$915:kantan.csv.CellEncoder[A15],implicitevidence$916:kantan.csv.CellDecoder[A15],implicitevidence$917:kantan.csv.CellEncoder[A16],implicitevidence$918:kantan.csv.CellDecoder[A16],implicitevidence$919:kantan.csv.CellEncoder[A17],implicitevidence$920:kantan.csv.CellDecoder[A17],implicitevidence$921:kantan.csv.CellEncoder[A18],implicitevidence$922:kantan.csv.CellDecoder[A18],implicitevidence$923:kantan.csv.CellEncoder[A19],implicitevidence$924:kantan.csv.CellDecoder[A19],implicitevidence$925:kantan.csv.CellEncoder[A20],implicitevidence$926:kantan.csv.CellDecoder[A20]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$849:kantan.csv.CellEncoder[A1],implicitevidence$850:kantan.csv.CellDecoder[A1],implicitevidence$851:kantan.csv.CellEncoder[A2],implicitevidence$852:kantan.csv.CellDecoder[A2],implicitevidence$853:kantan.csv.CellEncoder[A3],implicitevidence$854:kantan.csv.CellDecoder[A3],implicitevidence$855:kantan.csv.CellEncoder[A4],implicitevidence$856:kantan.csv.CellDecoder[A4],implicitevidence$857:kantan.csv.CellEncoder[A5],implicitevidence$858:kantan.csv.CellDecoder[A5],implicitevidence$859:kantan.csv.CellEncoder[A6],implicitevidence$860:kantan.csv.CellDecoder[A6],implicitevidence$861:kantan.csv.CellEncoder[A7],implicitevidence$862:kantan.csv.CellDecoder[A7],implicitevidence$863:kantan.csv.CellEncoder[A8],implicitevidence$864:kantan.csv.CellDecoder[A8],implicitevidence$865:kantan.csv.CellEncoder[A9],implicitevidence$866:kantan.csv.CellDecoder[A9],implicitevidence$867:kantan.csv.CellEncoder[A10],implicitevidence$868:kantan.csv.CellDecoder[A10],implicitevidence$869:kantan.csv.CellEncoder[A11],implicitevidence$870:kantan.csv.CellDecoder[A11],implicitevidence$871:kantan.csv.CellEncoder[A12],implicitevidence$872:kantan.csv.CellDecoder[A12],implicitevidence$873:kantan.csv.CellEncoder[A13],implicitevidence$874:kantan.csv.CellDecoder[A13],implicitevidence$875:kantan.csv.CellEncoder[A14],implicitevidence$876:kantan.csv.CellDecoder[A14],implicitevidence$877:kantan.csv.CellEncoder[A15],implicitevidence$878:kantan.csv.CellDecoder[A15],implicitevidence$879:kantan.csv.CellEncoder[A16],implicitevidence$880:kantan.csv.CellDecoder[A16],implicitevidence$881:kantan.csv.CellEncoder[A17],implicitevidence$882:kantan.csv.CellDecoder[A17],implicitevidence$883:kantan.csv.CellEncoder[A18],implicitevidence$884:kantan.csv.CellDecoder[A18],implicitevidence$885:kantan.csv.CellEncoder[A19],implicitevidence$886:kantan.csv.CellDecoder[A19]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$813:kantan.csv.CellEncoder[A1],implicitevidence$814:kantan.csv.CellDecoder[A1],implicitevidence$815:kantan.csv.CellEncoder[A2],implicitevidence$816:kantan.csv.CellDecoder[A2],implicitevidence$817:kantan.csv.CellEncoder[A3],implicitevidence$818:kantan.csv.CellDecoder[A3],implicitevidence$819:kantan.csv.CellEncoder[A4],implicitevidence$820:kantan.csv.CellDecoder[A4],implicitevidence$821:kantan.csv.CellEncoder[A5],implicitevidence$822:kantan.csv.CellDecoder[A5],implicitevidence$823:kantan.csv.CellEncoder[A6],implicitevidence$824:kantan.csv.CellDecoder[A6],implicitevidence$825:kantan.csv.CellEncoder[A7],implicitevidence$826:kantan.csv.CellDecoder[A7],implicitevidence$827:kantan.csv.CellEncoder[A8],implicitevidence$828:kantan.csv.CellDecoder[A8],implicitevidence$829:kantan.csv.CellEncoder[A9],implicitevidence$830:kantan.csv.CellDecoder[A9],implicitevidence$831:kantan.csv.CellEncoder[A10],implicitevidence$832:kantan.csv.CellDecoder[A10],implicitevidence$833:kantan.csv.CellEncoder[A11],implicitevidence$834:kantan.csv.CellDecoder[A11],implicitevidence$835:kantan.csv.CellEncoder[A12],implicitevidence$836:kantan.csv.CellDecoder[A12],implicitevidence$837:kantan.csv.CellEncoder[A13],implicitevidence$838:kantan.csv.CellDecoder[A13],implicitevidence$839:kantan.csv.CellEncoder[A14],implicitevidence$840:kantan.csv.CellDecoder[A14],implicitevidence$841:kantan.csv.CellEncoder[A15],implicitevidence$842:kantan.csv.CellDecoder[A15],implicitevidence$843:kantan.csv.CellEncoder[A16],implicitevidence$844:kantan.csv.CellDecoder[A16],implicitevidence$845:kantan.csv.CellEncoder[A17],implicitevidence$846:kantan.csv.CellDecoder[A17],implicitevidence$847:kantan.csv.CellEncoder[A18],implicitevidence$848:kantan.csv.CellDecoder[A18]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$779:kantan.csv.CellEncoder[A1],implicitevidence$780:kantan.csv.CellDecoder[A1],implicitevidence$781:kantan.csv.CellEncoder[A2],implicitevidence$782:kantan.csv.CellDecoder[A2],implicitevidence$783:kantan.csv.CellEncoder[A3],implicitevidence$784:kantan.csv.CellDecoder[A3],implicitevidence$785:kantan.csv.CellEncoder[A4],implicitevidence$786:kantan.csv.CellDecoder[A4],implicitevidence$787:kantan.csv.CellEncoder[A5],implicitevidence$788:kantan.csv.CellDecoder[A5],implicitevidence$789:kantan.csv.CellEncoder[A6],implicitevidence$790:kantan.csv.CellDecoder[A6],implicitevidence$791:kantan.csv.CellEncoder[A7],implicitevidence$792:kantan.csv.CellDecoder[A7],implicitevidence$793:kantan.csv.CellEncoder[A8],implicitevidence$794:kantan.csv.CellDecoder[A8],implicitevidence$795:kantan.csv.CellEncoder[A9],implicitevidence$796:kantan.csv.CellDecoder[A9],implicitevidence$797:kantan.csv.CellEncoder[A10],implicitevidence$798:kantan.csv.CellDecoder[A10],implicitevidence$799:kantan.csv.CellEncoder[A11],implicitevidence$800:kantan.csv.CellDecoder[A11],implicitevidence$801:kantan.csv.CellEncoder[A12],implicitevidence$802:kantan.csv.CellDecoder[A12],implicitevidence$803:kantan.csv.CellEncoder[A13],implicitevidence$804:kantan.csv.CellDecoder[A13],implicitevidence$805:kantan.csv.CellEncoder[A14],implicitevidence$806:kantan.csv.CellDecoder[A14],implicitevidence$807:kantan.csv.CellEncoder[A15],implicitevidence$808:kantan.csv.CellDecoder[A15],implicitevidence$809:kantan.csv.CellEncoder[A16],implicitevidence$810:kantan.csv.CellDecoder[A16],implicitevidence$811:kantan.csv.CellEncoder[A17],implicitevidence$812:kantan.csv.CellDecoder[A17]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$747:kantan.csv.CellEncoder[A1],implicitevidence$748:kantan.csv.CellDecoder[A1],implicitevidence$749:kantan.csv.CellEncoder[A2],implicitevidence$750:kantan.csv.CellDecoder[A2],implicitevidence$751:kantan.csv.CellEncoder[A3],implicitevidence$752:kantan.csv.CellDecoder[A3],implicitevidence$753:kantan.csv.CellEncoder[A4],implicitevidence$754:kantan.csv.CellDecoder[A4],implicitevidence$755:kantan.csv.CellEncoder[A5],implicitevidence$756:kantan.csv.CellDecoder[A5],implicitevidence$757:kantan.csv.CellEncoder[A6],implicitevidence$758:kantan.csv.CellDecoder[A6],implicitevidence$759:kantan.csv.CellEncoder[A7],implicitevidence$760:kantan.csv.CellDecoder[A7],implicitevidence$761:kantan.csv.CellEncoder[A8],implicitevidence$762:kantan.csv.CellDecoder[A8],implicitevidence$763:kantan.csv.CellEncoder[A9],implicitevidence$764:kantan.csv.CellDecoder[A9],implicitevidence$765:kantan.csv.CellEncoder[A10],implicitevidence$766:kantan.csv.CellDecoder[A10],implicitevidence$767:kantan.csv.CellEncoder[A11],implicitevidence$768:kantan.csv.CellDecoder[A11],implicitevidence$769:kantan.csv.CellEncoder[A12],implicitevidence$770:kantan.csv.CellDecoder[A12],implicitevidence$771:kantan.csv.CellEncoder[A13],implicitevidence$772:kantan.csv.CellDecoder[A13],implicitevidence$773:kantan.csv.CellEncoder[A14],implicitevidence$774:kantan.csv.CellDecoder[A14],implicitevidence$775:kantan.csv.CellEncoder[A15],implicitevidence$776:kantan.csv.CellDecoder[A15],implicitevidence$777:kantan.csv.CellEncoder[A16],implicitevidence$778:kantan.csv.CellDecoder[A16]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$717:kantan.csv.CellEncoder[A1],implicitevidence$718:kantan.csv.CellDecoder[A1],implicitevidence$719:kantan.csv.CellEncoder[A2],implicitevidence$720:kantan.csv.CellDecoder[A2],implicitevidence$721:kantan.csv.CellEncoder[A3],implicitevidence$722:kantan.csv.CellDecoder[A3],implicitevidence$723:kantan.csv.CellEncoder[A4],implicitevidence$724:kantan.csv.CellDecoder[A4],implicitevidence$725:kantan.csv.CellEncoder[A5],implicitevidence$726:kantan.csv.CellDecoder[A5],implicitevidence$727:kantan.csv.CellEncoder[A6],implicitevidence$728:kantan.csv.CellDecoder[A6],implicitevidence$729:kantan.csv.CellEncoder[A7],implicitevidence$730:kantan.csv.CellDecoder[A7],implicitevidence$731:kantan.csv.CellEncoder[A8],implicitevidence$732:kantan.csv.CellDecoder[A8],implicitevidence$733:kantan.csv.CellEncoder[A9],implicitevidence$734:kantan.csv.CellDecoder[A9],implicitevidence$735:kantan.csv.CellEncoder[A10],implicitevidence$736:kantan.csv.CellDecoder[A10],implicitevidence$737:kantan.csv.CellEncoder[A11],implicitevidence$738:kantan.csv.CellDecoder[A11],implicitevidence$739:kantan.csv.CellEncoder[A12],implicitevidence$740:kantan.csv.CellDecoder[A12],implicitevidence$741:kantan.csv.CellEncoder[A13],implicitevidence$742:kantan.csv.CellDecoder[A13],implicitevidence$743:kantan.csv.CellEncoder[A14],implicitevidence$744:kantan.csv.CellDecoder[A14],implicitevidence$745:kantan.csv.CellEncoder[A15],implicitevidence$746:kantan.csv.CellDecoder[A15]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$689:kantan.csv.CellEncoder[A1],implicitevidence$690:kantan.csv.CellDecoder[A1],implicitevidence$691:kantan.csv.CellEncoder[A2],implicitevidence$692:kantan.csv.CellDecoder[A2],implicitevidence$693:kantan.csv.CellEncoder[A3],implicitevidence$694:kantan.csv.CellDecoder[A3],implicitevidence$695:kantan.csv.CellEncoder[A4],implicitevidence$696:kantan.csv.CellDecoder[A4],implicitevidence$697:kantan.csv.CellEncoder[A5],implicitevidence$698:kantan.csv.CellDecoder[A5],implicitevidence$699:kantan.csv.CellEncoder[A6],implicitevidence$700:kantan.csv.CellDecoder[A6],implicitevidence$701:kantan.csv.CellEncoder[A7],implicitevidence$702:kantan.csv.CellDecoder[A7],implicitevidence$703:kantan.csv.CellEncoder[A8],implicitevidence$704:kantan.csv.CellDecoder[A8],implicitevidence$705:kantan.csv.CellEncoder[A9],implicitevidence$706:kantan.csv.CellDecoder[A9],implicitevidence$707:kantan.csv.CellEncoder[A10],implicitevidence$708:kantan.csv.CellDecoder[A10],implicitevidence$709:kantan.csv.CellEncoder[A11],implicitevidence$710:kantan.csv.CellDecoder[A11],implicitevidence$711:kantan.csv.CellEncoder[A12],implicitevidence$712:kantan.csv.CellDecoder[A12],implicitevidence$713:kantan.csv.CellEncoder[A13],implicitevidence$714:kantan.csv.CellDecoder[A13],implicitevidence$715:kantan.csv.CellEncoder[A14],implicitevidence$716:kantan.csv.CellDecoder[A14]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$663:kantan.csv.CellEncoder[A1],implicitevidence$664:kantan.csv.CellDecoder[A1],implicitevidence$665:kantan.csv.CellEncoder[A2],implicitevidence$666:kantan.csv.CellDecoder[A2],implicitevidence$667:kantan.csv.CellEncoder[A3],implicitevidence$668:kantan.csv.CellDecoder[A3],implicitevidence$669:kantan.csv.CellEncoder[A4],implicitevidence$670:kantan.csv.CellDecoder[A4],implicitevidence$671:kantan.csv.CellEncoder[A5],implicitevidence$672:kantan.csv.CellDecoder[A5],implicitevidence$673:kantan.csv.CellEncoder[A6],implicitevidence$674:kantan.csv.CellDecoder[A6],implicitevidence$675:kantan.csv.CellEncoder[A7],implicitevidence$676:kantan.csv.CellDecoder[A7],implicitevidence$677:kantan.csv.CellEncoder[A8],implicitevidence$678:kantan.csv.CellDecoder[A8],implicitevidence$679:kantan.csv.CellEncoder[A9],implicitevidence$680:kantan.csv.CellDecoder[A9],implicitevidence$681:kantan.csv.CellEncoder[A10],implicitevidence$682:kantan.csv.CellDecoder[A10],implicitevidence$683:kantan.csv.CellEncoder[A11],implicitevidence$684:kantan.csv.CellDecoder[A11],implicitevidence$685:kantan.csv.CellEncoder[A12],implicitevidence$686:kantan.csv.CellDecoder[A12],implicitevidence$687:kantan.csv.CellEncoder[A13],implicitevidence$688:kantan.csv.CellDecoder[A13]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$639:kantan.csv.CellEncoder[A1],implicitevidence$640:kantan.csv.CellDecoder[A1],implicitevidence$641:kantan.csv.CellEncoder[A2],implicitevidence$642:kantan.csv.CellDecoder[A2],implicitevidence$643:kantan.csv.CellEncoder[A3],implicitevidence$644:kantan.csv.CellDecoder[A3],implicitevidence$645:kantan.csv.CellEncoder[A4],implicitevidence$646:kantan.csv.CellDecoder[A4],implicitevidence$647:kantan.csv.CellEncoder[A5],implicitevidence$648:kantan.csv.CellDecoder[A5],implicitevidence$649:kantan.csv.CellEncoder[A6],implicitevidence$650:kantan.csv.CellDecoder[A6],implicitevidence$651:kantan.csv.CellEncoder[A7],implicitevidence$652:kantan.csv.CellDecoder[A7],implicitevidence$653:kantan.csv.CellEncoder[A8],implicitevidence$654:kantan.csv.CellDecoder[A8],implicitevidence$655:kantan.csv.CellEncoder[A9],implicitevidence$656:kantan.csv.CellDecoder[A9],implicitevidence$657:kantan.csv.CellEncoder[A10],implicitevidence$658:kantan.csv.CellDecoder[A10],implicitevidence$659:kantan.csv.CellEncoder[A11],implicitevidence$660:kantan.csv.CellDecoder[A11],implicitevidence$661:kantan.csv.CellEncoder[A12],implicitevidence$662:kantan.csv.CellDecoder[A12]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$617:kantan.csv.CellEncoder[A1],implicitevidence$618:kantan.csv.CellDecoder[A1],implicitevidence$619:kantan.csv.CellEncoder[A2],implicitevidence$620:kantan.csv.CellDecoder[A2],implicitevidence$621:kantan.csv.CellEncoder[A3],implicitevidence$622:kantan.csv.CellDecoder[A3],implicitevidence$623:kantan.csv.CellEncoder[A4],implicitevidence$624:kantan.csv.CellDecoder[A4],implicitevidence$625:kantan.csv.CellEncoder[A5],implicitevidence$626:kantan.csv.CellDecoder[A5],implicitevidence$627:kantan.csv.CellEncoder[A6],implicitevidence$628:kantan.csv.CellDecoder[A6],implicitevidence$629:kantan.csv.CellEncoder[A7],implicitevidence$630:kantan.csv.CellDecoder[A7],implicitevidence$631:kantan.csv.CellEncoder[A8],implicitevidence$632:kantan.csv.CellDecoder[A8],implicitevidence$633:kantan.csv.CellEncoder[A9],implicitevidence$634:kantan.csv.CellDecoder[A9],implicitevidence$635:kantan.csv.CellEncoder[A10],implicitevidence$636:kantan.csv.CellDecoder[A10],implicitevidence$637:kantan.csv.CellEncoder[A11],implicitevidence$638:kantan.csv.CellDecoder[A11]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$597:kantan.csv.CellEncoder[A1],implicitevidence$598:kantan.csv.CellDecoder[A1],implicitevidence$599:kantan.csv.CellEncoder[A2],implicitevidence$600:kantan.csv.CellDecoder[A2],implicitevidence$601:kantan.csv.CellEncoder[A3],implicitevidence$602:kantan.csv.CellDecoder[A3],implicitevidence$603:kantan.csv.CellEncoder[A4],implicitevidence$604:kantan.csv.CellDecoder[A4],implicitevidence$605:kantan.csv.CellEncoder[A5],implicitevidence$606:kantan.csv.CellDecoder[A5],implicitevidence$607:kantan.csv.CellEncoder[A6],implicitevidence$608:kantan.csv.CellDecoder[A6],implicitevidence$609:kantan.csv.CellEncoder[A7],implicitevidence$610:kantan.csv.CellDecoder[A7],implicitevidence$611:kantan.csv.CellEncoder[A8],implicitevidence$612:kantan.csv.CellDecoder[A8],implicitevidence$613:kantan.csv.CellEncoder[A9],implicitevidence$614:kantan.csv.CellDecoder[A9],implicitevidence$615:kantan.csv.CellEncoder[A10],implicitevidence$616:kantan.csv.CellDecoder[A10]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$579:kantan.csv.CellEncoder[A1],implicitevidence$580:kantan.csv.CellDecoder[A1],implicitevidence$581:kantan.csv.CellEncoder[A2],implicitevidence$582:kantan.csv.CellDecoder[A2],implicitevidence$583:kantan.csv.CellEncoder[A3],implicitevidence$584:kantan.csv.CellDecoder[A3],implicitevidence$585:kantan.csv.CellEncoder[A4],implicitevidence$586:kantan.csv.CellDecoder[A4],implicitevidence$587:kantan.csv.CellEncoder[A5],implicitevidence$588:kantan.csv.CellDecoder[A5],implicitevidence$589:kantan.csv.CellEncoder[A6],implicitevidence$590:kantan.csv.CellDecoder[A6],implicitevidence$591:kantan.csv.CellEncoder[A7],implicitevidence$592:kantan.csv.CellDecoder[A7],implicitevidence$593:kantan.csv.CellEncoder[A8],implicitevidence$594:kantan.csv.CellDecoder[A8],implicitevidence$595:kantan.csv.CellEncoder[A9],implicitevidence$596:kantan.csv.CellDecoder[A9]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$563:kantan.csv.CellEncoder[A1],implicitevidence$564:kantan.csv.CellDecoder[A1],implicitevidence$565:kantan.csv.CellEncoder[A2],implicitevidence$566:kantan.csv.CellDecoder[A2],implicitevidence$567:kantan.csv.CellEncoder[A3],implicitevidence$568:kantan.csv.CellDecoder[A3],implicitevidence$569:kantan.csv.CellEncoder[A4],implicitevidence$570:kantan.csv.CellDecoder[A4],implicitevidence$571:kantan.csv.CellEncoder[A5],implicitevidence$572:kantan.csv.CellDecoder[A5],implicitevidence$573:kantan.csv.CellEncoder[A6],implicitevidence$574:kantan.csv.CellDecoder[A6],implicitevidence$575:kantan.csv.CellEncoder[A7],implicitevidence$576:kantan.csv.CellDecoder[A7],implicitevidence$577:kantan.csv.CellEncoder[A8],implicitevidence$578:kantan.csv.CellDecoder[A8]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$549:kantan.csv.CellEncoder[A1],implicitevidence$550:kantan.csv.CellDecoder[A1],implicitevidence$551:kantan.csv.CellEncoder[A2],implicitevidence$552:kantan.csv.CellDecoder[A2],implicitevidence$553:kantan.csv.CellEncoder[A3],implicitevidence$554:kantan.csv.CellDecoder[A3],implicitevidence$555:kantan.csv.CellEncoder[A4],implicitevidence$556:kantan.csv.CellDecoder[A4],implicitevidence$557:kantan.csv.CellEncoder[A5],implicitevidence$558:kantan.csv.CellDecoder[A5],implicitevidence$559:kantan.csv.CellEncoder[A6],implicitevidence$560:kantan.csv.CellDecoder[A6],implicitevidence$561:kantan.csv.CellEncoder[A7],implicitevidence$562:kantan.csv.CellDecoder[A7]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$537:kantan.csv.CellEncoder[A1],implicitevidence$538:kantan.csv.CellDecoder[A1],implicitevidence$539:kantan.csv.CellEncoder[A2],implicitevidence$540:kantan.csv.CellDecoder[A2],implicitevidence$541:kantan.csv.CellEncoder[A3],implicitevidence$542:kantan.csv.CellDecoder[A3],implicitevidence$543:kantan.csv.CellEncoder[A4],implicitevidence$544:kantan.csv.CellDecoder[A4],implicitevidence$545:kantan.csv.CellEncoder[A5],implicitevidence$546:kantan.csv.CellDecoder[A5],implicitevidence$547:kantan.csv.CellEncoder[A6],implicitevidence$548:kantan.csv.CellDecoder[A6]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (A1, A2, A3, A4, A5) => C)(g: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,A5,C](f1:String,f2:String,f3:String,f4:String,f5:String)(f:(A1,A2,A3,A4,A5)=>C)(g:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$527:kantan.csv.CellEncoder[A1],implicitevidence$528:kantan.csv.CellDecoder[A1],implicitevidence$529:kantan.csv.CellEncoder[A2],implicitevidence$530:kantan.csv.CellDecoder[A2],implicitevidence$531:kantan.csv.CellEncoder[A3],implicitevidence$532:kantan.csv.CellDecoder[A3],implicitevidence$533:kantan.csv.CellEncoder[A4],implicitevidence$534:kantan.csv.CellDecoder[A4],implicitevidence$535:kantan.csv.CellEncoder[A5],implicitevidence$536:kantan.csv.CellDecoder[A5]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (A1, A2, A3, A4) => C)(g: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,A4,C](f1:String,f2:String,f3:String,f4:String)(f:(A1,A2,A3,A4)=>C)(g:C=>Option[(A1,A2,A3,A4)])(implicitevidence$519:kantan.csv.CellEncoder[A1],implicitevidence$520:kantan.csv.CellDecoder[A1],implicitevidence$521:kantan.csv.CellEncoder[A2],implicitevidence$522:kantan.csv.CellDecoder[A2],implicitevidence$523:kantan.csv.CellEncoder[A3],implicitevidence$524:kantan.csv.CellDecoder[A3],implicitevidence$525:kantan.csv.CellEncoder[A4],implicitevidence$526:kantan.csv.CellDecoder[A4]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String, f3: String)(f: (A1, A2, A3) => C)(g: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,A3,C](f1:String,f2:String,f3:String)(f:(A1,A2,A3)=>C)(g:C=>Option[(A1,A2,A3)])(implicitevidence$513:kantan.csv.CellEncoder[A1],implicitevidence$514:kantan.csv.CellDecoder[A1],implicitevidence$515:kantan.csv.CellEncoder[A2],implicitevidence$516:kantan.csv.CellDecoder[A2],implicitevidence$517:kantan.csv.CellEncoder[A3],implicitevidence$518:kantan.csv.CellDecoder[A3]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String, f2: String)(f: (A1, A2) => C)(g: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,A2,C](f1:String,f2:String)(f:(A1,A2)=>C)(g:C=>Option[(A1,A2)])(implicitevidence$509:kantan.csv.CellEncoder[A1],implicitevidence$510:kantan.csv.CellDecoder[A1],implicitevidence$511:kantan.csv.CellEncoder[A2],implicitevidence$512:kantan.csv.CellDecoder[A2]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f1: String)(f: (A1) => C)(g: (C) => Option[A1])(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.caseCodec", "link" : "kantan\/csv\/HeaderCodec$.html#caseCodec[A1,C](f1:String)(f:A1=>C)(g:C=>Option[A1])(implicitevidence$507:kantan.csv.CellEncoder[A1],implicitevidence$508:kantan.csv.CellDecoder[A1]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$463:kantan.csv.CellEncoder[A1],implicitevidence$464:kantan.csv.CellDecoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellDecoder[A2],implicitevidence$467:kantan.csv.CellEncoder[A3],implicitevidence$468:kantan.csv.CellDecoder[A3],implicitevidence$469:kantan.csv.CellEncoder[A4],implicitevidence$470:kantan.csv.CellDecoder[A4],implicitevidence$471:kantan.csv.CellEncoder[A5],implicitevidence$472:kantan.csv.CellDecoder[A5],implicitevidence$473:kantan.csv.CellEncoder[A6],implicitevidence$474:kantan.csv.CellDecoder[A6],implicitevidence$475:kantan.csv.CellEncoder[A7],implicitevidence$476:kantan.csv.CellDecoder[A7],implicitevidence$477:kantan.csv.CellEncoder[A8],implicitevidence$478:kantan.csv.CellDecoder[A8],implicitevidence$479:kantan.csv.CellEncoder[A9],implicitevidence$480:kantan.csv.CellDecoder[A9],implicitevidence$481:kantan.csv.CellEncoder[A10],implicitevidence$482:kantan.csv.CellDecoder[A10],implicitevidence$483:kantan.csv.CellEncoder[A11],implicitevidence$484:kantan.csv.CellDecoder[A11],implicitevidence$485:kantan.csv.CellEncoder[A12],implicitevidence$486:kantan.csv.CellDecoder[A12],implicitevidence$487:kantan.csv.CellEncoder[A13],implicitevidence$488:kantan.csv.CellDecoder[A13],implicitevidence$489:kantan.csv.CellEncoder[A14],implicitevidence$490:kantan.csv.CellDecoder[A14],implicitevidence$491:kantan.csv.CellEncoder[A15],implicitevidence$492:kantan.csv.CellDecoder[A15],implicitevidence$493:kantan.csv.CellEncoder[A16],implicitevidence$494:kantan.csv.CellDecoder[A16],implicitevidence$495:kantan.csv.CellEncoder[A17],implicitevidence$496:kantan.csv.CellDecoder[A17],implicitevidence$497:kantan.csv.CellEncoder[A18],implicitevidence$498:kantan.csv.CellDecoder[A18],implicitevidence$499:kantan.csv.CellEncoder[A19],implicitevidence$500:kantan.csv.CellDecoder[A19],implicitevidence$501:kantan.csv.CellEncoder[A20],implicitevidence$502:kantan.csv.CellDecoder[A20],implicitevidence$503:kantan.csv.CellEncoder[A21],implicitevidence$504:kantan.csv.CellDecoder[A21],implicitevidence$505:kantan.csv.CellEncoder[A22],implicitevidence$506:kantan.csv.CellDecoder[A22]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$421:kantan.csv.CellEncoder[A1],implicitevidence$422:kantan.csv.CellDecoder[A1],implicitevidence$423:kantan.csv.CellEncoder[A2],implicitevidence$424:kantan.csv.CellDecoder[A2],implicitevidence$425:kantan.csv.CellEncoder[A3],implicitevidence$426:kantan.csv.CellDecoder[A3],implicitevidence$427:kantan.csv.CellEncoder[A4],implicitevidence$428:kantan.csv.CellDecoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellDecoder[A5],implicitevidence$431:kantan.csv.CellEncoder[A6],implicitevidence$432:kantan.csv.CellDecoder[A6],implicitevidence$433:kantan.csv.CellEncoder[A7],implicitevidence$434:kantan.csv.CellDecoder[A7],implicitevidence$435:kantan.csv.CellEncoder[A8],implicitevidence$436:kantan.csv.CellDecoder[A8],implicitevidence$437:kantan.csv.CellEncoder[A9],implicitevidence$438:kantan.csv.CellDecoder[A9],implicitevidence$439:kantan.csv.CellEncoder[A10],implicitevidence$440:kantan.csv.CellDecoder[A10],implicitevidence$441:kantan.csv.CellEncoder[A11],implicitevidence$442:kantan.csv.CellDecoder[A11],implicitevidence$443:kantan.csv.CellEncoder[A12],implicitevidence$444:kantan.csv.CellDecoder[A12],implicitevidence$445:kantan.csv.CellEncoder[A13],implicitevidence$446:kantan.csv.CellDecoder[A13],implicitevidence$447:kantan.csv.CellEncoder[A14],implicitevidence$448:kantan.csv.CellDecoder[A14],implicitevidence$449:kantan.csv.CellEncoder[A15],implicitevidence$450:kantan.csv.CellDecoder[A15],implicitevidence$451:kantan.csv.CellEncoder[A16],implicitevidence$452:kantan.csv.CellDecoder[A16],implicitevidence$453:kantan.csv.CellEncoder[A17],implicitevidence$454:kantan.csv.CellDecoder[A17],implicitevidence$455:kantan.csv.CellEncoder[A18],implicitevidence$456:kantan.csv.CellDecoder[A18],implicitevidence$457:kantan.csv.CellEncoder[A19],implicitevidence$458:kantan.csv.CellDecoder[A19],implicitevidence$459:kantan.csv.CellEncoder[A20],implicitevidence$460:kantan.csv.CellDecoder[A20],implicitevidence$461:kantan.csv.CellEncoder[A21],implicitevidence$462:kantan.csv.CellDecoder[A21]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$381:kantan.csv.CellEncoder[A1],implicitevidence$382:kantan.csv.CellDecoder[A1],implicitevidence$383:kantan.csv.CellEncoder[A2],implicitevidence$384:kantan.csv.CellDecoder[A2],implicitevidence$385:kantan.csv.CellEncoder[A3],implicitevidence$386:kantan.csv.CellDecoder[A3],implicitevidence$387:kantan.csv.CellEncoder[A4],implicitevidence$388:kantan.csv.CellDecoder[A4],implicitevidence$389:kantan.csv.CellEncoder[A5],implicitevidence$390:kantan.csv.CellDecoder[A5],implicitevidence$391:kantan.csv.CellEncoder[A6],implicitevidence$392:kantan.csv.CellDecoder[A6],implicitevidence$393:kantan.csv.CellEncoder[A7],implicitevidence$394:kantan.csv.CellDecoder[A7],implicitevidence$395:kantan.csv.CellEncoder[A8],implicitevidence$396:kantan.csv.CellDecoder[A8],implicitevidence$397:kantan.csv.CellEncoder[A9],implicitevidence$398:kantan.csv.CellDecoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellDecoder[A10],implicitevidence$401:kantan.csv.CellEncoder[A11],implicitevidence$402:kantan.csv.CellDecoder[A11],implicitevidence$403:kantan.csv.CellEncoder[A12],implicitevidence$404:kantan.csv.CellDecoder[A12],implicitevidence$405:kantan.csv.CellEncoder[A13],implicitevidence$406:kantan.csv.CellDecoder[A13],implicitevidence$407:kantan.csv.CellEncoder[A14],implicitevidence$408:kantan.csv.CellDecoder[A14],implicitevidence$409:kantan.csv.CellEncoder[A15],implicitevidence$410:kantan.csv.CellDecoder[A15],implicitevidence$411:kantan.csv.CellEncoder[A16],implicitevidence$412:kantan.csv.CellDecoder[A16],implicitevidence$413:kantan.csv.CellEncoder[A17],implicitevidence$414:kantan.csv.CellDecoder[A17],implicitevidence$415:kantan.csv.CellEncoder[A18],implicitevidence$416:kantan.csv.CellDecoder[A18],implicitevidence$417:kantan.csv.CellEncoder[A19],implicitevidence$418:kantan.csv.CellDecoder[A19],implicitevidence$419:kantan.csv.CellEncoder[A20],implicitevidence$420:kantan.csv.CellDecoder[A20]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$343:kantan.csv.CellEncoder[A1],implicitevidence$344:kantan.csv.CellDecoder[A1],implicitevidence$345:kantan.csv.CellEncoder[A2],implicitevidence$346:kantan.csv.CellDecoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellDecoder[A3],implicitevidence$349:kantan.csv.CellEncoder[A4],implicitevidence$350:kantan.csv.CellDecoder[A4],implicitevidence$351:kantan.csv.CellEncoder[A5],implicitevidence$352:kantan.csv.CellDecoder[A5],implicitevidence$353:kantan.csv.CellEncoder[A6],implicitevidence$354:kantan.csv.CellDecoder[A6],implicitevidence$355:kantan.csv.CellEncoder[A7],implicitevidence$356:kantan.csv.CellDecoder[A7],implicitevidence$357:kantan.csv.CellEncoder[A8],implicitevidence$358:kantan.csv.CellDecoder[A8],implicitevidence$359:kantan.csv.CellEncoder[A9],implicitevidence$360:kantan.csv.CellDecoder[A9],implicitevidence$361:kantan.csv.CellEncoder[A10],implicitevidence$362:kantan.csv.CellDecoder[A10],implicitevidence$363:kantan.csv.CellEncoder[A11],implicitevidence$364:kantan.csv.CellDecoder[A11],implicitevidence$365:kantan.csv.CellEncoder[A12],implicitevidence$366:kantan.csv.CellDecoder[A12],implicitevidence$367:kantan.csv.CellEncoder[A13],implicitevidence$368:kantan.csv.CellDecoder[A13],implicitevidence$369:kantan.csv.CellEncoder[A14],implicitevidence$370:kantan.csv.CellDecoder[A14],implicitevidence$371:kantan.csv.CellEncoder[A15],implicitevidence$372:kantan.csv.CellDecoder[A15],implicitevidence$373:kantan.csv.CellEncoder[A16],implicitevidence$374:kantan.csv.CellDecoder[A16],implicitevidence$375:kantan.csv.CellEncoder[A17],implicitevidence$376:kantan.csv.CellDecoder[A17],implicitevidence$377:kantan.csv.CellEncoder[A18],implicitevidence$378:kantan.csv.CellDecoder[A18],implicitevidence$379:kantan.csv.CellEncoder[A19],implicitevidence$380:kantan.csv.CellDecoder[A19]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$307:kantan.csv.CellEncoder[A1],implicitevidence$308:kantan.csv.CellDecoder[A1],implicitevidence$309:kantan.csv.CellEncoder[A2],implicitevidence$310:kantan.csv.CellDecoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellDecoder[A3],implicitevidence$313:kantan.csv.CellEncoder[A4],implicitevidence$314:kantan.csv.CellDecoder[A4],implicitevidence$315:kantan.csv.CellEncoder[A5],implicitevidence$316:kantan.csv.CellDecoder[A5],implicitevidence$317:kantan.csv.CellEncoder[A6],implicitevidence$318:kantan.csv.CellDecoder[A6],implicitevidence$319:kantan.csv.CellEncoder[A7],implicitevidence$320:kantan.csv.CellDecoder[A7],implicitevidence$321:kantan.csv.CellEncoder[A8],implicitevidence$322:kantan.csv.CellDecoder[A8],implicitevidence$323:kantan.csv.CellEncoder[A9],implicitevidence$324:kantan.csv.CellDecoder[A9],implicitevidence$325:kantan.csv.CellEncoder[A10],implicitevidence$326:kantan.csv.CellDecoder[A10],implicitevidence$327:kantan.csv.CellEncoder[A11],implicitevidence$328:kantan.csv.CellDecoder[A11],implicitevidence$329:kantan.csv.CellEncoder[A12],implicitevidence$330:kantan.csv.CellDecoder[A12],implicitevidence$331:kantan.csv.CellEncoder[A13],implicitevidence$332:kantan.csv.CellDecoder[A13],implicitevidence$333:kantan.csv.CellEncoder[A14],implicitevidence$334:kantan.csv.CellDecoder[A14],implicitevidence$335:kantan.csv.CellEncoder[A15],implicitevidence$336:kantan.csv.CellDecoder[A15],implicitevidence$337:kantan.csv.CellEncoder[A16],implicitevidence$338:kantan.csv.CellDecoder[A16],implicitevidence$339:kantan.csv.CellEncoder[A17],implicitevidence$340:kantan.csv.CellDecoder[A17],implicitevidence$341:kantan.csv.CellEncoder[A18],implicitevidence$342:kantan.csv.CellDecoder[A18]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$273:kantan.csv.CellEncoder[A1],implicitevidence$274:kantan.csv.CellDecoder[A1],implicitevidence$275:kantan.csv.CellEncoder[A2],implicitevidence$276:kantan.csv.CellDecoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellDecoder[A3],implicitevidence$279:kantan.csv.CellEncoder[A4],implicitevidence$280:kantan.csv.CellDecoder[A4],implicitevidence$281:kantan.csv.CellEncoder[A5],implicitevidence$282:kantan.csv.CellDecoder[A5],implicitevidence$283:kantan.csv.CellEncoder[A6],implicitevidence$284:kantan.csv.CellDecoder[A6],implicitevidence$285:kantan.csv.CellEncoder[A7],implicitevidence$286:kantan.csv.CellDecoder[A7],implicitevidence$287:kantan.csv.CellEncoder[A8],implicitevidence$288:kantan.csv.CellDecoder[A8],implicitevidence$289:kantan.csv.CellEncoder[A9],implicitevidence$290:kantan.csv.CellDecoder[A9],implicitevidence$291:kantan.csv.CellEncoder[A10],implicitevidence$292:kantan.csv.CellDecoder[A10],implicitevidence$293:kantan.csv.CellEncoder[A11],implicitevidence$294:kantan.csv.CellDecoder[A11],implicitevidence$295:kantan.csv.CellEncoder[A12],implicitevidence$296:kantan.csv.CellDecoder[A12],implicitevidence$297:kantan.csv.CellEncoder[A13],implicitevidence$298:kantan.csv.CellDecoder[A13],implicitevidence$299:kantan.csv.CellEncoder[A14],implicitevidence$300:kantan.csv.CellDecoder[A14],implicitevidence$301:kantan.csv.CellEncoder[A15],implicitevidence$302:kantan.csv.CellDecoder[A15],implicitevidence$303:kantan.csv.CellEncoder[A16],implicitevidence$304:kantan.csv.CellDecoder[A16],implicitevidence$305:kantan.csv.CellEncoder[A17],implicitevidence$306:kantan.csv.CellDecoder[A17]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$241:kantan.csv.CellEncoder[A1],implicitevidence$242:kantan.csv.CellDecoder[A1],implicitevidence$243:kantan.csv.CellEncoder[A2],implicitevidence$244:kantan.csv.CellDecoder[A2],implicitevidence$245:kantan.csv.CellEncoder[A3],implicitevidence$246:kantan.csv.CellDecoder[A3],implicitevidence$247:kantan.csv.CellEncoder[A4],implicitevidence$248:kantan.csv.CellDecoder[A4],implicitevidence$249:kantan.csv.CellEncoder[A5],implicitevidence$250:kantan.csv.CellDecoder[A5],implicitevidence$251:kantan.csv.CellEncoder[A6],implicitevidence$252:kantan.csv.CellDecoder[A6],implicitevidence$253:kantan.csv.CellEncoder[A7],implicitevidence$254:kantan.csv.CellDecoder[A7],implicitevidence$255:kantan.csv.CellEncoder[A8],implicitevidence$256:kantan.csv.CellDecoder[A8],implicitevidence$257:kantan.csv.CellEncoder[A9],implicitevidence$258:kantan.csv.CellDecoder[A9],implicitevidence$259:kantan.csv.CellEncoder[A10],implicitevidence$260:kantan.csv.CellDecoder[A10],implicitevidence$261:kantan.csv.CellEncoder[A11],implicitevidence$262:kantan.csv.CellDecoder[A11],implicitevidence$263:kantan.csv.CellEncoder[A12],implicitevidence$264:kantan.csv.CellDecoder[A12],implicitevidence$265:kantan.csv.CellEncoder[A13],implicitevidence$266:kantan.csv.CellDecoder[A13],implicitevidence$267:kantan.csv.CellEncoder[A14],implicitevidence$268:kantan.csv.CellDecoder[A14],implicitevidence$269:kantan.csv.CellEncoder[A15],implicitevidence$270:kantan.csv.CellDecoder[A15],implicitevidence$271:kantan.csv.CellEncoder[A16],implicitevidence$272:kantan.csv.CellDecoder[A16]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$211:kantan.csv.CellEncoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A1],implicitevidence$213:kantan.csv.CellEncoder[A2],implicitevidence$214:kantan.csv.CellDecoder[A2],implicitevidence$215:kantan.csv.CellEncoder[A3],implicitevidence$216:kantan.csv.CellDecoder[A3],implicitevidence$217:kantan.csv.CellEncoder[A4],implicitevidence$218:kantan.csv.CellDecoder[A4],implicitevidence$219:kantan.csv.CellEncoder[A5],implicitevidence$220:kantan.csv.CellDecoder[A5],implicitevidence$221:kantan.csv.CellEncoder[A6],implicitevidence$222:kantan.csv.CellDecoder[A6],implicitevidence$223:kantan.csv.CellEncoder[A7],implicitevidence$224:kantan.csv.CellDecoder[A7],implicitevidence$225:kantan.csv.CellEncoder[A8],implicitevidence$226:kantan.csv.CellDecoder[A8],implicitevidence$227:kantan.csv.CellEncoder[A9],implicitevidence$228:kantan.csv.CellDecoder[A9],implicitevidence$229:kantan.csv.CellEncoder[A10],implicitevidence$230:kantan.csv.CellDecoder[A10],implicitevidence$231:kantan.csv.CellEncoder[A11],implicitevidence$232:kantan.csv.CellDecoder[A11],implicitevidence$233:kantan.csv.CellEncoder[A12],implicitevidence$234:kantan.csv.CellDecoder[A12],implicitevidence$235:kantan.csv.CellEncoder[A13],implicitevidence$236:kantan.csv.CellDecoder[A13],implicitevidence$237:kantan.csv.CellEncoder[A14],implicitevidence$238:kantan.csv.CellDecoder[A14],implicitevidence$239:kantan.csv.CellEncoder[A15],implicitevidence$240:kantan.csv.CellDecoder[A15]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$183:kantan.csv.CellEncoder[A1],implicitevidence$184:kantan.csv.CellDecoder[A1],implicitevidence$185:kantan.csv.CellEncoder[A2],implicitevidence$186:kantan.csv.CellDecoder[A2],implicitevidence$187:kantan.csv.CellEncoder[A3],implicitevidence$188:kantan.csv.CellDecoder[A3],implicitevidence$189:kantan.csv.CellEncoder[A4],implicitevidence$190:kantan.csv.CellDecoder[A4],implicitevidence$191:kantan.csv.CellEncoder[A5],implicitevidence$192:kantan.csv.CellDecoder[A5],implicitevidence$193:kantan.csv.CellEncoder[A6],implicitevidence$194:kantan.csv.CellDecoder[A6],implicitevidence$195:kantan.csv.CellEncoder[A7],implicitevidence$196:kantan.csv.CellDecoder[A7],implicitevidence$197:kantan.csv.CellEncoder[A8],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellEncoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A9],implicitevidence$201:kantan.csv.CellEncoder[A10],implicitevidence$202:kantan.csv.CellDecoder[A10],implicitevidence$203:kantan.csv.CellEncoder[A11],implicitevidence$204:kantan.csv.CellDecoder[A11],implicitevidence$205:kantan.csv.CellEncoder[A12],implicitevidence$206:kantan.csv.CellDecoder[A12],implicitevidence$207:kantan.csv.CellEncoder[A13],implicitevidence$208:kantan.csv.CellDecoder[A13],implicitevidence$209:kantan.csv.CellEncoder[A14],implicitevidence$210:kantan.csv.CellDecoder[A14]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$157:kantan.csv.CellEncoder[A1],implicitevidence$158:kantan.csv.CellDecoder[A1],implicitevidence$159:kantan.csv.CellEncoder[A2],implicitevidence$160:kantan.csv.CellDecoder[A2],implicitevidence$161:kantan.csv.CellEncoder[A3],implicitevidence$162:kantan.csv.CellDecoder[A3],implicitevidence$163:kantan.csv.CellEncoder[A4],implicitevidence$164:kantan.csv.CellDecoder[A4],implicitevidence$165:kantan.csv.CellEncoder[A5],implicitevidence$166:kantan.csv.CellDecoder[A5],implicitevidence$167:kantan.csv.CellEncoder[A6],implicitevidence$168:kantan.csv.CellDecoder[A6],implicitevidence$169:kantan.csv.CellEncoder[A7],implicitevidence$170:kantan.csv.CellDecoder[A7],implicitevidence$171:kantan.csv.CellEncoder[A8],implicitevidence$172:kantan.csv.CellDecoder[A8],implicitevidence$173:kantan.csv.CellEncoder[A9],implicitevidence$174:kantan.csv.CellDecoder[A9],implicitevidence$175:kantan.csv.CellEncoder[A10],implicitevidence$176:kantan.csv.CellDecoder[A10],implicitevidence$177:kantan.csv.CellEncoder[A11],implicitevidence$178:kantan.csv.CellDecoder[A11],implicitevidence$179:kantan.csv.CellEncoder[A12],implicitevidence$180:kantan.csv.CellDecoder[A12],implicitevidence$181:kantan.csv.CellEncoder[A13],implicitevidence$182:kantan.csv.CellDecoder[A13]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$133:kantan.csv.CellEncoder[A1],implicitevidence$134:kantan.csv.CellDecoder[A1],implicitevidence$135:kantan.csv.CellEncoder[A2],implicitevidence$136:kantan.csv.CellDecoder[A2],implicitevidence$137:kantan.csv.CellEncoder[A3],implicitevidence$138:kantan.csv.CellDecoder[A3],implicitevidence$139:kantan.csv.CellEncoder[A4],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellEncoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A5],implicitevidence$143:kantan.csv.CellEncoder[A6],implicitevidence$144:kantan.csv.CellDecoder[A6],implicitevidence$145:kantan.csv.CellEncoder[A7],implicitevidence$146:kantan.csv.CellDecoder[A7],implicitevidence$147:kantan.csv.CellEncoder[A8],implicitevidence$148:kantan.csv.CellDecoder[A8],implicitevidence$149:kantan.csv.CellEncoder[A9],implicitevidence$150:kantan.csv.CellDecoder[A9],implicitevidence$151:kantan.csv.CellEncoder[A10],implicitevidence$152:kantan.csv.CellDecoder[A10],implicitevidence$153:kantan.csv.CellEncoder[A11],implicitevidence$154:kantan.csv.CellDecoder[A11],implicitevidence$155:kantan.csv.CellEncoder[A12],implicitevidence$156:kantan.csv.CellDecoder[A12]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$111:kantan.csv.CellEncoder[A1],implicitevidence$112:kantan.csv.CellDecoder[A1],implicitevidence$113:kantan.csv.CellEncoder[A2],implicitevidence$114:kantan.csv.CellDecoder[A2],implicitevidence$115:kantan.csv.CellEncoder[A3],implicitevidence$116:kantan.csv.CellDecoder[A3],implicitevidence$117:kantan.csv.CellEncoder[A4],implicitevidence$118:kantan.csv.CellDecoder[A4],implicitevidence$119:kantan.csv.CellEncoder[A5],implicitevidence$120:kantan.csv.CellDecoder[A5],implicitevidence$121:kantan.csv.CellEncoder[A6],implicitevidence$122:kantan.csv.CellDecoder[A6],implicitevidence$123:kantan.csv.CellEncoder[A7],implicitevidence$124:kantan.csv.CellDecoder[A7],implicitevidence$125:kantan.csv.CellEncoder[A8],implicitevidence$126:kantan.csv.CellDecoder[A8],implicitevidence$127:kantan.csv.CellEncoder[A9],implicitevidence$128:kantan.csv.CellDecoder[A9],implicitevidence$129:kantan.csv.CellEncoder[A10],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellEncoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A11]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$91:kantan.csv.CellEncoder[A1],implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellEncoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A2],implicitevidence$95:kantan.csv.CellEncoder[A3],implicitevidence$96:kantan.csv.CellDecoder[A3],implicitevidence$97:kantan.csv.CellEncoder[A4],implicitevidence$98:kantan.csv.CellDecoder[A4],implicitevidence$99:kantan.csv.CellEncoder[A5],implicitevidence$100:kantan.csv.CellDecoder[A5],implicitevidence$101:kantan.csv.CellEncoder[A6],implicitevidence$102:kantan.csv.CellDecoder[A6],implicitevidence$103:kantan.csv.CellEncoder[A7],implicitevidence$104:kantan.csv.CellDecoder[A7],implicitevidence$105:kantan.csv.CellEncoder[A8],implicitevidence$106:kantan.csv.CellDecoder[A8],implicitevidence$107:kantan.csv.CellEncoder[A9],implicitevidence$108:kantan.csv.CellDecoder[A9],implicitevidence$109:kantan.csv.CellEncoder[A10],implicitevidence$110:kantan.csv.CellDecoder[A10]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$73:kantan.csv.CellEncoder[A1],implicitevidence$74:kantan.csv.CellDecoder[A1],implicitevidence$75:kantan.csv.CellEncoder[A2],implicitevidence$76:kantan.csv.CellDecoder[A2],implicitevidence$77:kantan.csv.CellEncoder[A3],implicitevidence$78:kantan.csv.CellDecoder[A3],implicitevidence$79:kantan.csv.CellEncoder[A4],implicitevidence$80:kantan.csv.CellDecoder[A4],implicitevidence$81:kantan.csv.CellEncoder[A5],implicitevidence$82:kantan.csv.CellDecoder[A5],implicitevidence$83:kantan.csv.CellEncoder[A6],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellEncoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A7],implicitevidence$87:kantan.csv.CellEncoder[A8],implicitevidence$88:kantan.csv.CellDecoder[A8],implicitevidence$89:kantan.csv.CellEncoder[A9],implicitevidence$90:kantan.csv.CellDecoder[A9]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$57:kantan.csv.CellEncoder[A1],implicitevidence$58:kantan.csv.CellDecoder[A1],implicitevidence$59:kantan.csv.CellEncoder[A2],implicitevidence$60:kantan.csv.CellDecoder[A2],implicitevidence$61:kantan.csv.CellEncoder[A3],implicitevidence$62:kantan.csv.CellDecoder[A3],implicitevidence$63:kantan.csv.CellEncoder[A4],implicitevidence$64:kantan.csv.CellDecoder[A4],implicitevidence$65:kantan.csv.CellEncoder[A5],implicitevidence$66:kantan.csv.CellDecoder[A5],implicitevidence$67:kantan.csv.CellEncoder[A6],implicitevidence$68:kantan.csv.CellDecoder[A6],implicitevidence$69:kantan.csv.CellEncoder[A7],implicitevidence$70:kantan.csv.CellDecoder[A7],implicitevidence$71:kantan.csv.CellEncoder[A8],implicitevidence$72:kantan.csv.CellDecoder[A8]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$43:kantan.csv.CellEncoder[A1],implicitevidence$44:kantan.csv.CellDecoder[A1],implicitevidence$45:kantan.csv.CellEncoder[A2],implicitevidence$46:kantan.csv.CellDecoder[A2],implicitevidence$47:kantan.csv.CellEncoder[A3],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellEncoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A4],implicitevidence$51:kantan.csv.CellEncoder[A5],implicitevidence$52:kantan.csv.CellDecoder[A5],implicitevidence$53:kantan.csv.CellEncoder[A6],implicitevidence$54:kantan.csv.CellDecoder[A6],implicitevidence$55:kantan.csv.CellEncoder[A7],implicitevidence$56:kantan.csv.CellDecoder[A7]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,A6,C](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$31:kantan.csv.CellEncoder[A1],implicitevidence$32:kantan.csv.CellDecoder[A1],implicitevidence$33:kantan.csv.CellEncoder[A2],implicitevidence$34:kantan.csv.CellDecoder[A2],implicitevidence$35:kantan.csv.CellEncoder[A3],implicitevidence$36:kantan.csv.CellDecoder[A3],implicitevidence$37:kantan.csv.CellEncoder[A4],implicitevidence$38:kantan.csv.CellDecoder[A4],implicitevidence$39:kantan.csv.CellEncoder[A5],implicitevidence$40:kantan.csv.CellDecoder[A5],implicitevidence$41:kantan.csv.CellEncoder[A6],implicitevidence$42:kantan.csv.CellDecoder[A6]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (A1, A2, A3, A4, A5) => C)(g: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,A5,C](f1:String,f2:String,f3:String,f4:String,f5:String)(f:(A1,A2,A3,A4,A5)=>C)(g:C=>(A1,A2,A3,A4,A5))(implicitevidence$21:kantan.csv.CellEncoder[A1],implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellEncoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A2],implicitevidence$25:kantan.csv.CellEncoder[A3],implicitevidence$26:kantan.csv.CellDecoder[A3],implicitevidence$27:kantan.csv.CellEncoder[A4],implicitevidence$28:kantan.csv.CellDecoder[A4],implicitevidence$29:kantan.csv.CellEncoder[A5],implicitevidence$30:kantan.csv.CellDecoder[A5]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (A1, A2, A3, A4) => C)(g: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,A4,C](f1:String,f2:String,f3:String,f4:String)(f:(A1,A2,A3,A4)=>C)(g:C=>(A1,A2,A3,A4))(implicitevidence$13:kantan.csv.CellEncoder[A1],implicitevidence$14:kantan.csv.CellDecoder[A1],implicitevidence$15:kantan.csv.CellEncoder[A2],implicitevidence$16:kantan.csv.CellDecoder[A2],implicitevidence$17:kantan.csv.CellEncoder[A3],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellEncoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A4]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String, f3: String)(f: (A1, A2, A3) => C)(g: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,A3,C](f1:String,f2:String,f3:String)(f:(A1,A2,A3)=>C)(g:C=>(A1,A2,A3))(implicitevidence$7:kantan.csv.CellEncoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A1],implicitevidence$9:kantan.csv.CellEncoder[A2],implicitevidence$10:kantan.csv.CellDecoder[A2],implicitevidence$11:kantan.csv.CellEncoder[A3],implicitevidence$12:kantan.csv.CellDecoder[A3]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String, f2: String)(f: (A1, A2) => C)(g: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,A2,C](f1:String,f2:String)(f:(A1,A2)=>C)(g:C=>(A1,A2))(implicitevidence$3:kantan.csv.CellEncoder[A1],implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellEncoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A2]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f1: String)(f: (A1) => C)(g: (C) => A1)(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): HeaderCodec[C]", "member" : "kantan.csv.GeneratedHeaderCodecs.codec", "link" : "kantan\/csv\/HeaderCodec$.html#codec[A1,C](f1:String)(f:A1=>C)(g:C=>A1)(implicitevidence$1:kantan.csv.CellEncoder[A1],implicitevidence$2:kantan.csv.CellDecoder[A1]):kantan.csv.HeaderCodec[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderCodec$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderCodec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/HeaderCodec.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(f: (A) => B): HeaderDecoder[B]", "member" : "kantan.csv.HeaderDecoder.map", "link" : "kantan\/csv\/HeaderCodec.html#map[B](f:A=>B):kantan.csv.HeaderDecoder[B]", "kind" : "def"}, {"label" : "~", "tail" : "(that: HeaderDecoder[B])(zippable: Zippable[A, B]): HeaderDecoder[Out]", "member" : "kantan.csv.HeaderDecoder.~", "link" : "kantan\/csv\/HeaderCodec.html#~[B](that:kantan.csv.HeaderDecoder[B])(implicitzippable:kantan.csv.Zippable[A,B]):kantan.csv.HeaderDecoder[zippable.Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderCodec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderCodec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "noHeader", "tail" : "(): RowDecoder[A]", "member" : "kantan.csv.HeaderDecoder.noHeader", "link" : "kantan\/csv\/HeaderCodec.html#noHeader:kantan.csv.RowDecoder[A]", "kind" : "abstract def"}, {"label" : "fromHeader", "tail" : "(header: Seq[String]): DecodeResult[RowDecoder[A]]", "member" : "kantan.csv.HeaderDecoder.fromHeader", "link" : "kantan\/csv\/HeaderCodec.html#fromHeader(header:Seq[String]):kantan.csv.DecodeResult[kantan.csv.RowDecoder[A]]", "kind" : "abstract def"}, {"label" : "rowEncoder", "tail" : "(): RowEncoder[A]", "member" : "kantan.csv.HeaderEncoder.rowEncoder", "link" : "kantan\/csv\/HeaderCodec.html#rowEncoder:kantan.csv.RowEncoder[A]", "kind" : "abstract def"}, {"label" : "header", "tail" : "(): Option[Seq[String]]", "member" : "kantan.csv.HeaderEncoder.header", "link" : "kantan\/csv\/HeaderCodec.html#header:Option[Seq[String]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.HeaderDecoder", "object" : "kantan\/csv\/HeaderDecoder$.html", "members_object" : [{"label" : "defaultHeaderDecoder", "tail" : "(arg0: RowDecoder[A]): HeaderDecoder[A]", "member" : "kantan.csv.HeaderDecoder.defaultHeaderDecoder", "link" : "kantan\/csv\/HeaderDecoder$.html#defaultHeaderDecoder[A](implicitevidence$1:kantan.csv.RowDecoder[A]):kantan.csv.HeaderDecoder[A]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(ev: HeaderDecoder[A]): HeaderDecoder[A]", "member" : "kantan.csv.HeaderDecoder.apply", "link" : "kantan\/csv\/HeaderDecoder$.html#apply[A](implicitev:kantan.csv.HeaderDecoder[A]):kantan.csv.HeaderDecoder[A]", "kind" : "macro def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21], arg21: CellDecoder[A22]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>R)(implicitevidence$232:kantan.csv.CellDecoder[A1],implicitevidence$233:kantan.csv.CellDecoder[A2],implicitevidence$234:kantan.csv.CellDecoder[A3],implicitevidence$235:kantan.csv.CellDecoder[A4],implicitevidence$236:kantan.csv.CellDecoder[A5],implicitevidence$237:kantan.csv.CellDecoder[A6],implicitevidence$238:kantan.csv.CellDecoder[A7],implicitevidence$239:kantan.csv.CellDecoder[A8],implicitevidence$240:kantan.csv.CellDecoder[A9],implicitevidence$241:kantan.csv.CellDecoder[A10],implicitevidence$242:kantan.csv.CellDecoder[A11],implicitevidence$243:kantan.csv.CellDecoder[A12],implicitevidence$244:kantan.csv.CellDecoder[A13],implicitevidence$245:kantan.csv.CellDecoder[A14],implicitevidence$246:kantan.csv.CellDecoder[A15],implicitevidence$247:kantan.csv.CellDecoder[A16],implicitevidence$248:kantan.csv.CellDecoder[A17],implicitevidence$249:kantan.csv.CellDecoder[A18],implicitevidence$250:kantan.csv.CellDecoder[A19],implicitevidence$251:kantan.csv.CellDecoder[A20],implicitevidence$252:kantan.csv.CellDecoder[A21],implicitevidence$253:kantan.csv.CellDecoder[A22]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>R)(implicitevidence$211:kantan.csv.CellDecoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A2],implicitevidence$213:kantan.csv.CellDecoder[A3],implicitevidence$214:kantan.csv.CellDecoder[A4],implicitevidence$215:kantan.csv.CellDecoder[A5],implicitevidence$216:kantan.csv.CellDecoder[A6],implicitevidence$217:kantan.csv.CellDecoder[A7],implicitevidence$218:kantan.csv.CellDecoder[A8],implicitevidence$219:kantan.csv.CellDecoder[A9],implicitevidence$220:kantan.csv.CellDecoder[A10],implicitevidence$221:kantan.csv.CellDecoder[A11],implicitevidence$222:kantan.csv.CellDecoder[A12],implicitevidence$223:kantan.csv.CellDecoder[A13],implicitevidence$224:kantan.csv.CellDecoder[A14],implicitevidence$225:kantan.csv.CellDecoder[A15],implicitevidence$226:kantan.csv.CellDecoder[A16],implicitevidence$227:kantan.csv.CellDecoder[A17],implicitevidence$228:kantan.csv.CellDecoder[A18],implicitevidence$229:kantan.csv.CellDecoder[A19],implicitevidence$230:kantan.csv.CellDecoder[A20],implicitevidence$231:kantan.csv.CellDecoder[A21]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>R)(implicitevidence$191:kantan.csv.CellDecoder[A1],implicitevidence$192:kantan.csv.CellDecoder[A2],implicitevidence$193:kantan.csv.CellDecoder[A3],implicitevidence$194:kantan.csv.CellDecoder[A4],implicitevidence$195:kantan.csv.CellDecoder[A5],implicitevidence$196:kantan.csv.CellDecoder[A6],implicitevidence$197:kantan.csv.CellDecoder[A7],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellDecoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A10],implicitevidence$201:kantan.csv.CellDecoder[A11],implicitevidence$202:kantan.csv.CellDecoder[A12],implicitevidence$203:kantan.csv.CellDecoder[A13],implicitevidence$204:kantan.csv.CellDecoder[A14],implicitevidence$205:kantan.csv.CellDecoder[A15],implicitevidence$206:kantan.csv.CellDecoder[A16],implicitevidence$207:kantan.csv.CellDecoder[A17],implicitevidence$208:kantan.csv.CellDecoder[A18],implicitevidence$209:kantan.csv.CellDecoder[A19],implicitevidence$210:kantan.csv.CellDecoder[A20]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>R)(implicitevidence$172:kantan.csv.CellDecoder[A1],implicitevidence$173:kantan.csv.CellDecoder[A2],implicitevidence$174:kantan.csv.CellDecoder[A3],implicitevidence$175:kantan.csv.CellDecoder[A4],implicitevidence$176:kantan.csv.CellDecoder[A5],implicitevidence$177:kantan.csv.CellDecoder[A6],implicitevidence$178:kantan.csv.CellDecoder[A7],implicitevidence$179:kantan.csv.CellDecoder[A8],implicitevidence$180:kantan.csv.CellDecoder[A9],implicitevidence$181:kantan.csv.CellDecoder[A10],implicitevidence$182:kantan.csv.CellDecoder[A11],implicitevidence$183:kantan.csv.CellDecoder[A12],implicitevidence$184:kantan.csv.CellDecoder[A13],implicitevidence$185:kantan.csv.CellDecoder[A14],implicitevidence$186:kantan.csv.CellDecoder[A15],implicitevidence$187:kantan.csv.CellDecoder[A16],implicitevidence$188:kantan.csv.CellDecoder[A17],implicitevidence$189:kantan.csv.CellDecoder[A18],implicitevidence$190:kantan.csv.CellDecoder[A19]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>R)(implicitevidence$154:kantan.csv.CellDecoder[A1],implicitevidence$155:kantan.csv.CellDecoder[A2],implicitevidence$156:kantan.csv.CellDecoder[A3],implicitevidence$157:kantan.csv.CellDecoder[A4],implicitevidence$158:kantan.csv.CellDecoder[A5],implicitevidence$159:kantan.csv.CellDecoder[A6],implicitevidence$160:kantan.csv.CellDecoder[A7],implicitevidence$161:kantan.csv.CellDecoder[A8],implicitevidence$162:kantan.csv.CellDecoder[A9],implicitevidence$163:kantan.csv.CellDecoder[A10],implicitevidence$164:kantan.csv.CellDecoder[A11],implicitevidence$165:kantan.csv.CellDecoder[A12],implicitevidence$166:kantan.csv.CellDecoder[A13],implicitevidence$167:kantan.csv.CellDecoder[A14],implicitevidence$168:kantan.csv.CellDecoder[A15],implicitevidence$169:kantan.csv.CellDecoder[A16],implicitevidence$170:kantan.csv.CellDecoder[A17],implicitevidence$171:kantan.csv.CellDecoder[A18]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>R)(implicitevidence$137:kantan.csv.CellDecoder[A1],implicitevidence$138:kantan.csv.CellDecoder[A2],implicitevidence$139:kantan.csv.CellDecoder[A3],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellDecoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A6],implicitevidence$143:kantan.csv.CellDecoder[A7],implicitevidence$144:kantan.csv.CellDecoder[A8],implicitevidence$145:kantan.csv.CellDecoder[A9],implicitevidence$146:kantan.csv.CellDecoder[A10],implicitevidence$147:kantan.csv.CellDecoder[A11],implicitevidence$148:kantan.csv.CellDecoder[A12],implicitevidence$149:kantan.csv.CellDecoder[A13],implicitevidence$150:kantan.csv.CellDecoder[A14],implicitevidence$151:kantan.csv.CellDecoder[A15],implicitevidence$152:kantan.csv.CellDecoder[A16],implicitevidence$153:kantan.csv.CellDecoder[A17]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>R)(implicitevidence$121:kantan.csv.CellDecoder[A1],implicitevidence$122:kantan.csv.CellDecoder[A2],implicitevidence$123:kantan.csv.CellDecoder[A3],implicitevidence$124:kantan.csv.CellDecoder[A4],implicitevidence$125:kantan.csv.CellDecoder[A5],implicitevidence$126:kantan.csv.CellDecoder[A6],implicitevidence$127:kantan.csv.CellDecoder[A7],implicitevidence$128:kantan.csv.CellDecoder[A8],implicitevidence$129:kantan.csv.CellDecoder[A9],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellDecoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A12],implicitevidence$133:kantan.csv.CellDecoder[A13],implicitevidence$134:kantan.csv.CellDecoder[A14],implicitevidence$135:kantan.csv.CellDecoder[A15],implicitevidence$136:kantan.csv.CellDecoder[A16]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>R)(implicitevidence$106:kantan.csv.CellDecoder[A1],implicitevidence$107:kantan.csv.CellDecoder[A2],implicitevidence$108:kantan.csv.CellDecoder[A3],implicitevidence$109:kantan.csv.CellDecoder[A4],implicitevidence$110:kantan.csv.CellDecoder[A5],implicitevidence$111:kantan.csv.CellDecoder[A6],implicitevidence$112:kantan.csv.CellDecoder[A7],implicitevidence$113:kantan.csv.CellDecoder[A8],implicitevidence$114:kantan.csv.CellDecoder[A9],implicitevidence$115:kantan.csv.CellDecoder[A10],implicitevidence$116:kantan.csv.CellDecoder[A11],implicitevidence$117:kantan.csv.CellDecoder[A12],implicitevidence$118:kantan.csv.CellDecoder[A13],implicitevidence$119:kantan.csv.CellDecoder[A14],implicitevidence$120:kantan.csv.CellDecoder[A15]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>R)(implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellDecoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A3],implicitevidence$95:kantan.csv.CellDecoder[A4],implicitevidence$96:kantan.csv.CellDecoder[A5],implicitevidence$97:kantan.csv.CellDecoder[A6],implicitevidence$98:kantan.csv.CellDecoder[A7],implicitevidence$99:kantan.csv.CellDecoder[A8],implicitevidence$100:kantan.csv.CellDecoder[A9],implicitevidence$101:kantan.csv.CellDecoder[A10],implicitevidence$102:kantan.csv.CellDecoder[A11],implicitevidence$103:kantan.csv.CellDecoder[A12],implicitevidence$104:kantan.csv.CellDecoder[A13],implicitevidence$105:kantan.csv.CellDecoder[A14]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>R)(implicitevidence$79:kantan.csv.CellDecoder[A1],implicitevidence$80:kantan.csv.CellDecoder[A2],implicitevidence$81:kantan.csv.CellDecoder[A3],implicitevidence$82:kantan.csv.CellDecoder[A4],implicitevidence$83:kantan.csv.CellDecoder[A5],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellDecoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A8],implicitevidence$87:kantan.csv.CellDecoder[A9],implicitevidence$88:kantan.csv.CellDecoder[A10],implicitevidence$89:kantan.csv.CellDecoder[A11],implicitevidence$90:kantan.csv.CellDecoder[A12],implicitevidence$91:kantan.csv.CellDecoder[A13]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>R)(implicitevidence$67:kantan.csv.CellDecoder[A1],implicitevidence$68:kantan.csv.CellDecoder[A2],implicitevidence$69:kantan.csv.CellDecoder[A3],implicitevidence$70:kantan.csv.CellDecoder[A4],implicitevidence$71:kantan.csv.CellDecoder[A5],implicitevidence$72:kantan.csv.CellDecoder[A6],implicitevidence$73:kantan.csv.CellDecoder[A7],implicitevidence$74:kantan.csv.CellDecoder[A8],implicitevidence$75:kantan.csv.CellDecoder[A9],implicitevidence$76:kantan.csv.CellDecoder[A10],implicitevidence$77:kantan.csv.CellDecoder[A11],implicitevidence$78:kantan.csv.CellDecoder[A12]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>R)(implicitevidence$56:kantan.csv.CellDecoder[A1],implicitevidence$57:kantan.csv.CellDecoder[A2],implicitevidence$58:kantan.csv.CellDecoder[A3],implicitevidence$59:kantan.csv.CellDecoder[A4],implicitevidence$60:kantan.csv.CellDecoder[A5],implicitevidence$61:kantan.csv.CellDecoder[A6],implicitevidence$62:kantan.csv.CellDecoder[A7],implicitevidence$63:kantan.csv.CellDecoder[A8],implicitevidence$64:kantan.csv.CellDecoder[A9],implicitevidence$65:kantan.csv.CellDecoder[A10],implicitevidence$66:kantan.csv.CellDecoder[A11]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>R)(implicitevidence$46:kantan.csv.CellDecoder[A1],implicitevidence$47:kantan.csv.CellDecoder[A2],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellDecoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A5],implicitevidence$51:kantan.csv.CellDecoder[A6],implicitevidence$52:kantan.csv.CellDecoder[A7],implicitevidence$53:kantan.csv.CellDecoder[A8],implicitevidence$54:kantan.csv.CellDecoder[A9],implicitevidence$55:kantan.csv.CellDecoder[A10]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>R)(implicitevidence$37:kantan.csv.CellDecoder[A1],implicitevidence$38:kantan.csv.CellDecoder[A2],implicitevidence$39:kantan.csv.CellDecoder[A3],implicitevidence$40:kantan.csv.CellDecoder[A4],implicitevidence$41:kantan.csv.CellDecoder[A5],implicitevidence$42:kantan.csv.CellDecoder[A6],implicitevidence$43:kantan.csv.CellDecoder[A7],implicitevidence$44:kantan.csv.CellDecoder[A8],implicitevidence$45:kantan.csv.CellDecoder[A9]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>R)(implicitevidence$29:kantan.csv.CellDecoder[A1],implicitevidence$30:kantan.csv.CellDecoder[A2],implicitevidence$31:kantan.csv.CellDecoder[A3],implicitevidence$32:kantan.csv.CellDecoder[A4],implicitevidence$33:kantan.csv.CellDecoder[A5],implicitevidence$34:kantan.csv.CellDecoder[A6],implicitevidence$35:kantan.csv.CellDecoder[A7],implicitevidence$36:kantan.csv.CellDecoder[A8]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (A1, A2, A3, A4, A5, A6, A7) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>R)(implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellDecoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A3],implicitevidence$25:kantan.csv.CellDecoder[A4],implicitevidence$26:kantan.csv.CellDecoder[A5],implicitevidence$27:kantan.csv.CellDecoder[A6],implicitevidence$28:kantan.csv.CellDecoder[A7]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (A1, A2, A3, A4, A5, A6) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,R](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:(A1,A2,A3,A4,A5,A6)=>R)(implicitevidence$16:kantan.csv.CellDecoder[A1],implicitevidence$17:kantan.csv.CellDecoder[A2],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellDecoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A5],implicitevidence$21:kantan.csv.CellDecoder[A6]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (A1, A2, A3, A4, A5) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,A5,R](f1:String,f2:String,f3:String,f4:String,f5:String)(f:(A1,A2,A3,A4,A5)=>R)(implicitevidence$11:kantan.csv.CellDecoder[A1],implicitevidence$12:kantan.csv.CellDecoder[A2],implicitevidence$13:kantan.csv.CellDecoder[A3],implicitevidence$14:kantan.csv.CellDecoder[A4],implicitevidence$15:kantan.csv.CellDecoder[A5]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (A1, A2, A3, A4) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,A4,R](f1:String,f2:String,f3:String,f4:String)(f:(A1,A2,A3,A4)=>R)(implicitevidence$7:kantan.csv.CellDecoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A2],implicitevidence$9:kantan.csv.CellDecoder[A3],implicitevidence$10:kantan.csv.CellDecoder[A4]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String, f3: String)(f: (A1, A2, A3) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,A3,R](f1:String,f2:String,f3:String)(f:(A1,A2,A3)=>R)(implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellDecoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A3]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String, f2: String)(f: (A1, A2) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,A2,R](f1:String,f2:String)(f:(A1,A2)=>R)(implicitevidence$2:kantan.csv.CellDecoder[A1],implicitevidence$3:kantan.csv.CellDecoder[A2]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(f1: String)(f: (A1) => R)(arg0: CellDecoder[A1]): HeaderDecoder[R]", "member" : "kantan.csv.GeneratedHeaderDecoders.decoder", "link" : "kantan\/csv\/HeaderDecoder$.html#decoder[A1,R](f1:String)(f:A1=>R)(implicitevidence$1:kantan.csv.CellDecoder[A1]):kantan.csv.HeaderDecoder[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/HeaderDecoder.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(f: (A) => B): HeaderDecoder[B]", "member" : "kantan.csv.HeaderDecoder.map", "link" : "kantan\/csv\/HeaderDecoder.html#map[B](f:A=>B):kantan.csv.HeaderDecoder[B]", "kind" : "def"}, {"label" : "~", "tail" : "(that: HeaderDecoder[B])(zippable: Zippable[A, B]): HeaderDecoder[Out]", "member" : "kantan.csv.HeaderDecoder.~", "link" : "kantan\/csv\/HeaderDecoder.html#~[B](that:kantan.csv.HeaderDecoder[B])(implicitzippable:kantan.csv.Zippable[A,B]):kantan.csv.HeaderDecoder[zippable.Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderDecoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderDecoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "noHeader", "tail" : "(): RowDecoder[A]", "member" : "kantan.csv.HeaderDecoder.noHeader", "link" : "kantan\/csv\/HeaderDecoder.html#noHeader:kantan.csv.RowDecoder[A]", "kind" : "abstract def"}, {"label" : "fromHeader", "tail" : "(header: Seq[String]): DecodeResult[RowDecoder[A]]", "member" : "kantan.csv.HeaderDecoder.fromHeader", "link" : "kantan\/csv\/HeaderDecoder.html#fromHeader(header:Seq[String]):kantan.csv.DecodeResult[kantan.csv.RowDecoder[A]]", "kind" : "abstract def"}], "shortDescription" : "Provides support for using header values rather than row indexes for decoding."}, {"name" : "kantan.csv.HeaderDecoderOps0", "object" : "kantan\/csv\/HeaderDecoderOps0$.html", "members_object" : [{"label" : "EnrichedHeaderDecoder0", "tail" : "", "member" : "kantan.csv.HeaderDecoderOps0.EnrichedHeaderDecoder0", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#EnrichedHeaderDecoder0[A]extendsAnyVal", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderDecoderOps0$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderDecoderOps0$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/HeaderDecoderOps0.html", "kind" : "trait", "members_trait" : [{"label" : "enrichedHeaderDecoder0", "tail" : "(decoder: HeaderDecoder[Option[A]]): EnrichedHeaderDecoder0[A]", "member" : "kantan.csv.HeaderDecoderOps0.enrichedHeaderDecoder0", "link" : "kantan\/csv\/HeaderDecoderOps0.html#enrichedHeaderDecoder0[A](decoder:kantan.csv.HeaderDecoder[Option[A]]):kantan.csv.HeaderDecoderOps0.EnrichedHeaderDecoder0[A]", "kind" : "implicit def"}, {"label" : "enrichedHeaderDecoder1", "tail" : "(decoder: HeaderDecoder[A]): EnrichedHeaderDecoder1[A]", "member" : "kantan.csv.HeaderDecoderOps1.enrichedHeaderDecoder1", "link" : "kantan\/csv\/HeaderDecoderOps0.html#enrichedHeaderDecoder1[A](decoder:kantan.csv.HeaderDecoder[A]):kantan.csv.HeaderDecoderOps1.EnrichedHeaderDecoder1[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderDecoderOps0.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderDecoderOps0.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderDecoderOps0.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderDecoderOps0.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderDecoderOps0.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderDecoderOps0.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderDecoderOps0.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps0.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps0.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps0.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderDecoderOps0.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderDecoderOps0.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderDecoderOps0.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderDecoderOps0.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderDecoderOps0.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderDecoderOps0.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderDecoderOps0.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderDecoderOps0.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderDecoderOps0.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.HeaderDecoderOps1", "object" : "kantan\/csv\/HeaderDecoderOps1$.html", "members_object" : [{"label" : "EnrichedHeaderDecoder1", "tail" : "", "member" : "kantan.csv.HeaderDecoderOps1.EnrichedHeaderDecoder1", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#EnrichedHeaderDecoder1[A]extendsAnyVal", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderDecoderOps1$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderDecoderOps1$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/HeaderDecoderOps1.html", "kind" : "trait", "members_trait" : [{"label" : "enrichedHeaderDecoder1", "tail" : "(decoder: HeaderDecoder[A]): EnrichedHeaderDecoder1[A]", "member" : "kantan.csv.HeaderDecoderOps1.enrichedHeaderDecoder1", "link" : "kantan\/csv\/HeaderDecoderOps1.html#enrichedHeaderDecoder1[A](decoder:kantan.csv.HeaderDecoder[A]):kantan.csv.HeaderDecoderOps1.EnrichedHeaderDecoder1[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderDecoderOps1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderDecoderOps1.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderDecoderOps1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderDecoderOps1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderDecoderOps1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderDecoderOps1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderDecoderOps1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderDecoderOps1.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderDecoderOps1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderDecoderOps1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderDecoderOps1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderDecoderOps1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderDecoderOps1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderDecoderOps1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderDecoderOps1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderDecoderOps1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderDecoderOps1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.HeaderEncoder", "object" : "kantan\/csv\/HeaderEncoder$.html", "members_object" : [{"label" : "defaultHeaderEncoder", "tail" : "(arg0: RowEncoder[A]): HeaderEncoder[A]", "member" : "kantan.csv.HeaderEncoder.defaultHeaderEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#defaultHeaderEncoder[A](implicitevidence$1:kantan.csv.RowEncoder[A]):kantan.csv.HeaderEncoder[A]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(ev: HeaderEncoder[A]): HeaderEncoder[A]", "member" : "kantan.csv.HeaderEncoder.apply", "link" : "kantan\/csv\/HeaderEncoder$.html#apply[A](implicitev:kantan.csv.HeaderEncoder[A]):kantan.csv.HeaderEncoder[A]", "kind" : "macro def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$485:kantan.csv.CellEncoder[A1],implicitevidence$486:kantan.csv.CellEncoder[A2],implicitevidence$487:kantan.csv.CellEncoder[A3],implicitevidence$488:kantan.csv.CellEncoder[A4],implicitevidence$489:kantan.csv.CellEncoder[A5],implicitevidence$490:kantan.csv.CellEncoder[A6],implicitevidence$491:kantan.csv.CellEncoder[A7],implicitevidence$492:kantan.csv.CellEncoder[A8],implicitevidence$493:kantan.csv.CellEncoder[A9],implicitevidence$494:kantan.csv.CellEncoder[A10],implicitevidence$495:kantan.csv.CellEncoder[A11],implicitevidence$496:kantan.csv.CellEncoder[A12],implicitevidence$497:kantan.csv.CellEncoder[A13],implicitevidence$498:kantan.csv.CellEncoder[A14],implicitevidence$499:kantan.csv.CellEncoder[A15],implicitevidence$500:kantan.csv.CellEncoder[A16],implicitevidence$501:kantan.csv.CellEncoder[A17],implicitevidence$502:kantan.csv.CellEncoder[A18],implicitevidence$503:kantan.csv.CellEncoder[A19],implicitevidence$504:kantan.csv.CellEncoder[A20],implicitevidence$505:kantan.csv.CellEncoder[A21],implicitevidence$506:kantan.csv.CellEncoder[A22]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$464:kantan.csv.CellEncoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellEncoder[A3],implicitevidence$467:kantan.csv.CellEncoder[A4],implicitevidence$468:kantan.csv.CellEncoder[A5],implicitevidence$469:kantan.csv.CellEncoder[A6],implicitevidence$470:kantan.csv.CellEncoder[A7],implicitevidence$471:kantan.csv.CellEncoder[A8],implicitevidence$472:kantan.csv.CellEncoder[A9],implicitevidence$473:kantan.csv.CellEncoder[A10],implicitevidence$474:kantan.csv.CellEncoder[A11],implicitevidence$475:kantan.csv.CellEncoder[A12],implicitevidence$476:kantan.csv.CellEncoder[A13],implicitevidence$477:kantan.csv.CellEncoder[A14],implicitevidence$478:kantan.csv.CellEncoder[A15],implicitevidence$479:kantan.csv.CellEncoder[A16],implicitevidence$480:kantan.csv.CellEncoder[A17],implicitevidence$481:kantan.csv.CellEncoder[A18],implicitevidence$482:kantan.csv.CellEncoder[A19],implicitevidence$483:kantan.csv.CellEncoder[A20],implicitevidence$484:kantan.csv.CellEncoder[A21]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$444:kantan.csv.CellEncoder[A1],implicitevidence$445:kantan.csv.CellEncoder[A2],implicitevidence$446:kantan.csv.CellEncoder[A3],implicitevidence$447:kantan.csv.CellEncoder[A4],implicitevidence$448:kantan.csv.CellEncoder[A5],implicitevidence$449:kantan.csv.CellEncoder[A6],implicitevidence$450:kantan.csv.CellEncoder[A7],implicitevidence$451:kantan.csv.CellEncoder[A8],implicitevidence$452:kantan.csv.CellEncoder[A9],implicitevidence$453:kantan.csv.CellEncoder[A10],implicitevidence$454:kantan.csv.CellEncoder[A11],implicitevidence$455:kantan.csv.CellEncoder[A12],implicitevidence$456:kantan.csv.CellEncoder[A13],implicitevidence$457:kantan.csv.CellEncoder[A14],implicitevidence$458:kantan.csv.CellEncoder[A15],implicitevidence$459:kantan.csv.CellEncoder[A16],implicitevidence$460:kantan.csv.CellEncoder[A17],implicitevidence$461:kantan.csv.CellEncoder[A18],implicitevidence$462:kantan.csv.CellEncoder[A19],implicitevidence$463:kantan.csv.CellEncoder[A20]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$425:kantan.csv.CellEncoder[A1],implicitevidence$426:kantan.csv.CellEncoder[A2],implicitevidence$427:kantan.csv.CellEncoder[A3],implicitevidence$428:kantan.csv.CellEncoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellEncoder[A6],implicitevidence$431:kantan.csv.CellEncoder[A7],implicitevidence$432:kantan.csv.CellEncoder[A8],implicitevidence$433:kantan.csv.CellEncoder[A9],implicitevidence$434:kantan.csv.CellEncoder[A10],implicitevidence$435:kantan.csv.CellEncoder[A11],implicitevidence$436:kantan.csv.CellEncoder[A12],implicitevidence$437:kantan.csv.CellEncoder[A13],implicitevidence$438:kantan.csv.CellEncoder[A14],implicitevidence$439:kantan.csv.CellEncoder[A15],implicitevidence$440:kantan.csv.CellEncoder[A16],implicitevidence$441:kantan.csv.CellEncoder[A17],implicitevidence$442:kantan.csv.CellEncoder[A18],implicitevidence$443:kantan.csv.CellEncoder[A19]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$407:kantan.csv.CellEncoder[A1],implicitevidence$408:kantan.csv.CellEncoder[A2],implicitevidence$409:kantan.csv.CellEncoder[A3],implicitevidence$410:kantan.csv.CellEncoder[A4],implicitevidence$411:kantan.csv.CellEncoder[A5],implicitevidence$412:kantan.csv.CellEncoder[A6],implicitevidence$413:kantan.csv.CellEncoder[A7],implicitevidence$414:kantan.csv.CellEncoder[A8],implicitevidence$415:kantan.csv.CellEncoder[A9],implicitevidence$416:kantan.csv.CellEncoder[A10],implicitevidence$417:kantan.csv.CellEncoder[A11],implicitevidence$418:kantan.csv.CellEncoder[A12],implicitevidence$419:kantan.csv.CellEncoder[A13],implicitevidence$420:kantan.csv.CellEncoder[A14],implicitevidence$421:kantan.csv.CellEncoder[A15],implicitevidence$422:kantan.csv.CellEncoder[A16],implicitevidence$423:kantan.csv.CellEncoder[A17],implicitevidence$424:kantan.csv.CellEncoder[A18]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$390:kantan.csv.CellEncoder[A1],implicitevidence$391:kantan.csv.CellEncoder[A2],implicitevidence$392:kantan.csv.CellEncoder[A3],implicitevidence$393:kantan.csv.CellEncoder[A4],implicitevidence$394:kantan.csv.CellEncoder[A5],implicitevidence$395:kantan.csv.CellEncoder[A6],implicitevidence$396:kantan.csv.CellEncoder[A7],implicitevidence$397:kantan.csv.CellEncoder[A8],implicitevidence$398:kantan.csv.CellEncoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellEncoder[A11],implicitevidence$401:kantan.csv.CellEncoder[A12],implicitevidence$402:kantan.csv.CellEncoder[A13],implicitevidence$403:kantan.csv.CellEncoder[A14],implicitevidence$404:kantan.csv.CellEncoder[A15],implicitevidence$405:kantan.csv.CellEncoder[A16],implicitevidence$406:kantan.csv.CellEncoder[A17]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$374:kantan.csv.CellEncoder[A1],implicitevidence$375:kantan.csv.CellEncoder[A2],implicitevidence$376:kantan.csv.CellEncoder[A3],implicitevidence$377:kantan.csv.CellEncoder[A4],implicitevidence$378:kantan.csv.CellEncoder[A5],implicitevidence$379:kantan.csv.CellEncoder[A6],implicitevidence$380:kantan.csv.CellEncoder[A7],implicitevidence$381:kantan.csv.CellEncoder[A8],implicitevidence$382:kantan.csv.CellEncoder[A9],implicitevidence$383:kantan.csv.CellEncoder[A10],implicitevidence$384:kantan.csv.CellEncoder[A11],implicitevidence$385:kantan.csv.CellEncoder[A12],implicitevidence$386:kantan.csv.CellEncoder[A13],implicitevidence$387:kantan.csv.CellEncoder[A14],implicitevidence$388:kantan.csv.CellEncoder[A15],implicitevidence$389:kantan.csv.CellEncoder[A16]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$359:kantan.csv.CellEncoder[A1],implicitevidence$360:kantan.csv.CellEncoder[A2],implicitevidence$361:kantan.csv.CellEncoder[A3],implicitevidence$362:kantan.csv.CellEncoder[A4],implicitevidence$363:kantan.csv.CellEncoder[A5],implicitevidence$364:kantan.csv.CellEncoder[A6],implicitevidence$365:kantan.csv.CellEncoder[A7],implicitevidence$366:kantan.csv.CellEncoder[A8],implicitevidence$367:kantan.csv.CellEncoder[A9],implicitevidence$368:kantan.csv.CellEncoder[A10],implicitevidence$369:kantan.csv.CellEncoder[A11],implicitevidence$370:kantan.csv.CellEncoder[A12],implicitevidence$371:kantan.csv.CellEncoder[A13],implicitevidence$372:kantan.csv.CellEncoder[A14],implicitevidence$373:kantan.csv.CellEncoder[A15]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$345:kantan.csv.CellEncoder[A1],implicitevidence$346:kantan.csv.CellEncoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellEncoder[A4],implicitevidence$349:kantan.csv.CellEncoder[A5],implicitevidence$350:kantan.csv.CellEncoder[A6],implicitevidence$351:kantan.csv.CellEncoder[A7],implicitevidence$352:kantan.csv.CellEncoder[A8],implicitevidence$353:kantan.csv.CellEncoder[A9],implicitevidence$354:kantan.csv.CellEncoder[A10],implicitevidence$355:kantan.csv.CellEncoder[A11],implicitevidence$356:kantan.csv.CellEncoder[A12],implicitevidence$357:kantan.csv.CellEncoder[A13],implicitevidence$358:kantan.csv.CellEncoder[A14]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$332:kantan.csv.CellEncoder[A1],implicitevidence$333:kantan.csv.CellEncoder[A2],implicitevidence$334:kantan.csv.CellEncoder[A3],implicitevidence$335:kantan.csv.CellEncoder[A4],implicitevidence$336:kantan.csv.CellEncoder[A5],implicitevidence$337:kantan.csv.CellEncoder[A6],implicitevidence$338:kantan.csv.CellEncoder[A7],implicitevidence$339:kantan.csv.CellEncoder[A8],implicitevidence$340:kantan.csv.CellEncoder[A9],implicitevidence$341:kantan.csv.CellEncoder[A10],implicitevidence$342:kantan.csv.CellEncoder[A11],implicitevidence$343:kantan.csv.CellEncoder[A12],implicitevidence$344:kantan.csv.CellEncoder[A13]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$320:kantan.csv.CellEncoder[A1],implicitevidence$321:kantan.csv.CellEncoder[A2],implicitevidence$322:kantan.csv.CellEncoder[A3],implicitevidence$323:kantan.csv.CellEncoder[A4],implicitevidence$324:kantan.csv.CellEncoder[A5],implicitevidence$325:kantan.csv.CellEncoder[A6],implicitevidence$326:kantan.csv.CellEncoder[A7],implicitevidence$327:kantan.csv.CellEncoder[A8],implicitevidence$328:kantan.csv.CellEncoder[A9],implicitevidence$329:kantan.csv.CellEncoder[A10],implicitevidence$330:kantan.csv.CellEncoder[A11],implicitevidence$331:kantan.csv.CellEncoder[A12]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$309:kantan.csv.CellEncoder[A1],implicitevidence$310:kantan.csv.CellEncoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellEncoder[A4],implicitevidence$313:kantan.csv.CellEncoder[A5],implicitevidence$314:kantan.csv.CellEncoder[A6],implicitevidence$315:kantan.csv.CellEncoder[A7],implicitevidence$316:kantan.csv.CellEncoder[A8],implicitevidence$317:kantan.csv.CellEncoder[A9],implicitevidence$318:kantan.csv.CellEncoder[A10],implicitevidence$319:kantan.csv.CellEncoder[A11]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$299:kantan.csv.CellEncoder[A1],implicitevidence$300:kantan.csv.CellEncoder[A2],implicitevidence$301:kantan.csv.CellEncoder[A3],implicitevidence$302:kantan.csv.CellEncoder[A4],implicitevidence$303:kantan.csv.CellEncoder[A5],implicitevidence$304:kantan.csv.CellEncoder[A6],implicitevidence$305:kantan.csv.CellEncoder[A7],implicitevidence$306:kantan.csv.CellEncoder[A8],implicitevidence$307:kantan.csv.CellEncoder[A9],implicitevidence$308:kantan.csv.CellEncoder[A10]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$290:kantan.csv.CellEncoder[A1],implicitevidence$291:kantan.csv.CellEncoder[A2],implicitevidence$292:kantan.csv.CellEncoder[A3],implicitevidence$293:kantan.csv.CellEncoder[A4],implicitevidence$294:kantan.csv.CellEncoder[A5],implicitevidence$295:kantan.csv.CellEncoder[A6],implicitevidence$296:kantan.csv.CellEncoder[A7],implicitevidence$297:kantan.csv.CellEncoder[A8],implicitevidence$298:kantan.csv.CellEncoder[A9]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$282:kantan.csv.CellEncoder[A1],implicitevidence$283:kantan.csv.CellEncoder[A2],implicitevidence$284:kantan.csv.CellEncoder[A3],implicitevidence$285:kantan.csv.CellEncoder[A4],implicitevidence$286:kantan.csv.CellEncoder[A5],implicitevidence$287:kantan.csv.CellEncoder[A6],implicitevidence$288:kantan.csv.CellEncoder[A7],implicitevidence$289:kantan.csv.CellEncoder[A8]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$275:kantan.csv.CellEncoder[A1],implicitevidence$276:kantan.csv.CellEncoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellEncoder[A4],implicitevidence$279:kantan.csv.CellEncoder[A5],implicitevidence$280:kantan.csv.CellEncoder[A6],implicitevidence$281:kantan.csv.CellEncoder[A7]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (O) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:O=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$269:kantan.csv.CellEncoder[A1],implicitevidence$270:kantan.csv.CellEncoder[A2],implicitevidence$271:kantan.csv.CellEncoder[A3],implicitevidence$272:kantan.csv.CellEncoder[A4],implicitevidence$273:kantan.csv.CellEncoder[A5],implicitevidence$274:kantan.csv.CellEncoder[A6]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (O) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,O](f1:String,f2:String,f3:String,f4:String,f5:String)(f:O=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$264:kantan.csv.CellEncoder[A1],implicitevidence$265:kantan.csv.CellEncoder[A2],implicitevidence$266:kantan.csv.CellEncoder[A3],implicitevidence$267:kantan.csv.CellEncoder[A4],implicitevidence$268:kantan.csv.CellEncoder[A5]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (O) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,A4,O](f1:String,f2:String,f3:String,f4:String)(f:O=>Option[(A1,A2,A3,A4)])(implicitevidence$260:kantan.csv.CellEncoder[A1],implicitevidence$261:kantan.csv.CellEncoder[A2],implicitevidence$262:kantan.csv.CellEncoder[A3],implicitevidence$263:kantan.csv.CellEncoder[A4]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String, f3: String)(f: (O) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,A3,O](f1:String,f2:String,f3:String)(f:O=>Option[(A1,A2,A3)])(implicitevidence$257:kantan.csv.CellEncoder[A1],implicitevidence$258:kantan.csv.CellEncoder[A2],implicitevidence$259:kantan.csv.CellEncoder[A3]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String, f2: String)(f: (O) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,A2,O](f1:String,f2:String)(f:O=>Option[(A1,A2)])(implicitevidence$255:kantan.csv.CellEncoder[A1],implicitevidence$256:kantan.csv.CellEncoder[A2]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f1: String)(f: (O) => Option[A1])(arg0: CellEncoder[A1]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.caseEncoder", "link" : "kantan\/csv\/HeaderEncoder$.html#caseEncoder[A1,O](f1:String)(f:O=>Option[A1])(implicitevidence$254:kantan.csv.CellEncoder[A1]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String, f22: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String,f22:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$232:kantan.csv.CellEncoder[A1],implicitevidence$233:kantan.csv.CellEncoder[A2],implicitevidence$234:kantan.csv.CellEncoder[A3],implicitevidence$235:kantan.csv.CellEncoder[A4],implicitevidence$236:kantan.csv.CellEncoder[A5],implicitevidence$237:kantan.csv.CellEncoder[A6],implicitevidence$238:kantan.csv.CellEncoder[A7],implicitevidence$239:kantan.csv.CellEncoder[A8],implicitevidence$240:kantan.csv.CellEncoder[A9],implicitevidence$241:kantan.csv.CellEncoder[A10],implicitevidence$242:kantan.csv.CellEncoder[A11],implicitevidence$243:kantan.csv.CellEncoder[A12],implicitevidence$244:kantan.csv.CellEncoder[A13],implicitevidence$245:kantan.csv.CellEncoder[A14],implicitevidence$246:kantan.csv.CellEncoder[A15],implicitevidence$247:kantan.csv.CellEncoder[A16],implicitevidence$248:kantan.csv.CellEncoder[A17],implicitevidence$249:kantan.csv.CellEncoder[A18],implicitevidence$250:kantan.csv.CellEncoder[A19],implicitevidence$251:kantan.csv.CellEncoder[A20],implicitevidence$252:kantan.csv.CellEncoder[A21],implicitevidence$253:kantan.csv.CellEncoder[A22]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String, f21: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String,f21:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$211:kantan.csv.CellEncoder[A1],implicitevidence$212:kantan.csv.CellEncoder[A2],implicitevidence$213:kantan.csv.CellEncoder[A3],implicitevidence$214:kantan.csv.CellEncoder[A4],implicitevidence$215:kantan.csv.CellEncoder[A5],implicitevidence$216:kantan.csv.CellEncoder[A6],implicitevidence$217:kantan.csv.CellEncoder[A7],implicitevidence$218:kantan.csv.CellEncoder[A8],implicitevidence$219:kantan.csv.CellEncoder[A9],implicitevidence$220:kantan.csv.CellEncoder[A10],implicitevidence$221:kantan.csv.CellEncoder[A11],implicitevidence$222:kantan.csv.CellEncoder[A12],implicitevidence$223:kantan.csv.CellEncoder[A13],implicitevidence$224:kantan.csv.CellEncoder[A14],implicitevidence$225:kantan.csv.CellEncoder[A15],implicitevidence$226:kantan.csv.CellEncoder[A16],implicitevidence$227:kantan.csv.CellEncoder[A17],implicitevidence$228:kantan.csv.CellEncoder[A18],implicitevidence$229:kantan.csv.CellEncoder[A19],implicitevidence$230:kantan.csv.CellEncoder[A20],implicitevidence$231:kantan.csv.CellEncoder[A21]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String, f20: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String,f20:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$191:kantan.csv.CellEncoder[A1],implicitevidence$192:kantan.csv.CellEncoder[A2],implicitevidence$193:kantan.csv.CellEncoder[A3],implicitevidence$194:kantan.csv.CellEncoder[A4],implicitevidence$195:kantan.csv.CellEncoder[A5],implicitevidence$196:kantan.csv.CellEncoder[A6],implicitevidence$197:kantan.csv.CellEncoder[A7],implicitevidence$198:kantan.csv.CellEncoder[A8],implicitevidence$199:kantan.csv.CellEncoder[A9],implicitevidence$200:kantan.csv.CellEncoder[A10],implicitevidence$201:kantan.csv.CellEncoder[A11],implicitevidence$202:kantan.csv.CellEncoder[A12],implicitevidence$203:kantan.csv.CellEncoder[A13],implicitevidence$204:kantan.csv.CellEncoder[A14],implicitevidence$205:kantan.csv.CellEncoder[A15],implicitevidence$206:kantan.csv.CellEncoder[A16],implicitevidence$207:kantan.csv.CellEncoder[A17],implicitevidence$208:kantan.csv.CellEncoder[A18],implicitevidence$209:kantan.csv.CellEncoder[A19],implicitevidence$210:kantan.csv.CellEncoder[A20]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String, f19: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String,f19:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$172:kantan.csv.CellEncoder[A1],implicitevidence$173:kantan.csv.CellEncoder[A2],implicitevidence$174:kantan.csv.CellEncoder[A3],implicitevidence$175:kantan.csv.CellEncoder[A4],implicitevidence$176:kantan.csv.CellEncoder[A5],implicitevidence$177:kantan.csv.CellEncoder[A6],implicitevidence$178:kantan.csv.CellEncoder[A7],implicitevidence$179:kantan.csv.CellEncoder[A8],implicitevidence$180:kantan.csv.CellEncoder[A9],implicitevidence$181:kantan.csv.CellEncoder[A10],implicitevidence$182:kantan.csv.CellEncoder[A11],implicitevidence$183:kantan.csv.CellEncoder[A12],implicitevidence$184:kantan.csv.CellEncoder[A13],implicitevidence$185:kantan.csv.CellEncoder[A14],implicitevidence$186:kantan.csv.CellEncoder[A15],implicitevidence$187:kantan.csv.CellEncoder[A16],implicitevidence$188:kantan.csv.CellEncoder[A17],implicitevidence$189:kantan.csv.CellEncoder[A18],implicitevidence$190:kantan.csv.CellEncoder[A19]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String, f18: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String,f18:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$154:kantan.csv.CellEncoder[A1],implicitevidence$155:kantan.csv.CellEncoder[A2],implicitevidence$156:kantan.csv.CellEncoder[A3],implicitevidence$157:kantan.csv.CellEncoder[A4],implicitevidence$158:kantan.csv.CellEncoder[A5],implicitevidence$159:kantan.csv.CellEncoder[A6],implicitevidence$160:kantan.csv.CellEncoder[A7],implicitevidence$161:kantan.csv.CellEncoder[A8],implicitevidence$162:kantan.csv.CellEncoder[A9],implicitevidence$163:kantan.csv.CellEncoder[A10],implicitevidence$164:kantan.csv.CellEncoder[A11],implicitevidence$165:kantan.csv.CellEncoder[A12],implicitevidence$166:kantan.csv.CellEncoder[A13],implicitevidence$167:kantan.csv.CellEncoder[A14],implicitevidence$168:kantan.csv.CellEncoder[A15],implicitevidence$169:kantan.csv.CellEncoder[A16],implicitevidence$170:kantan.csv.CellEncoder[A17],implicitevidence$171:kantan.csv.CellEncoder[A18]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String, f17: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String,f17:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$137:kantan.csv.CellEncoder[A1],implicitevidence$138:kantan.csv.CellEncoder[A2],implicitevidence$139:kantan.csv.CellEncoder[A3],implicitevidence$140:kantan.csv.CellEncoder[A4],implicitevidence$141:kantan.csv.CellEncoder[A5],implicitevidence$142:kantan.csv.CellEncoder[A6],implicitevidence$143:kantan.csv.CellEncoder[A7],implicitevidence$144:kantan.csv.CellEncoder[A8],implicitevidence$145:kantan.csv.CellEncoder[A9],implicitevidence$146:kantan.csv.CellEncoder[A10],implicitevidence$147:kantan.csv.CellEncoder[A11],implicitevidence$148:kantan.csv.CellEncoder[A12],implicitevidence$149:kantan.csv.CellEncoder[A13],implicitevidence$150:kantan.csv.CellEncoder[A14],implicitevidence$151:kantan.csv.CellEncoder[A15],implicitevidence$152:kantan.csv.CellEncoder[A16],implicitevidence$153:kantan.csv.CellEncoder[A17]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String, f16: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String,f16:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$121:kantan.csv.CellEncoder[A1],implicitevidence$122:kantan.csv.CellEncoder[A2],implicitevidence$123:kantan.csv.CellEncoder[A3],implicitevidence$124:kantan.csv.CellEncoder[A4],implicitevidence$125:kantan.csv.CellEncoder[A5],implicitevidence$126:kantan.csv.CellEncoder[A6],implicitevidence$127:kantan.csv.CellEncoder[A7],implicitevidence$128:kantan.csv.CellEncoder[A8],implicitevidence$129:kantan.csv.CellEncoder[A9],implicitevidence$130:kantan.csv.CellEncoder[A10],implicitevidence$131:kantan.csv.CellEncoder[A11],implicitevidence$132:kantan.csv.CellEncoder[A12],implicitevidence$133:kantan.csv.CellEncoder[A13],implicitevidence$134:kantan.csv.CellEncoder[A14],implicitevidence$135:kantan.csv.CellEncoder[A15],implicitevidence$136:kantan.csv.CellEncoder[A16]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String, f15: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String,f15:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$106:kantan.csv.CellEncoder[A1],implicitevidence$107:kantan.csv.CellEncoder[A2],implicitevidence$108:kantan.csv.CellEncoder[A3],implicitevidence$109:kantan.csv.CellEncoder[A4],implicitevidence$110:kantan.csv.CellEncoder[A5],implicitevidence$111:kantan.csv.CellEncoder[A6],implicitevidence$112:kantan.csv.CellEncoder[A7],implicitevidence$113:kantan.csv.CellEncoder[A8],implicitevidence$114:kantan.csv.CellEncoder[A9],implicitevidence$115:kantan.csv.CellEncoder[A10],implicitevidence$116:kantan.csv.CellEncoder[A11],implicitevidence$117:kantan.csv.CellEncoder[A12],implicitevidence$118:kantan.csv.CellEncoder[A13],implicitevidence$119:kantan.csv.CellEncoder[A14],implicitevidence$120:kantan.csv.CellEncoder[A15]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String, f14: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String,f14:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$92:kantan.csv.CellEncoder[A1],implicitevidence$93:kantan.csv.CellEncoder[A2],implicitevidence$94:kantan.csv.CellEncoder[A3],implicitevidence$95:kantan.csv.CellEncoder[A4],implicitevidence$96:kantan.csv.CellEncoder[A5],implicitevidence$97:kantan.csv.CellEncoder[A6],implicitevidence$98:kantan.csv.CellEncoder[A7],implicitevidence$99:kantan.csv.CellEncoder[A8],implicitevidence$100:kantan.csv.CellEncoder[A9],implicitevidence$101:kantan.csv.CellEncoder[A10],implicitevidence$102:kantan.csv.CellEncoder[A11],implicitevidence$103:kantan.csv.CellEncoder[A12],implicitevidence$104:kantan.csv.CellEncoder[A13],implicitevidence$105:kantan.csv.CellEncoder[A14]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String, f13: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String,f13:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$79:kantan.csv.CellEncoder[A1],implicitevidence$80:kantan.csv.CellEncoder[A2],implicitevidence$81:kantan.csv.CellEncoder[A3],implicitevidence$82:kantan.csv.CellEncoder[A4],implicitevidence$83:kantan.csv.CellEncoder[A5],implicitevidence$84:kantan.csv.CellEncoder[A6],implicitevidence$85:kantan.csv.CellEncoder[A7],implicitevidence$86:kantan.csv.CellEncoder[A8],implicitevidence$87:kantan.csv.CellEncoder[A9],implicitevidence$88:kantan.csv.CellEncoder[A10],implicitevidence$89:kantan.csv.CellEncoder[A11],implicitevidence$90:kantan.csv.CellEncoder[A12],implicitevidence$91:kantan.csv.CellEncoder[A13]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String, f12: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String,f12:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$67:kantan.csv.CellEncoder[A1],implicitevidence$68:kantan.csv.CellEncoder[A2],implicitevidence$69:kantan.csv.CellEncoder[A3],implicitevidence$70:kantan.csv.CellEncoder[A4],implicitevidence$71:kantan.csv.CellEncoder[A5],implicitevidence$72:kantan.csv.CellEncoder[A6],implicitevidence$73:kantan.csv.CellEncoder[A7],implicitevidence$74:kantan.csv.CellEncoder[A8],implicitevidence$75:kantan.csv.CellEncoder[A9],implicitevidence$76:kantan.csv.CellEncoder[A10],implicitevidence$77:kantan.csv.CellEncoder[A11],implicitevidence$78:kantan.csv.CellEncoder[A12]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String, f11: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String,f11:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$56:kantan.csv.CellEncoder[A1],implicitevidence$57:kantan.csv.CellEncoder[A2],implicitevidence$58:kantan.csv.CellEncoder[A3],implicitevidence$59:kantan.csv.CellEncoder[A4],implicitevidence$60:kantan.csv.CellEncoder[A5],implicitevidence$61:kantan.csv.CellEncoder[A6],implicitevidence$62:kantan.csv.CellEncoder[A7],implicitevidence$63:kantan.csv.CellEncoder[A8],implicitevidence$64:kantan.csv.CellEncoder[A9],implicitevidence$65:kantan.csv.CellEncoder[A10],implicitevidence$66:kantan.csv.CellEncoder[A11]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String, f10: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String,f10:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$46:kantan.csv.CellEncoder[A1],implicitevidence$47:kantan.csv.CellEncoder[A2],implicitevidence$48:kantan.csv.CellEncoder[A3],implicitevidence$49:kantan.csv.CellEncoder[A4],implicitevidence$50:kantan.csv.CellEncoder[A5],implicitevidence$51:kantan.csv.CellEncoder[A6],implicitevidence$52:kantan.csv.CellEncoder[A7],implicitevidence$53:kantan.csv.CellEncoder[A8],implicitevidence$54:kantan.csv.CellEncoder[A9],implicitevidence$55:kantan.csv.CellEncoder[A10]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String, f9: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String,f9:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$37:kantan.csv.CellEncoder[A1],implicitevidence$38:kantan.csv.CellEncoder[A2],implicitevidence$39:kantan.csv.CellEncoder[A3],implicitevidence$40:kantan.csv.CellEncoder[A4],implicitevidence$41:kantan.csv.CellEncoder[A5],implicitevidence$42:kantan.csv.CellEncoder[A6],implicitevidence$43:kantan.csv.CellEncoder[A7],implicitevidence$44:kantan.csv.CellEncoder[A8],implicitevidence$45:kantan.csv.CellEncoder[A9]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String, f8: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String,f8:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$29:kantan.csv.CellEncoder[A1],implicitevidence$30:kantan.csv.CellEncoder[A2],implicitevidence$31:kantan.csv.CellEncoder[A3],implicitevidence$32:kantan.csv.CellEncoder[A4],implicitevidence$33:kantan.csv.CellEncoder[A5],implicitevidence$34:kantan.csv.CellEncoder[A6],implicitevidence$35:kantan.csv.CellEncoder[A7],implicitevidence$36:kantan.csv.CellEncoder[A8]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String, f7: String)(f: (O) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String,f7:String)(f:O=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$22:kantan.csv.CellEncoder[A1],implicitevidence$23:kantan.csv.CellEncoder[A2],implicitevidence$24:kantan.csv.CellEncoder[A3],implicitevidence$25:kantan.csv.CellEncoder[A4],implicitevidence$26:kantan.csv.CellEncoder[A5],implicitevidence$27:kantan.csv.CellEncoder[A6],implicitevidence$28:kantan.csv.CellEncoder[A7]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String, f6: String)(f: (O) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,O](f1:String,f2:String,f3:String,f4:String,f5:String,f6:String)(f:O=>(A1,A2,A3,A4,A5,A6))(implicitevidence$16:kantan.csv.CellEncoder[A1],implicitevidence$17:kantan.csv.CellEncoder[A2],implicitevidence$18:kantan.csv.CellEncoder[A3],implicitevidence$19:kantan.csv.CellEncoder[A4],implicitevidence$20:kantan.csv.CellEncoder[A5],implicitevidence$21:kantan.csv.CellEncoder[A6]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String, f5: String)(f: (O) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,A5,O](f1:String,f2:String,f3:String,f4:String,f5:String)(f:O=>(A1,A2,A3,A4,A5))(implicitevidence$11:kantan.csv.CellEncoder[A1],implicitevidence$12:kantan.csv.CellEncoder[A2],implicitevidence$13:kantan.csv.CellEncoder[A3],implicitevidence$14:kantan.csv.CellEncoder[A4],implicitevidence$15:kantan.csv.CellEncoder[A5]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String, f4: String)(f: (O) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,A4,O](f1:String,f2:String,f3:String,f4:String)(f:O=>(A1,A2,A3,A4))(implicitevidence$7:kantan.csv.CellEncoder[A1],implicitevidence$8:kantan.csv.CellEncoder[A2],implicitevidence$9:kantan.csv.CellEncoder[A3],implicitevidence$10:kantan.csv.CellEncoder[A4]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String, f3: String)(f: (O) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,A3,O](f1:String,f2:String,f3:String)(f:O=>(A1,A2,A3))(implicitevidence$4:kantan.csv.CellEncoder[A1],implicitevidence$5:kantan.csv.CellEncoder[A2],implicitevidence$6:kantan.csv.CellEncoder[A3]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String, f2: String)(f: (O) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,A2,O](f1:String,f2:String)(f:O=>(A1,A2))(implicitevidence$2:kantan.csv.CellEncoder[A1],implicitevidence$3:kantan.csv.CellEncoder[A2]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f1: String)(f: (O) => A1)(arg0: CellEncoder[A1]): HeaderEncoder[O]", "member" : "kantan.csv.GeneratedHeaderEncoders.encoder", "link" : "kantan\/csv\/HeaderEncoder$.html#encoder[A1,O](f1:String)(f:O=>A1)(implicitevidence$1:kantan.csv.CellEncoder[A1]):kantan.csv.HeaderEncoder[O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderEncoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderEncoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/HeaderEncoder.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/HeaderEncoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/HeaderEncoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/HeaderEncoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/HeaderEncoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/HeaderEncoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/HeaderEncoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/HeaderEncoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderEncoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderEncoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/HeaderEncoder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/HeaderEncoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/HeaderEncoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/HeaderEncoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/HeaderEncoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/HeaderEncoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/HeaderEncoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/HeaderEncoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/HeaderEncoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/HeaderEncoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rowEncoder", "tail" : "(): RowEncoder[A]", "member" : "kantan.csv.HeaderEncoder.rowEncoder", "link" : "kantan\/csv\/HeaderEncoder.html#rowEncoder:kantan.csv.RowEncoder[A]", "kind" : "abstract def"}, {"label" : "header", "tail" : "(): Option[Seq[String]]", "member" : "kantan.csv.HeaderEncoder.header", "link" : "kantan\/csv\/HeaderEncoder.html#header:Option[Seq[String]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ParseError", "shortDescription" : "Parent type for all errors that can occur while parsing CSV data.", "object" : "kantan\/csv\/ParseError$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/csv\/ParseError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/ParseError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/csv\/ParseError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/csv\/ParseError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/csv\/ParseError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/csv\/ParseError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/csv\/ParseError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/csv\/ParseError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/csv\/ParseError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/csv\/ParseError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/ParseError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/ParseError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/ParseError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/csv\/ParseError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/csv\/ParseError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/csv\/ParseError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/csv\/ParseError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ParseError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ParseError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ParseError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ParseError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ParseError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ParseError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ParseError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ParseError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ParseError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ParseError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ParseError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ParseError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ParseError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ParseError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ParseError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/csv\/ParseError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/csv\/ParseError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/csv\/ParseError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "IOError", "tail" : "", "member" : "kantan.csv.ParseError.IOError", "link" : "kantan\/csv\/ParseError$.html#IOError", "kind" : "object"}, {"label" : "IOError", "tail" : "", "member" : "kantan.csv.ParseError.IOError", "link" : "kantan\/csv\/ParseError$.html#IOErrorextendsParseErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "NoSuchElement", "tail" : "", "member" : "kantan.csv.ParseError.NoSuchElement", "link" : "kantan\/csv\/ParseError$.html#NoSuchElement", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ParseError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ParseError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ParseError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ParseError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ParseError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ParseError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ParseError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseError$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ParseError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ParseError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ParseError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ParseError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ParseError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ParseError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ParseError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ParseError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ParseError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ParseError.html", "kind" : "class"}, {"name" : "kantan.csv.ParseResult", "shortDescription" : "Provides convenience methods for creating instances of ParseResult.", "object" : "kantan\/csv\/ParseResult$.html", "members_object" : [{"label" : "noSuchElement", "tail" : "(): ParseResult[Nothing]", "member" : "kantan.csv.ParseResult.noSuchElement", "link" : "kantan\/csv\/ParseResult$.html#noSuchElement:kantan.csv.ParseResult[Nothing]", "kind" : "def"}, {"label" : "io", "tail" : "(e: Throwable): ParseResult[Nothing]", "member" : "kantan.csv.ParseResult.io", "link" : "kantan\/csv\/ParseResult$.html#io(e:Throwable):kantan.csv.ParseResult[Nothing]", "kind" : "def"}, {"label" : "fromThrowable", "tail" : "(t: Throwable): ParseError", "member" : "kantan.csv.ParseResult.fromThrowable", "link" : "kantan\/csv\/ParseResult$.html#fromThrowable(t:Throwable):kantan.csv.ParseError", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[ParseError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/csv\/ParseResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[ParseError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/csv\/ParseResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: ParseError): Either[ParseError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/csv\/ParseResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[ParseError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/csv\/ParseResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[ParseError, S]])(bf: BuildFrom[M[Either[ParseError, S]], S, M[S]]): Either[ParseError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/csv\/ParseResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ParseResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ParseResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ParseResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ParseResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ParseResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ParseResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ParseResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ParseResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ParseResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ParseResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ParseResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ParseResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ParseResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ParseResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ParseResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ParseResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ParseResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/csv\/package$$ParseResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/csv\/package$$ParseResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/csv\/package$$ParseResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/csv\/package$$ParseResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/csv\/package$$ParseResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/csv\/package$$ParseResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/csv\/package$$ParseResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/csv\/package$$ParseResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/csv\/package$$ParseResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/csv\/package$$ParseResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/csv\/package$$ParseResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/csv\/package$$ParseResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/csv\/package$$ParseResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/csv\/package$$ParseResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/csv\/package$$ParseResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/csv\/package$$ParseResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/csv\/package$$ParseResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/csv\/package$$ParseResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/csv\/package$$ParseResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/package$$ParseResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/csv\/package$$ParseResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/csv\/package$$ParseResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/csv\/package$$ParseResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$ParseResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$ParseResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$ParseResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$ParseResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$ParseResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$ParseResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$ParseResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$ParseResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$ParseResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$ParseResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$ParseResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$ParseResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$ParseResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$ParseResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$ParseResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$ParseResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$ParseResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$ParseResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$ParseResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/csv\/package$$ParseResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/csv\/package$$ParseResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/csv\/package$$ParseResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/csv\/package$$ParseResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/csv\/package$$ParseResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$ParseResult.html"}, {"name" : "kantan.csv.PlatformSpecificCellCodecInstances", "trait" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html", "kind" : "trait", "members_trait" : [{"label" : "dateCodec", "tail" : "(format: DateFormat): CellCodec[Date]", "member" : "kantan.csv.PlatformSpecificCellCodecInstances.dateCodec", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#dateCodec(format:java.text.DateFormat):kantan.csv.CellCodec[java.util.Date]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/PlatformSpecificCellCodecInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.PlatformSpecificCellDecoderInstances", "trait" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "dateDecoder", "tail" : "(format: DateFormat): CellDecoder[Date]", "member" : "kantan.csv.PlatformSpecificCellDecoderInstances.dateDecoder", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#dateDecoder(format:java.text.DateFormat):kantan.csv.CellDecoder[java.util.Date]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/PlatformSpecificCellDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.PlatformSpecificCellEncoderInstances", "trait" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "dateEncoder", "tail" : "(format: DateFormat): CellEncoder[Date]", "member" : "kantan.csv.PlatformSpecificCellEncoderInstances.dateEncoder", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#dateEncoder(format:java.text.DateFormat):kantan.csv.CellEncoder[java.util.Date]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/PlatformSpecificCellEncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ReadError", "shortDescription" : "Parent type for all errors that can occur while dealing with CSV data.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/csv\/ReadError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/ReadError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/csv\/ReadError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/csv\/ReadError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/csv\/ReadError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/csv\/ReadError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/csv\/ReadError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/csv\/ReadError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/csv\/ReadError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/csv\/ReadError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/ReadError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/ReadError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/csv\/ReadError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/csv\/ReadError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/csv\/ReadError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/csv\/ReadError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/csv\/ReadError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ReadError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ReadError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ReadError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ReadError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ReadError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ReadError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ReadError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ReadError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ReadError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ReadError.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ReadError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ReadError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ReadError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ReadError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ReadError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ReadError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ReadError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ReadError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/csv\/ReadError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/csv\/ReadError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/csv\/ReadError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "kantan\/csv\/ReadError.html", "kind" : "class"}, {"name" : "kantan.csv.ReadResult", "shortDescription" : "Provides useful methods for creating instances of ReadResult.", "object" : "kantan\/csv\/ReadResult$.html", "members_object" : [{"label" : "failure", "tail" : "(f: ReadError): Either[ReadError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/csv\/ReadResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[ReadError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/csv\/ReadResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[ReadError, S]])(bf: BuildFrom[M[Either[ReadError, S]], S, M[S]]): Either[ReadError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/csv\/ReadResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ReadResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ReadResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ReadResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ReadResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ReadResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ReadResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ReadResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ReadResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ReadResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ReadResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ReadResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ReadResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ReadResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ReadResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ReadResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ReadResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ReadResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ReadResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ReadResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/csv\/package$$ReadResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/csv\/package$$ReadResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/csv\/package$$ReadResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/csv\/package$$ReadResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/csv\/package$$ReadResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/csv\/package$$ReadResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/csv\/package$$ReadResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/csv\/package$$ReadResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/csv\/package$$ReadResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/csv\/package$$ReadResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/csv\/package$$ReadResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/csv\/package$$ReadResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/csv\/package$$ReadResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/csv\/package$$ReadResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/csv\/package$$ReadResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/csv\/package$$ReadResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/csv\/package$$ReadResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/csv\/package$$ReadResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/csv\/package$$ReadResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/package$$ReadResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/csv\/package$$ReadResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/csv\/package$$ReadResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/csv\/package$$ReadResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$ReadResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$ReadResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$ReadResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$ReadResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$ReadResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$ReadResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$ReadResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$ReadResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$ReadResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$ReadResult.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$ReadResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$ReadResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$ReadResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$ReadResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$ReadResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$ReadResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$ReadResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$ReadResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$ReadResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/csv\/package$$ReadResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/csv\/package$$ReadResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/csv\/package$$ReadResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/csv\/package$$ReadResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/csv\/package$$ReadResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$ReadResult.html"}, {"name" : "kantan.csv.RowCodec", "shortDescription" : "Provides useful methods for RowCodec instance creation.", "object" : "kantan\/csv\/RowCodec$.html", "members_object" : [{"label" : "from", "tail" : "(d: Decoder[Seq[String], D, DecodeError, codecs.type], e: Encoder[Seq[String], D, codecs.type]): Codec[Seq[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/csv\/RowCodec$.html#from[D](d:kantan.codecs.Decoder[E,D,F,T],e:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (Seq[String]) => Either[DecodeError, D])(g: (D) => Seq[String]): Codec[Seq[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/csv\/RowCodec$.html#from[D](f:E=>Either[F,D])(g:D=>E):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$1981:kantan.csv.CellEncoder[A1],implicitevidence$1982:kantan.csv.CellDecoder[A1],implicitevidence$1983:kantan.csv.CellEncoder[A2],implicitevidence$1984:kantan.csv.CellDecoder[A2],implicitevidence$1985:kantan.csv.CellEncoder[A3],implicitevidence$1986:kantan.csv.CellDecoder[A3],implicitevidence$1987:kantan.csv.CellEncoder[A4],implicitevidence$1988:kantan.csv.CellDecoder[A4],implicitevidence$1989:kantan.csv.CellEncoder[A5],implicitevidence$1990:kantan.csv.CellDecoder[A5],implicitevidence$1991:kantan.csv.CellEncoder[A6],implicitevidence$1992:kantan.csv.CellDecoder[A6],implicitevidence$1993:kantan.csv.CellEncoder[A7],implicitevidence$1994:kantan.csv.CellDecoder[A7],implicitevidence$1995:kantan.csv.CellEncoder[A8],implicitevidence$1996:kantan.csv.CellDecoder[A8],implicitevidence$1997:kantan.csv.CellEncoder[A9],implicitevidence$1998:kantan.csv.CellDecoder[A9],implicitevidence$1999:kantan.csv.CellEncoder[A10],implicitevidence$2000:kantan.csv.CellDecoder[A10],implicitevidence$2001:kantan.csv.CellEncoder[A11],implicitevidence$2002:kantan.csv.CellDecoder[A11],implicitevidence$2003:kantan.csv.CellEncoder[A12],implicitevidence$2004:kantan.csv.CellDecoder[A12],implicitevidence$2005:kantan.csv.CellEncoder[A13],implicitevidence$2006:kantan.csv.CellDecoder[A13],implicitevidence$2007:kantan.csv.CellEncoder[A14],implicitevidence$2008:kantan.csv.CellDecoder[A14],implicitevidence$2009:kantan.csv.CellEncoder[A15],implicitevidence$2010:kantan.csv.CellDecoder[A15],implicitevidence$2011:kantan.csv.CellEncoder[A16],implicitevidence$2012:kantan.csv.CellDecoder[A16],implicitevidence$2013:kantan.csv.CellEncoder[A17],implicitevidence$2014:kantan.csv.CellDecoder[A17],implicitevidence$2015:kantan.csv.CellEncoder[A18],implicitevidence$2016:kantan.csv.CellDecoder[A18],implicitevidence$2017:kantan.csv.CellEncoder[A19],implicitevidence$2018:kantan.csv.CellDecoder[A19],implicitevidence$2019:kantan.csv.CellEncoder[A20],implicitevidence$2020:kantan.csv.CellDecoder[A20],implicitevidence$2021:kantan.csv.CellEncoder[A21],implicitevidence$2022:kantan.csv.CellDecoder[A21],implicitevidence$2023:kantan.csv.CellEncoder[A22],implicitevidence$2024:kantan.csv.CellDecoder[A22]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$1939:kantan.csv.CellEncoder[A1],implicitevidence$1940:kantan.csv.CellDecoder[A1],implicitevidence$1941:kantan.csv.CellEncoder[A2],implicitevidence$1942:kantan.csv.CellDecoder[A2],implicitevidence$1943:kantan.csv.CellEncoder[A3],implicitevidence$1944:kantan.csv.CellDecoder[A3],implicitevidence$1945:kantan.csv.CellEncoder[A4],implicitevidence$1946:kantan.csv.CellDecoder[A4],implicitevidence$1947:kantan.csv.CellEncoder[A5],implicitevidence$1948:kantan.csv.CellDecoder[A5],implicitevidence$1949:kantan.csv.CellEncoder[A6],implicitevidence$1950:kantan.csv.CellDecoder[A6],implicitevidence$1951:kantan.csv.CellEncoder[A7],implicitevidence$1952:kantan.csv.CellDecoder[A7],implicitevidence$1953:kantan.csv.CellEncoder[A8],implicitevidence$1954:kantan.csv.CellDecoder[A8],implicitevidence$1955:kantan.csv.CellEncoder[A9],implicitevidence$1956:kantan.csv.CellDecoder[A9],implicitevidence$1957:kantan.csv.CellEncoder[A10],implicitevidence$1958:kantan.csv.CellDecoder[A10],implicitevidence$1959:kantan.csv.CellEncoder[A11],implicitevidence$1960:kantan.csv.CellDecoder[A11],implicitevidence$1961:kantan.csv.CellEncoder[A12],implicitevidence$1962:kantan.csv.CellDecoder[A12],implicitevidence$1963:kantan.csv.CellEncoder[A13],implicitevidence$1964:kantan.csv.CellDecoder[A13],implicitevidence$1965:kantan.csv.CellEncoder[A14],implicitevidence$1966:kantan.csv.CellDecoder[A14],implicitevidence$1967:kantan.csv.CellEncoder[A15],implicitevidence$1968:kantan.csv.CellDecoder[A15],implicitevidence$1969:kantan.csv.CellEncoder[A16],implicitevidence$1970:kantan.csv.CellDecoder[A16],implicitevidence$1971:kantan.csv.CellEncoder[A17],implicitevidence$1972:kantan.csv.CellDecoder[A17],implicitevidence$1973:kantan.csv.CellEncoder[A18],implicitevidence$1974:kantan.csv.CellDecoder[A18],implicitevidence$1975:kantan.csv.CellEncoder[A19],implicitevidence$1976:kantan.csv.CellDecoder[A19],implicitevidence$1977:kantan.csv.CellEncoder[A20],implicitevidence$1978:kantan.csv.CellDecoder[A20],implicitevidence$1979:kantan.csv.CellEncoder[A21],implicitevidence$1980:kantan.csv.CellDecoder[A21]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$1899:kantan.csv.CellEncoder[A1],implicitevidence$1900:kantan.csv.CellDecoder[A1],implicitevidence$1901:kantan.csv.CellEncoder[A2],implicitevidence$1902:kantan.csv.CellDecoder[A2],implicitevidence$1903:kantan.csv.CellEncoder[A3],implicitevidence$1904:kantan.csv.CellDecoder[A3],implicitevidence$1905:kantan.csv.CellEncoder[A4],implicitevidence$1906:kantan.csv.CellDecoder[A4],implicitevidence$1907:kantan.csv.CellEncoder[A5],implicitevidence$1908:kantan.csv.CellDecoder[A5],implicitevidence$1909:kantan.csv.CellEncoder[A6],implicitevidence$1910:kantan.csv.CellDecoder[A6],implicitevidence$1911:kantan.csv.CellEncoder[A7],implicitevidence$1912:kantan.csv.CellDecoder[A7],implicitevidence$1913:kantan.csv.CellEncoder[A8],implicitevidence$1914:kantan.csv.CellDecoder[A8],implicitevidence$1915:kantan.csv.CellEncoder[A9],implicitevidence$1916:kantan.csv.CellDecoder[A9],implicitevidence$1917:kantan.csv.CellEncoder[A10],implicitevidence$1918:kantan.csv.CellDecoder[A10],implicitevidence$1919:kantan.csv.CellEncoder[A11],implicitevidence$1920:kantan.csv.CellDecoder[A11],implicitevidence$1921:kantan.csv.CellEncoder[A12],implicitevidence$1922:kantan.csv.CellDecoder[A12],implicitevidence$1923:kantan.csv.CellEncoder[A13],implicitevidence$1924:kantan.csv.CellDecoder[A13],implicitevidence$1925:kantan.csv.CellEncoder[A14],implicitevidence$1926:kantan.csv.CellDecoder[A14],implicitevidence$1927:kantan.csv.CellEncoder[A15],implicitevidence$1928:kantan.csv.CellDecoder[A15],implicitevidence$1929:kantan.csv.CellEncoder[A16],implicitevidence$1930:kantan.csv.CellDecoder[A16],implicitevidence$1931:kantan.csv.CellEncoder[A17],implicitevidence$1932:kantan.csv.CellDecoder[A17],implicitevidence$1933:kantan.csv.CellEncoder[A18],implicitevidence$1934:kantan.csv.CellDecoder[A18],implicitevidence$1935:kantan.csv.CellEncoder[A19],implicitevidence$1936:kantan.csv.CellDecoder[A19],implicitevidence$1937:kantan.csv.CellEncoder[A20],implicitevidence$1938:kantan.csv.CellDecoder[A20]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$1861:kantan.csv.CellEncoder[A1],implicitevidence$1862:kantan.csv.CellDecoder[A1],implicitevidence$1863:kantan.csv.CellEncoder[A2],implicitevidence$1864:kantan.csv.CellDecoder[A2],implicitevidence$1865:kantan.csv.CellEncoder[A3],implicitevidence$1866:kantan.csv.CellDecoder[A3],implicitevidence$1867:kantan.csv.CellEncoder[A4],implicitevidence$1868:kantan.csv.CellDecoder[A4],implicitevidence$1869:kantan.csv.CellEncoder[A5],implicitevidence$1870:kantan.csv.CellDecoder[A5],implicitevidence$1871:kantan.csv.CellEncoder[A6],implicitevidence$1872:kantan.csv.CellDecoder[A6],implicitevidence$1873:kantan.csv.CellEncoder[A7],implicitevidence$1874:kantan.csv.CellDecoder[A7],implicitevidence$1875:kantan.csv.CellEncoder[A8],implicitevidence$1876:kantan.csv.CellDecoder[A8],implicitevidence$1877:kantan.csv.CellEncoder[A9],implicitevidence$1878:kantan.csv.CellDecoder[A9],implicitevidence$1879:kantan.csv.CellEncoder[A10],implicitevidence$1880:kantan.csv.CellDecoder[A10],implicitevidence$1881:kantan.csv.CellEncoder[A11],implicitevidence$1882:kantan.csv.CellDecoder[A11],implicitevidence$1883:kantan.csv.CellEncoder[A12],implicitevidence$1884:kantan.csv.CellDecoder[A12],implicitevidence$1885:kantan.csv.CellEncoder[A13],implicitevidence$1886:kantan.csv.CellDecoder[A13],implicitevidence$1887:kantan.csv.CellEncoder[A14],implicitevidence$1888:kantan.csv.CellDecoder[A14],implicitevidence$1889:kantan.csv.CellEncoder[A15],implicitevidence$1890:kantan.csv.CellDecoder[A15],implicitevidence$1891:kantan.csv.CellEncoder[A16],implicitevidence$1892:kantan.csv.CellDecoder[A16],implicitevidence$1893:kantan.csv.CellEncoder[A17],implicitevidence$1894:kantan.csv.CellDecoder[A17],implicitevidence$1895:kantan.csv.CellEncoder[A18],implicitevidence$1896:kantan.csv.CellDecoder[A18],implicitevidence$1897:kantan.csv.CellEncoder[A19],implicitevidence$1898:kantan.csv.CellDecoder[A19]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$1825:kantan.csv.CellEncoder[A1],implicitevidence$1826:kantan.csv.CellDecoder[A1],implicitevidence$1827:kantan.csv.CellEncoder[A2],implicitevidence$1828:kantan.csv.CellDecoder[A2],implicitevidence$1829:kantan.csv.CellEncoder[A3],implicitevidence$1830:kantan.csv.CellDecoder[A3],implicitevidence$1831:kantan.csv.CellEncoder[A4],implicitevidence$1832:kantan.csv.CellDecoder[A4],implicitevidence$1833:kantan.csv.CellEncoder[A5],implicitevidence$1834:kantan.csv.CellDecoder[A5],implicitevidence$1835:kantan.csv.CellEncoder[A6],implicitevidence$1836:kantan.csv.CellDecoder[A6],implicitevidence$1837:kantan.csv.CellEncoder[A7],implicitevidence$1838:kantan.csv.CellDecoder[A7],implicitevidence$1839:kantan.csv.CellEncoder[A8],implicitevidence$1840:kantan.csv.CellDecoder[A8],implicitevidence$1841:kantan.csv.CellEncoder[A9],implicitevidence$1842:kantan.csv.CellDecoder[A9],implicitevidence$1843:kantan.csv.CellEncoder[A10],implicitevidence$1844:kantan.csv.CellDecoder[A10],implicitevidence$1845:kantan.csv.CellEncoder[A11],implicitevidence$1846:kantan.csv.CellDecoder[A11],implicitevidence$1847:kantan.csv.CellEncoder[A12],implicitevidence$1848:kantan.csv.CellDecoder[A12],implicitevidence$1849:kantan.csv.CellEncoder[A13],implicitevidence$1850:kantan.csv.CellDecoder[A13],implicitevidence$1851:kantan.csv.CellEncoder[A14],implicitevidence$1852:kantan.csv.CellDecoder[A14],implicitevidence$1853:kantan.csv.CellEncoder[A15],implicitevidence$1854:kantan.csv.CellDecoder[A15],implicitevidence$1855:kantan.csv.CellEncoder[A16],implicitevidence$1856:kantan.csv.CellDecoder[A16],implicitevidence$1857:kantan.csv.CellEncoder[A17],implicitevidence$1858:kantan.csv.CellDecoder[A17],implicitevidence$1859:kantan.csv.CellEncoder[A18],implicitevidence$1860:kantan.csv.CellDecoder[A18]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$1791:kantan.csv.CellEncoder[A1],implicitevidence$1792:kantan.csv.CellDecoder[A1],implicitevidence$1793:kantan.csv.CellEncoder[A2],implicitevidence$1794:kantan.csv.CellDecoder[A2],implicitevidence$1795:kantan.csv.CellEncoder[A3],implicitevidence$1796:kantan.csv.CellDecoder[A3],implicitevidence$1797:kantan.csv.CellEncoder[A4],implicitevidence$1798:kantan.csv.CellDecoder[A4],implicitevidence$1799:kantan.csv.CellEncoder[A5],implicitevidence$1800:kantan.csv.CellDecoder[A5],implicitevidence$1801:kantan.csv.CellEncoder[A6],implicitevidence$1802:kantan.csv.CellDecoder[A6],implicitevidence$1803:kantan.csv.CellEncoder[A7],implicitevidence$1804:kantan.csv.CellDecoder[A7],implicitevidence$1805:kantan.csv.CellEncoder[A8],implicitevidence$1806:kantan.csv.CellDecoder[A8],implicitevidence$1807:kantan.csv.CellEncoder[A9],implicitevidence$1808:kantan.csv.CellDecoder[A9],implicitevidence$1809:kantan.csv.CellEncoder[A10],implicitevidence$1810:kantan.csv.CellDecoder[A10],implicitevidence$1811:kantan.csv.CellEncoder[A11],implicitevidence$1812:kantan.csv.CellDecoder[A11],implicitevidence$1813:kantan.csv.CellEncoder[A12],implicitevidence$1814:kantan.csv.CellDecoder[A12],implicitevidence$1815:kantan.csv.CellEncoder[A13],implicitevidence$1816:kantan.csv.CellDecoder[A13],implicitevidence$1817:kantan.csv.CellEncoder[A14],implicitevidence$1818:kantan.csv.CellDecoder[A14],implicitevidence$1819:kantan.csv.CellEncoder[A15],implicitevidence$1820:kantan.csv.CellDecoder[A15],implicitevidence$1821:kantan.csv.CellEncoder[A16],implicitevidence$1822:kantan.csv.CellDecoder[A16],implicitevidence$1823:kantan.csv.CellEncoder[A17],implicitevidence$1824:kantan.csv.CellDecoder[A17]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$1759:kantan.csv.CellEncoder[A1],implicitevidence$1760:kantan.csv.CellDecoder[A1],implicitevidence$1761:kantan.csv.CellEncoder[A2],implicitevidence$1762:kantan.csv.CellDecoder[A2],implicitevidence$1763:kantan.csv.CellEncoder[A3],implicitevidence$1764:kantan.csv.CellDecoder[A3],implicitevidence$1765:kantan.csv.CellEncoder[A4],implicitevidence$1766:kantan.csv.CellDecoder[A4],implicitevidence$1767:kantan.csv.CellEncoder[A5],implicitevidence$1768:kantan.csv.CellDecoder[A5],implicitevidence$1769:kantan.csv.CellEncoder[A6],implicitevidence$1770:kantan.csv.CellDecoder[A6],implicitevidence$1771:kantan.csv.CellEncoder[A7],implicitevidence$1772:kantan.csv.CellDecoder[A7],implicitevidence$1773:kantan.csv.CellEncoder[A8],implicitevidence$1774:kantan.csv.CellDecoder[A8],implicitevidence$1775:kantan.csv.CellEncoder[A9],implicitevidence$1776:kantan.csv.CellDecoder[A9],implicitevidence$1777:kantan.csv.CellEncoder[A10],implicitevidence$1778:kantan.csv.CellDecoder[A10],implicitevidence$1779:kantan.csv.CellEncoder[A11],implicitevidence$1780:kantan.csv.CellDecoder[A11],implicitevidence$1781:kantan.csv.CellEncoder[A12],implicitevidence$1782:kantan.csv.CellDecoder[A12],implicitevidence$1783:kantan.csv.CellEncoder[A13],implicitevidence$1784:kantan.csv.CellDecoder[A13],implicitevidence$1785:kantan.csv.CellEncoder[A14],implicitevidence$1786:kantan.csv.CellDecoder[A14],implicitevidence$1787:kantan.csv.CellEncoder[A15],implicitevidence$1788:kantan.csv.CellDecoder[A15],implicitevidence$1789:kantan.csv.CellEncoder[A16],implicitevidence$1790:kantan.csv.CellDecoder[A16]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$1729:kantan.csv.CellEncoder[A1],implicitevidence$1730:kantan.csv.CellDecoder[A1],implicitevidence$1731:kantan.csv.CellEncoder[A2],implicitevidence$1732:kantan.csv.CellDecoder[A2],implicitevidence$1733:kantan.csv.CellEncoder[A3],implicitevidence$1734:kantan.csv.CellDecoder[A3],implicitevidence$1735:kantan.csv.CellEncoder[A4],implicitevidence$1736:kantan.csv.CellDecoder[A4],implicitevidence$1737:kantan.csv.CellEncoder[A5],implicitevidence$1738:kantan.csv.CellDecoder[A5],implicitevidence$1739:kantan.csv.CellEncoder[A6],implicitevidence$1740:kantan.csv.CellDecoder[A6],implicitevidence$1741:kantan.csv.CellEncoder[A7],implicitevidence$1742:kantan.csv.CellDecoder[A7],implicitevidence$1743:kantan.csv.CellEncoder[A8],implicitevidence$1744:kantan.csv.CellDecoder[A8],implicitevidence$1745:kantan.csv.CellEncoder[A9],implicitevidence$1746:kantan.csv.CellDecoder[A9],implicitevidence$1747:kantan.csv.CellEncoder[A10],implicitevidence$1748:kantan.csv.CellDecoder[A10],implicitevidence$1749:kantan.csv.CellEncoder[A11],implicitevidence$1750:kantan.csv.CellDecoder[A11],implicitevidence$1751:kantan.csv.CellEncoder[A12],implicitevidence$1752:kantan.csv.CellDecoder[A12],implicitevidence$1753:kantan.csv.CellEncoder[A13],implicitevidence$1754:kantan.csv.CellDecoder[A13],implicitevidence$1755:kantan.csv.CellEncoder[A14],implicitevidence$1756:kantan.csv.CellDecoder[A14],implicitevidence$1757:kantan.csv.CellEncoder[A15],implicitevidence$1758:kantan.csv.CellDecoder[A15]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$1701:kantan.csv.CellEncoder[A1],implicitevidence$1702:kantan.csv.CellDecoder[A1],implicitevidence$1703:kantan.csv.CellEncoder[A2],implicitevidence$1704:kantan.csv.CellDecoder[A2],implicitevidence$1705:kantan.csv.CellEncoder[A3],implicitevidence$1706:kantan.csv.CellDecoder[A3],implicitevidence$1707:kantan.csv.CellEncoder[A4],implicitevidence$1708:kantan.csv.CellDecoder[A4],implicitevidence$1709:kantan.csv.CellEncoder[A5],implicitevidence$1710:kantan.csv.CellDecoder[A5],implicitevidence$1711:kantan.csv.CellEncoder[A6],implicitevidence$1712:kantan.csv.CellDecoder[A6],implicitevidence$1713:kantan.csv.CellEncoder[A7],implicitevidence$1714:kantan.csv.CellDecoder[A7],implicitevidence$1715:kantan.csv.CellEncoder[A8],implicitevidence$1716:kantan.csv.CellDecoder[A8],implicitevidence$1717:kantan.csv.CellEncoder[A9],implicitevidence$1718:kantan.csv.CellDecoder[A9],implicitevidence$1719:kantan.csv.CellEncoder[A10],implicitevidence$1720:kantan.csv.CellDecoder[A10],implicitevidence$1721:kantan.csv.CellEncoder[A11],implicitevidence$1722:kantan.csv.CellDecoder[A11],implicitevidence$1723:kantan.csv.CellEncoder[A12],implicitevidence$1724:kantan.csv.CellDecoder[A12],implicitevidence$1725:kantan.csv.CellEncoder[A13],implicitevidence$1726:kantan.csv.CellDecoder[A13],implicitevidence$1727:kantan.csv.CellEncoder[A14],implicitevidence$1728:kantan.csv.CellDecoder[A14]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$1675:kantan.csv.CellEncoder[A1],implicitevidence$1676:kantan.csv.CellDecoder[A1],implicitevidence$1677:kantan.csv.CellEncoder[A2],implicitevidence$1678:kantan.csv.CellDecoder[A2],implicitevidence$1679:kantan.csv.CellEncoder[A3],implicitevidence$1680:kantan.csv.CellDecoder[A3],implicitevidence$1681:kantan.csv.CellEncoder[A4],implicitevidence$1682:kantan.csv.CellDecoder[A4],implicitevidence$1683:kantan.csv.CellEncoder[A5],implicitevidence$1684:kantan.csv.CellDecoder[A5],implicitevidence$1685:kantan.csv.CellEncoder[A6],implicitevidence$1686:kantan.csv.CellDecoder[A6],implicitevidence$1687:kantan.csv.CellEncoder[A7],implicitevidence$1688:kantan.csv.CellDecoder[A7],implicitevidence$1689:kantan.csv.CellEncoder[A8],implicitevidence$1690:kantan.csv.CellDecoder[A8],implicitevidence$1691:kantan.csv.CellEncoder[A9],implicitevidence$1692:kantan.csv.CellDecoder[A9],implicitevidence$1693:kantan.csv.CellEncoder[A10],implicitevidence$1694:kantan.csv.CellDecoder[A10],implicitevidence$1695:kantan.csv.CellEncoder[A11],implicitevidence$1696:kantan.csv.CellDecoder[A11],implicitevidence$1697:kantan.csv.CellEncoder[A12],implicitevidence$1698:kantan.csv.CellDecoder[A12],implicitevidence$1699:kantan.csv.CellEncoder[A13],implicitevidence$1700:kantan.csv.CellDecoder[A13]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$1651:kantan.csv.CellEncoder[A1],implicitevidence$1652:kantan.csv.CellDecoder[A1],implicitevidence$1653:kantan.csv.CellEncoder[A2],implicitevidence$1654:kantan.csv.CellDecoder[A2],implicitevidence$1655:kantan.csv.CellEncoder[A3],implicitevidence$1656:kantan.csv.CellDecoder[A3],implicitevidence$1657:kantan.csv.CellEncoder[A4],implicitevidence$1658:kantan.csv.CellDecoder[A4],implicitevidence$1659:kantan.csv.CellEncoder[A5],implicitevidence$1660:kantan.csv.CellDecoder[A5],implicitevidence$1661:kantan.csv.CellEncoder[A6],implicitevidence$1662:kantan.csv.CellDecoder[A6],implicitevidence$1663:kantan.csv.CellEncoder[A7],implicitevidence$1664:kantan.csv.CellDecoder[A7],implicitevidence$1665:kantan.csv.CellEncoder[A8],implicitevidence$1666:kantan.csv.CellDecoder[A8],implicitevidence$1667:kantan.csv.CellEncoder[A9],implicitevidence$1668:kantan.csv.CellDecoder[A9],implicitevidence$1669:kantan.csv.CellEncoder[A10],implicitevidence$1670:kantan.csv.CellDecoder[A10],implicitevidence$1671:kantan.csv.CellEncoder[A11],implicitevidence$1672:kantan.csv.CellDecoder[A11],implicitevidence$1673:kantan.csv.CellEncoder[A12],implicitevidence$1674:kantan.csv.CellDecoder[A12]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$1629:kantan.csv.CellEncoder[A1],implicitevidence$1630:kantan.csv.CellDecoder[A1],implicitevidence$1631:kantan.csv.CellEncoder[A2],implicitevidence$1632:kantan.csv.CellDecoder[A2],implicitevidence$1633:kantan.csv.CellEncoder[A3],implicitevidence$1634:kantan.csv.CellDecoder[A3],implicitevidence$1635:kantan.csv.CellEncoder[A4],implicitevidence$1636:kantan.csv.CellDecoder[A4],implicitevidence$1637:kantan.csv.CellEncoder[A5],implicitevidence$1638:kantan.csv.CellDecoder[A5],implicitevidence$1639:kantan.csv.CellEncoder[A6],implicitevidence$1640:kantan.csv.CellDecoder[A6],implicitevidence$1641:kantan.csv.CellEncoder[A7],implicitevidence$1642:kantan.csv.CellDecoder[A7],implicitevidence$1643:kantan.csv.CellEncoder[A8],implicitevidence$1644:kantan.csv.CellDecoder[A8],implicitevidence$1645:kantan.csv.CellEncoder[A9],implicitevidence$1646:kantan.csv.CellDecoder[A9],implicitevidence$1647:kantan.csv.CellEncoder[A10],implicitevidence$1648:kantan.csv.CellDecoder[A10],implicitevidence$1649:kantan.csv.CellEncoder[A11],implicitevidence$1650:kantan.csv.CellDecoder[A11]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$1609:kantan.csv.CellEncoder[A1],implicitevidence$1610:kantan.csv.CellDecoder[A1],implicitevidence$1611:kantan.csv.CellEncoder[A2],implicitevidence$1612:kantan.csv.CellDecoder[A2],implicitevidence$1613:kantan.csv.CellEncoder[A3],implicitevidence$1614:kantan.csv.CellDecoder[A3],implicitevidence$1615:kantan.csv.CellEncoder[A4],implicitevidence$1616:kantan.csv.CellDecoder[A4],implicitevidence$1617:kantan.csv.CellEncoder[A5],implicitevidence$1618:kantan.csv.CellDecoder[A5],implicitevidence$1619:kantan.csv.CellEncoder[A6],implicitevidence$1620:kantan.csv.CellDecoder[A6],implicitevidence$1621:kantan.csv.CellEncoder[A7],implicitevidence$1622:kantan.csv.CellDecoder[A7],implicitevidence$1623:kantan.csv.CellEncoder[A8],implicitevidence$1624:kantan.csv.CellDecoder[A8],implicitevidence$1625:kantan.csv.CellEncoder[A9],implicitevidence$1626:kantan.csv.CellDecoder[A9],implicitevidence$1627:kantan.csv.CellEncoder[A10],implicitevidence$1628:kantan.csv.CellDecoder[A10]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$1591:kantan.csv.CellEncoder[A1],implicitevidence$1592:kantan.csv.CellDecoder[A1],implicitevidence$1593:kantan.csv.CellEncoder[A2],implicitevidence$1594:kantan.csv.CellDecoder[A2],implicitevidence$1595:kantan.csv.CellEncoder[A3],implicitevidence$1596:kantan.csv.CellDecoder[A3],implicitevidence$1597:kantan.csv.CellEncoder[A4],implicitevidence$1598:kantan.csv.CellDecoder[A4],implicitevidence$1599:kantan.csv.CellEncoder[A5],implicitevidence$1600:kantan.csv.CellDecoder[A5],implicitevidence$1601:kantan.csv.CellEncoder[A6],implicitevidence$1602:kantan.csv.CellDecoder[A6],implicitevidence$1603:kantan.csv.CellEncoder[A7],implicitevidence$1604:kantan.csv.CellDecoder[A7],implicitevidence$1605:kantan.csv.CellEncoder[A8],implicitevidence$1606:kantan.csv.CellDecoder[A8],implicitevidence$1607:kantan.csv.CellEncoder[A9],implicitevidence$1608:kantan.csv.CellDecoder[A9]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8](f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$1575:kantan.csv.CellEncoder[A1],implicitevidence$1576:kantan.csv.CellDecoder[A1],implicitevidence$1577:kantan.csv.CellEncoder[A2],implicitevidence$1578:kantan.csv.CellDecoder[A2],implicitevidence$1579:kantan.csv.CellEncoder[A3],implicitevidence$1580:kantan.csv.CellDecoder[A3],implicitevidence$1581:kantan.csv.CellEncoder[A4],implicitevidence$1582:kantan.csv.CellDecoder[A4],implicitevidence$1583:kantan.csv.CellEncoder[A5],implicitevidence$1584:kantan.csv.CellDecoder[A5],implicitevidence$1585:kantan.csv.CellEncoder[A6],implicitevidence$1586:kantan.csv.CellDecoder[A6],implicitevidence$1587:kantan.csv.CellEncoder[A7],implicitevidence$1588:kantan.csv.CellDecoder[A7],implicitevidence$1589:kantan.csv.CellEncoder[A8],implicitevidence$1590:kantan.csv.CellDecoder[A8]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7](f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$1561:kantan.csv.CellEncoder[A1],implicitevidence$1562:kantan.csv.CellDecoder[A1],implicitevidence$1563:kantan.csv.CellEncoder[A2],implicitevidence$1564:kantan.csv.CellDecoder[A2],implicitevidence$1565:kantan.csv.CellEncoder[A3],implicitevidence$1566:kantan.csv.CellDecoder[A3],implicitevidence$1567:kantan.csv.CellEncoder[A4],implicitevidence$1568:kantan.csv.CellDecoder[A4],implicitevidence$1569:kantan.csv.CellEncoder[A5],implicitevidence$1570:kantan.csv.CellDecoder[A5],implicitevidence$1571:kantan.csv.CellEncoder[A6],implicitevidence$1572:kantan.csv.CellDecoder[A6],implicitevidence$1573:kantan.csv.CellEncoder[A7],implicitevidence$1574:kantan.csv.CellDecoder[A7]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6](f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$1549:kantan.csv.CellEncoder[A1],implicitevidence$1550:kantan.csv.CellDecoder[A1],implicitevidence$1551:kantan.csv.CellEncoder[A2],implicitevidence$1552:kantan.csv.CellDecoder[A2],implicitevidence$1553:kantan.csv.CellEncoder[A3],implicitevidence$1554:kantan.csv.CellDecoder[A3],implicitevidence$1555:kantan.csv.CellEncoder[A4],implicitevidence$1556:kantan.csv.CellDecoder[A4],implicitevidence$1557:kantan.csv.CellEncoder[A5],implicitevidence$1558:kantan.csv.CellDecoder[A5],implicitevidence$1559:kantan.csv.CellEncoder[A6],implicitevidence$1560:kantan.csv.CellDecoder[A6]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4, A5) => C)(g: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4,A5](f:(A1,A2,A3,A4,A5)=>C)(g:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$1539:kantan.csv.CellEncoder[A1],implicitevidence$1540:kantan.csv.CellDecoder[A1],implicitevidence$1541:kantan.csv.CellEncoder[A2],implicitevidence$1542:kantan.csv.CellDecoder[A2],implicitevidence$1543:kantan.csv.CellEncoder[A3],implicitevidence$1544:kantan.csv.CellDecoder[A3],implicitevidence$1545:kantan.csv.CellEncoder[A4],implicitevidence$1546:kantan.csv.CellDecoder[A4],implicitevidence$1547:kantan.csv.CellEncoder[A5],implicitevidence$1548:kantan.csv.CellDecoder[A5]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3, A4) => C)(g: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3,A4](f:(A1,A2,A3,A4)=>C)(g:C=>Option[(A1,A2,A3,A4)])(implicitevidence$1531:kantan.csv.CellEncoder[A1],implicitevidence$1532:kantan.csv.CellDecoder[A1],implicitevidence$1533:kantan.csv.CellEncoder[A2],implicitevidence$1534:kantan.csv.CellDecoder[A2],implicitevidence$1535:kantan.csv.CellEncoder[A3],implicitevidence$1536:kantan.csv.CellDecoder[A3],implicitevidence$1537:kantan.csv.CellEncoder[A4],implicitevidence$1538:kantan.csv.CellDecoder[A4]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2, A3) => C)(g: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2,A3](f:(A1,A2,A3)=>C)(g:C=>Option[(A1,A2,A3)])(implicitevidence$1525:kantan.csv.CellEncoder[A1],implicitevidence$1526:kantan.csv.CellDecoder[A1],implicitevidence$1527:kantan.csv.CellEncoder[A2],implicitevidence$1528:kantan.csv.CellDecoder[A2],implicitevidence$1529:kantan.csv.CellEncoder[A3],implicitevidence$1530:kantan.csv.CellDecoder[A3]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1, A2) => C)(g: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1,A2](f:(A1,A2)=>C)(g:C=>Option[(A1,A2)])(implicitevidence$1521:kantan.csv.CellEncoder[A1],implicitevidence$1522:kantan.csv.CellDecoder[A1],implicitevidence$1523:kantan.csv.CellEncoder[A2],implicitevidence$1524:kantan.csv.CellDecoder[A2]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (A1) => C)(g: (C) => Option[A1])(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseOrdered", "link" : "kantan\/csv\/RowCodec$.html#caseOrdered[C,A1](f:A1=>C)(g:C=>Option[A1])(implicitevidence$1519:kantan.csv.CellEncoder[A1],implicitevidence$1520:kantan.csv.CellDecoder[A1]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$1475:kantan.csv.CellEncoder[A1],implicitevidence$1476:kantan.csv.CellDecoder[A1],implicitevidence$1477:kantan.csv.CellEncoder[A2],implicitevidence$1478:kantan.csv.CellDecoder[A2],implicitevidence$1479:kantan.csv.CellEncoder[A3],implicitevidence$1480:kantan.csv.CellDecoder[A3],implicitevidence$1481:kantan.csv.CellEncoder[A4],implicitevidence$1482:kantan.csv.CellDecoder[A4],implicitevidence$1483:kantan.csv.CellEncoder[A5],implicitevidence$1484:kantan.csv.CellDecoder[A5],implicitevidence$1485:kantan.csv.CellEncoder[A6],implicitevidence$1486:kantan.csv.CellDecoder[A6],implicitevidence$1487:kantan.csv.CellEncoder[A7],implicitevidence$1488:kantan.csv.CellDecoder[A7],implicitevidence$1489:kantan.csv.CellEncoder[A8],implicitevidence$1490:kantan.csv.CellDecoder[A8],implicitevidence$1491:kantan.csv.CellEncoder[A9],implicitevidence$1492:kantan.csv.CellDecoder[A9],implicitevidence$1493:kantan.csv.CellEncoder[A10],implicitevidence$1494:kantan.csv.CellDecoder[A10],implicitevidence$1495:kantan.csv.CellEncoder[A11],implicitevidence$1496:kantan.csv.CellDecoder[A11],implicitevidence$1497:kantan.csv.CellEncoder[A12],implicitevidence$1498:kantan.csv.CellDecoder[A12],implicitevidence$1499:kantan.csv.CellEncoder[A13],implicitevidence$1500:kantan.csv.CellDecoder[A13],implicitevidence$1501:kantan.csv.CellEncoder[A14],implicitevidence$1502:kantan.csv.CellDecoder[A14],implicitevidence$1503:kantan.csv.CellEncoder[A15],implicitevidence$1504:kantan.csv.CellDecoder[A15],implicitevidence$1505:kantan.csv.CellEncoder[A16],implicitevidence$1506:kantan.csv.CellDecoder[A16],implicitevidence$1507:kantan.csv.CellEncoder[A17],implicitevidence$1508:kantan.csv.CellDecoder[A17],implicitevidence$1509:kantan.csv.CellEncoder[A18],implicitevidence$1510:kantan.csv.CellDecoder[A18],implicitevidence$1511:kantan.csv.CellEncoder[A19],implicitevidence$1512:kantan.csv.CellDecoder[A19],implicitevidence$1513:kantan.csv.CellEncoder[A20],implicitevidence$1514:kantan.csv.CellDecoder[A20],implicitevidence$1515:kantan.csv.CellEncoder[A21],implicitevidence$1516:kantan.csv.CellDecoder[A21],implicitevidence$1517:kantan.csv.CellEncoder[A22],implicitevidence$1518:kantan.csv.CellDecoder[A22]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$1433:kantan.csv.CellEncoder[A1],implicitevidence$1434:kantan.csv.CellDecoder[A1],implicitevidence$1435:kantan.csv.CellEncoder[A2],implicitevidence$1436:kantan.csv.CellDecoder[A2],implicitevidence$1437:kantan.csv.CellEncoder[A3],implicitevidence$1438:kantan.csv.CellDecoder[A3],implicitevidence$1439:kantan.csv.CellEncoder[A4],implicitevidence$1440:kantan.csv.CellDecoder[A4],implicitevidence$1441:kantan.csv.CellEncoder[A5],implicitevidence$1442:kantan.csv.CellDecoder[A5],implicitevidence$1443:kantan.csv.CellEncoder[A6],implicitevidence$1444:kantan.csv.CellDecoder[A6],implicitevidence$1445:kantan.csv.CellEncoder[A7],implicitevidence$1446:kantan.csv.CellDecoder[A7],implicitevidence$1447:kantan.csv.CellEncoder[A8],implicitevidence$1448:kantan.csv.CellDecoder[A8],implicitevidence$1449:kantan.csv.CellEncoder[A9],implicitevidence$1450:kantan.csv.CellDecoder[A9],implicitevidence$1451:kantan.csv.CellEncoder[A10],implicitevidence$1452:kantan.csv.CellDecoder[A10],implicitevidence$1453:kantan.csv.CellEncoder[A11],implicitevidence$1454:kantan.csv.CellDecoder[A11],implicitevidence$1455:kantan.csv.CellEncoder[A12],implicitevidence$1456:kantan.csv.CellDecoder[A12],implicitevidence$1457:kantan.csv.CellEncoder[A13],implicitevidence$1458:kantan.csv.CellDecoder[A13],implicitevidence$1459:kantan.csv.CellEncoder[A14],implicitevidence$1460:kantan.csv.CellDecoder[A14],implicitevidence$1461:kantan.csv.CellEncoder[A15],implicitevidence$1462:kantan.csv.CellDecoder[A15],implicitevidence$1463:kantan.csv.CellEncoder[A16],implicitevidence$1464:kantan.csv.CellDecoder[A16],implicitevidence$1465:kantan.csv.CellEncoder[A17],implicitevidence$1466:kantan.csv.CellDecoder[A17],implicitevidence$1467:kantan.csv.CellEncoder[A18],implicitevidence$1468:kantan.csv.CellDecoder[A18],implicitevidence$1469:kantan.csv.CellEncoder[A19],implicitevidence$1470:kantan.csv.CellDecoder[A19],implicitevidence$1471:kantan.csv.CellEncoder[A20],implicitevidence$1472:kantan.csv.CellDecoder[A20],implicitevidence$1473:kantan.csv.CellEncoder[A21],implicitevidence$1474:kantan.csv.CellDecoder[A21]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$1393:kantan.csv.CellEncoder[A1],implicitevidence$1394:kantan.csv.CellDecoder[A1],implicitevidence$1395:kantan.csv.CellEncoder[A2],implicitevidence$1396:kantan.csv.CellDecoder[A2],implicitevidence$1397:kantan.csv.CellEncoder[A3],implicitevidence$1398:kantan.csv.CellDecoder[A3],implicitevidence$1399:kantan.csv.CellEncoder[A4],implicitevidence$1400:kantan.csv.CellDecoder[A4],implicitevidence$1401:kantan.csv.CellEncoder[A5],implicitevidence$1402:kantan.csv.CellDecoder[A5],implicitevidence$1403:kantan.csv.CellEncoder[A6],implicitevidence$1404:kantan.csv.CellDecoder[A6],implicitevidence$1405:kantan.csv.CellEncoder[A7],implicitevidence$1406:kantan.csv.CellDecoder[A7],implicitevidence$1407:kantan.csv.CellEncoder[A8],implicitevidence$1408:kantan.csv.CellDecoder[A8],implicitevidence$1409:kantan.csv.CellEncoder[A9],implicitevidence$1410:kantan.csv.CellDecoder[A9],implicitevidence$1411:kantan.csv.CellEncoder[A10],implicitevidence$1412:kantan.csv.CellDecoder[A10],implicitevidence$1413:kantan.csv.CellEncoder[A11],implicitevidence$1414:kantan.csv.CellDecoder[A11],implicitevidence$1415:kantan.csv.CellEncoder[A12],implicitevidence$1416:kantan.csv.CellDecoder[A12],implicitevidence$1417:kantan.csv.CellEncoder[A13],implicitevidence$1418:kantan.csv.CellDecoder[A13],implicitevidence$1419:kantan.csv.CellEncoder[A14],implicitevidence$1420:kantan.csv.CellDecoder[A14],implicitevidence$1421:kantan.csv.CellEncoder[A15],implicitevidence$1422:kantan.csv.CellDecoder[A15],implicitevidence$1423:kantan.csv.CellEncoder[A16],implicitevidence$1424:kantan.csv.CellDecoder[A16],implicitevidence$1425:kantan.csv.CellEncoder[A17],implicitevidence$1426:kantan.csv.CellDecoder[A17],implicitevidence$1427:kantan.csv.CellEncoder[A18],implicitevidence$1428:kantan.csv.CellDecoder[A18],implicitevidence$1429:kantan.csv.CellEncoder[A19],implicitevidence$1430:kantan.csv.CellDecoder[A19],implicitevidence$1431:kantan.csv.CellEncoder[A20],implicitevidence$1432:kantan.csv.CellDecoder[A20]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$1355:kantan.csv.CellEncoder[A1],implicitevidence$1356:kantan.csv.CellDecoder[A1],implicitevidence$1357:kantan.csv.CellEncoder[A2],implicitevidence$1358:kantan.csv.CellDecoder[A2],implicitevidence$1359:kantan.csv.CellEncoder[A3],implicitevidence$1360:kantan.csv.CellDecoder[A3],implicitevidence$1361:kantan.csv.CellEncoder[A4],implicitevidence$1362:kantan.csv.CellDecoder[A4],implicitevidence$1363:kantan.csv.CellEncoder[A5],implicitevidence$1364:kantan.csv.CellDecoder[A5],implicitevidence$1365:kantan.csv.CellEncoder[A6],implicitevidence$1366:kantan.csv.CellDecoder[A6],implicitevidence$1367:kantan.csv.CellEncoder[A7],implicitevidence$1368:kantan.csv.CellDecoder[A7],implicitevidence$1369:kantan.csv.CellEncoder[A8],implicitevidence$1370:kantan.csv.CellDecoder[A8],implicitevidence$1371:kantan.csv.CellEncoder[A9],implicitevidence$1372:kantan.csv.CellDecoder[A9],implicitevidence$1373:kantan.csv.CellEncoder[A10],implicitevidence$1374:kantan.csv.CellDecoder[A10],implicitevidence$1375:kantan.csv.CellEncoder[A11],implicitevidence$1376:kantan.csv.CellDecoder[A11],implicitevidence$1377:kantan.csv.CellEncoder[A12],implicitevidence$1378:kantan.csv.CellDecoder[A12],implicitevidence$1379:kantan.csv.CellEncoder[A13],implicitevidence$1380:kantan.csv.CellDecoder[A13],implicitevidence$1381:kantan.csv.CellEncoder[A14],implicitevidence$1382:kantan.csv.CellDecoder[A14],implicitevidence$1383:kantan.csv.CellEncoder[A15],implicitevidence$1384:kantan.csv.CellDecoder[A15],implicitevidence$1385:kantan.csv.CellEncoder[A16],implicitevidence$1386:kantan.csv.CellDecoder[A16],implicitevidence$1387:kantan.csv.CellEncoder[A17],implicitevidence$1388:kantan.csv.CellDecoder[A17],implicitevidence$1389:kantan.csv.CellEncoder[A18],implicitevidence$1390:kantan.csv.CellDecoder[A18],implicitevidence$1391:kantan.csv.CellEncoder[A19],implicitevidence$1392:kantan.csv.CellDecoder[A19]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$1319:kantan.csv.CellEncoder[A1],implicitevidence$1320:kantan.csv.CellDecoder[A1],implicitevidence$1321:kantan.csv.CellEncoder[A2],implicitevidence$1322:kantan.csv.CellDecoder[A2],implicitevidence$1323:kantan.csv.CellEncoder[A3],implicitevidence$1324:kantan.csv.CellDecoder[A3],implicitevidence$1325:kantan.csv.CellEncoder[A4],implicitevidence$1326:kantan.csv.CellDecoder[A4],implicitevidence$1327:kantan.csv.CellEncoder[A5],implicitevidence$1328:kantan.csv.CellDecoder[A5],implicitevidence$1329:kantan.csv.CellEncoder[A6],implicitevidence$1330:kantan.csv.CellDecoder[A6],implicitevidence$1331:kantan.csv.CellEncoder[A7],implicitevidence$1332:kantan.csv.CellDecoder[A7],implicitevidence$1333:kantan.csv.CellEncoder[A8],implicitevidence$1334:kantan.csv.CellDecoder[A8],implicitevidence$1335:kantan.csv.CellEncoder[A9],implicitevidence$1336:kantan.csv.CellDecoder[A9],implicitevidence$1337:kantan.csv.CellEncoder[A10],implicitevidence$1338:kantan.csv.CellDecoder[A10],implicitevidence$1339:kantan.csv.CellEncoder[A11],implicitevidence$1340:kantan.csv.CellDecoder[A11],implicitevidence$1341:kantan.csv.CellEncoder[A12],implicitevidence$1342:kantan.csv.CellDecoder[A12],implicitevidence$1343:kantan.csv.CellEncoder[A13],implicitevidence$1344:kantan.csv.CellDecoder[A13],implicitevidence$1345:kantan.csv.CellEncoder[A14],implicitevidence$1346:kantan.csv.CellDecoder[A14],implicitevidence$1347:kantan.csv.CellEncoder[A15],implicitevidence$1348:kantan.csv.CellDecoder[A15],implicitevidence$1349:kantan.csv.CellEncoder[A16],implicitevidence$1350:kantan.csv.CellDecoder[A16],implicitevidence$1351:kantan.csv.CellEncoder[A17],implicitevidence$1352:kantan.csv.CellDecoder[A17],implicitevidence$1353:kantan.csv.CellEncoder[A18],implicitevidence$1354:kantan.csv.CellDecoder[A18]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$1285:kantan.csv.CellEncoder[A1],implicitevidence$1286:kantan.csv.CellDecoder[A1],implicitevidence$1287:kantan.csv.CellEncoder[A2],implicitevidence$1288:kantan.csv.CellDecoder[A2],implicitevidence$1289:kantan.csv.CellEncoder[A3],implicitevidence$1290:kantan.csv.CellDecoder[A3],implicitevidence$1291:kantan.csv.CellEncoder[A4],implicitevidence$1292:kantan.csv.CellDecoder[A4],implicitevidence$1293:kantan.csv.CellEncoder[A5],implicitevidence$1294:kantan.csv.CellDecoder[A5],implicitevidence$1295:kantan.csv.CellEncoder[A6],implicitevidence$1296:kantan.csv.CellDecoder[A6],implicitevidence$1297:kantan.csv.CellEncoder[A7],implicitevidence$1298:kantan.csv.CellDecoder[A7],implicitevidence$1299:kantan.csv.CellEncoder[A8],implicitevidence$1300:kantan.csv.CellDecoder[A8],implicitevidence$1301:kantan.csv.CellEncoder[A9],implicitevidence$1302:kantan.csv.CellDecoder[A9],implicitevidence$1303:kantan.csv.CellEncoder[A10],implicitevidence$1304:kantan.csv.CellDecoder[A10],implicitevidence$1305:kantan.csv.CellEncoder[A11],implicitevidence$1306:kantan.csv.CellDecoder[A11],implicitevidence$1307:kantan.csv.CellEncoder[A12],implicitevidence$1308:kantan.csv.CellDecoder[A12],implicitevidence$1309:kantan.csv.CellEncoder[A13],implicitevidence$1310:kantan.csv.CellDecoder[A13],implicitevidence$1311:kantan.csv.CellEncoder[A14],implicitevidence$1312:kantan.csv.CellDecoder[A14],implicitevidence$1313:kantan.csv.CellEncoder[A15],implicitevidence$1314:kantan.csv.CellDecoder[A15],implicitevidence$1315:kantan.csv.CellEncoder[A16],implicitevidence$1316:kantan.csv.CellDecoder[A16],implicitevidence$1317:kantan.csv.CellEncoder[A17],implicitevidence$1318:kantan.csv.CellDecoder[A17]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$1253:kantan.csv.CellEncoder[A1],implicitevidence$1254:kantan.csv.CellDecoder[A1],implicitevidence$1255:kantan.csv.CellEncoder[A2],implicitevidence$1256:kantan.csv.CellDecoder[A2],implicitevidence$1257:kantan.csv.CellEncoder[A3],implicitevidence$1258:kantan.csv.CellDecoder[A3],implicitevidence$1259:kantan.csv.CellEncoder[A4],implicitevidence$1260:kantan.csv.CellDecoder[A4],implicitevidence$1261:kantan.csv.CellEncoder[A5],implicitevidence$1262:kantan.csv.CellDecoder[A5],implicitevidence$1263:kantan.csv.CellEncoder[A6],implicitevidence$1264:kantan.csv.CellDecoder[A6],implicitevidence$1265:kantan.csv.CellEncoder[A7],implicitevidence$1266:kantan.csv.CellDecoder[A7],implicitevidence$1267:kantan.csv.CellEncoder[A8],implicitevidence$1268:kantan.csv.CellDecoder[A8],implicitevidence$1269:kantan.csv.CellEncoder[A9],implicitevidence$1270:kantan.csv.CellDecoder[A9],implicitevidence$1271:kantan.csv.CellEncoder[A10],implicitevidence$1272:kantan.csv.CellDecoder[A10],implicitevidence$1273:kantan.csv.CellEncoder[A11],implicitevidence$1274:kantan.csv.CellDecoder[A11],implicitevidence$1275:kantan.csv.CellEncoder[A12],implicitevidence$1276:kantan.csv.CellDecoder[A12],implicitevidence$1277:kantan.csv.CellEncoder[A13],implicitevidence$1278:kantan.csv.CellDecoder[A13],implicitevidence$1279:kantan.csv.CellEncoder[A14],implicitevidence$1280:kantan.csv.CellDecoder[A14],implicitevidence$1281:kantan.csv.CellEncoder[A15],implicitevidence$1282:kantan.csv.CellDecoder[A15],implicitevidence$1283:kantan.csv.CellEncoder[A16],implicitevidence$1284:kantan.csv.CellDecoder[A16]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$1223:kantan.csv.CellEncoder[A1],implicitevidence$1224:kantan.csv.CellDecoder[A1],implicitevidence$1225:kantan.csv.CellEncoder[A2],implicitevidence$1226:kantan.csv.CellDecoder[A2],implicitevidence$1227:kantan.csv.CellEncoder[A3],implicitevidence$1228:kantan.csv.CellDecoder[A3],implicitevidence$1229:kantan.csv.CellEncoder[A4],implicitevidence$1230:kantan.csv.CellDecoder[A4],implicitevidence$1231:kantan.csv.CellEncoder[A5],implicitevidence$1232:kantan.csv.CellDecoder[A5],implicitevidence$1233:kantan.csv.CellEncoder[A6],implicitevidence$1234:kantan.csv.CellDecoder[A6],implicitevidence$1235:kantan.csv.CellEncoder[A7],implicitevidence$1236:kantan.csv.CellDecoder[A7],implicitevidence$1237:kantan.csv.CellEncoder[A8],implicitevidence$1238:kantan.csv.CellDecoder[A8],implicitevidence$1239:kantan.csv.CellEncoder[A9],implicitevidence$1240:kantan.csv.CellDecoder[A9],implicitevidence$1241:kantan.csv.CellEncoder[A10],implicitevidence$1242:kantan.csv.CellDecoder[A10],implicitevidence$1243:kantan.csv.CellEncoder[A11],implicitevidence$1244:kantan.csv.CellDecoder[A11],implicitevidence$1245:kantan.csv.CellEncoder[A12],implicitevidence$1246:kantan.csv.CellDecoder[A12],implicitevidence$1247:kantan.csv.CellEncoder[A13],implicitevidence$1248:kantan.csv.CellDecoder[A13],implicitevidence$1249:kantan.csv.CellEncoder[A14],implicitevidence$1250:kantan.csv.CellDecoder[A14],implicitevidence$1251:kantan.csv.CellEncoder[A15],implicitevidence$1252:kantan.csv.CellDecoder[A15]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$1195:kantan.csv.CellEncoder[A1],implicitevidence$1196:kantan.csv.CellDecoder[A1],implicitevidence$1197:kantan.csv.CellEncoder[A2],implicitevidence$1198:kantan.csv.CellDecoder[A2],implicitevidence$1199:kantan.csv.CellEncoder[A3],implicitevidence$1200:kantan.csv.CellDecoder[A3],implicitevidence$1201:kantan.csv.CellEncoder[A4],implicitevidence$1202:kantan.csv.CellDecoder[A4],implicitevidence$1203:kantan.csv.CellEncoder[A5],implicitevidence$1204:kantan.csv.CellDecoder[A5],implicitevidence$1205:kantan.csv.CellEncoder[A6],implicitevidence$1206:kantan.csv.CellDecoder[A6],implicitevidence$1207:kantan.csv.CellEncoder[A7],implicitevidence$1208:kantan.csv.CellDecoder[A7],implicitevidence$1209:kantan.csv.CellEncoder[A8],implicitevidence$1210:kantan.csv.CellDecoder[A8],implicitevidence$1211:kantan.csv.CellEncoder[A9],implicitevidence$1212:kantan.csv.CellDecoder[A9],implicitevidence$1213:kantan.csv.CellEncoder[A10],implicitevidence$1214:kantan.csv.CellDecoder[A10],implicitevidence$1215:kantan.csv.CellEncoder[A11],implicitevidence$1216:kantan.csv.CellDecoder[A11],implicitevidence$1217:kantan.csv.CellEncoder[A12],implicitevidence$1218:kantan.csv.CellDecoder[A12],implicitevidence$1219:kantan.csv.CellEncoder[A13],implicitevidence$1220:kantan.csv.CellDecoder[A13],implicitevidence$1221:kantan.csv.CellEncoder[A14],implicitevidence$1222:kantan.csv.CellDecoder[A14]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$1169:kantan.csv.CellEncoder[A1],implicitevidence$1170:kantan.csv.CellDecoder[A1],implicitevidence$1171:kantan.csv.CellEncoder[A2],implicitevidence$1172:kantan.csv.CellDecoder[A2],implicitevidence$1173:kantan.csv.CellEncoder[A3],implicitevidence$1174:kantan.csv.CellDecoder[A3],implicitevidence$1175:kantan.csv.CellEncoder[A4],implicitevidence$1176:kantan.csv.CellDecoder[A4],implicitevidence$1177:kantan.csv.CellEncoder[A5],implicitevidence$1178:kantan.csv.CellDecoder[A5],implicitevidence$1179:kantan.csv.CellEncoder[A6],implicitevidence$1180:kantan.csv.CellDecoder[A6],implicitevidence$1181:kantan.csv.CellEncoder[A7],implicitevidence$1182:kantan.csv.CellDecoder[A7],implicitevidence$1183:kantan.csv.CellEncoder[A8],implicitevidence$1184:kantan.csv.CellDecoder[A8],implicitevidence$1185:kantan.csv.CellEncoder[A9],implicitevidence$1186:kantan.csv.CellDecoder[A9],implicitevidence$1187:kantan.csv.CellEncoder[A10],implicitevidence$1188:kantan.csv.CellDecoder[A10],implicitevidence$1189:kantan.csv.CellEncoder[A11],implicitevidence$1190:kantan.csv.CellDecoder[A11],implicitevidence$1191:kantan.csv.CellEncoder[A12],implicitevidence$1192:kantan.csv.CellDecoder[A12],implicitevidence$1193:kantan.csv.CellEncoder[A13],implicitevidence$1194:kantan.csv.CellDecoder[A13]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$1145:kantan.csv.CellEncoder[A1],implicitevidence$1146:kantan.csv.CellDecoder[A1],implicitevidence$1147:kantan.csv.CellEncoder[A2],implicitevidence$1148:kantan.csv.CellDecoder[A2],implicitevidence$1149:kantan.csv.CellEncoder[A3],implicitevidence$1150:kantan.csv.CellDecoder[A3],implicitevidence$1151:kantan.csv.CellEncoder[A4],implicitevidence$1152:kantan.csv.CellDecoder[A4],implicitevidence$1153:kantan.csv.CellEncoder[A5],implicitevidence$1154:kantan.csv.CellDecoder[A5],implicitevidence$1155:kantan.csv.CellEncoder[A6],implicitevidence$1156:kantan.csv.CellDecoder[A6],implicitevidence$1157:kantan.csv.CellEncoder[A7],implicitevidence$1158:kantan.csv.CellDecoder[A7],implicitevidence$1159:kantan.csv.CellEncoder[A8],implicitevidence$1160:kantan.csv.CellDecoder[A8],implicitevidence$1161:kantan.csv.CellEncoder[A9],implicitevidence$1162:kantan.csv.CellDecoder[A9],implicitevidence$1163:kantan.csv.CellEncoder[A10],implicitevidence$1164:kantan.csv.CellDecoder[A10],implicitevidence$1165:kantan.csv.CellEncoder[A11],implicitevidence$1166:kantan.csv.CellDecoder[A11],implicitevidence$1167:kantan.csv.CellEncoder[A12],implicitevidence$1168:kantan.csv.CellDecoder[A12]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$1123:kantan.csv.CellEncoder[A1],implicitevidence$1124:kantan.csv.CellDecoder[A1],implicitevidence$1125:kantan.csv.CellEncoder[A2],implicitevidence$1126:kantan.csv.CellDecoder[A2],implicitevidence$1127:kantan.csv.CellEncoder[A3],implicitevidence$1128:kantan.csv.CellDecoder[A3],implicitevidence$1129:kantan.csv.CellEncoder[A4],implicitevidence$1130:kantan.csv.CellDecoder[A4],implicitevidence$1131:kantan.csv.CellEncoder[A5],implicitevidence$1132:kantan.csv.CellDecoder[A5],implicitevidence$1133:kantan.csv.CellEncoder[A6],implicitevidence$1134:kantan.csv.CellDecoder[A6],implicitevidence$1135:kantan.csv.CellEncoder[A7],implicitevidence$1136:kantan.csv.CellDecoder[A7],implicitevidence$1137:kantan.csv.CellEncoder[A8],implicitevidence$1138:kantan.csv.CellDecoder[A8],implicitevidence$1139:kantan.csv.CellEncoder[A9],implicitevidence$1140:kantan.csv.CellDecoder[A9],implicitevidence$1141:kantan.csv.CellEncoder[A10],implicitevidence$1142:kantan.csv.CellDecoder[A10],implicitevidence$1143:kantan.csv.CellEncoder[A11],implicitevidence$1144:kantan.csv.CellDecoder[A11]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$1103:kantan.csv.CellEncoder[A1],implicitevidence$1104:kantan.csv.CellDecoder[A1],implicitevidence$1105:kantan.csv.CellEncoder[A2],implicitevidence$1106:kantan.csv.CellDecoder[A2],implicitevidence$1107:kantan.csv.CellEncoder[A3],implicitevidence$1108:kantan.csv.CellDecoder[A3],implicitevidence$1109:kantan.csv.CellEncoder[A4],implicitevidence$1110:kantan.csv.CellDecoder[A4],implicitevidence$1111:kantan.csv.CellEncoder[A5],implicitevidence$1112:kantan.csv.CellDecoder[A5],implicitevidence$1113:kantan.csv.CellEncoder[A6],implicitevidence$1114:kantan.csv.CellDecoder[A6],implicitevidence$1115:kantan.csv.CellEncoder[A7],implicitevidence$1116:kantan.csv.CellDecoder[A7],implicitevidence$1117:kantan.csv.CellEncoder[A8],implicitevidence$1118:kantan.csv.CellDecoder[A8],implicitevidence$1119:kantan.csv.CellEncoder[A9],implicitevidence$1120:kantan.csv.CellDecoder[A9],implicitevidence$1121:kantan.csv.CellEncoder[A10],implicitevidence$1122:kantan.csv.CellDecoder[A10]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$1085:kantan.csv.CellEncoder[A1],implicitevidence$1086:kantan.csv.CellDecoder[A1],implicitevidence$1087:kantan.csv.CellEncoder[A2],implicitevidence$1088:kantan.csv.CellDecoder[A2],implicitevidence$1089:kantan.csv.CellEncoder[A3],implicitevidence$1090:kantan.csv.CellDecoder[A3],implicitevidence$1091:kantan.csv.CellEncoder[A4],implicitevidence$1092:kantan.csv.CellDecoder[A4],implicitevidence$1093:kantan.csv.CellEncoder[A5],implicitevidence$1094:kantan.csv.CellDecoder[A5],implicitevidence$1095:kantan.csv.CellEncoder[A6],implicitevidence$1096:kantan.csv.CellDecoder[A6],implicitevidence$1097:kantan.csv.CellEncoder[A7],implicitevidence$1098:kantan.csv.CellDecoder[A7],implicitevidence$1099:kantan.csv.CellEncoder[A8],implicitevidence$1100:kantan.csv.CellDecoder[A8],implicitevidence$1101:kantan.csv.CellEncoder[A9],implicitevidence$1102:kantan.csv.CellDecoder[A9]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$1069:kantan.csv.CellEncoder[A1],implicitevidence$1070:kantan.csv.CellDecoder[A1],implicitevidence$1071:kantan.csv.CellEncoder[A2],implicitevidence$1072:kantan.csv.CellDecoder[A2],implicitevidence$1073:kantan.csv.CellEncoder[A3],implicitevidence$1074:kantan.csv.CellDecoder[A3],implicitevidence$1075:kantan.csv.CellEncoder[A4],implicitevidence$1076:kantan.csv.CellDecoder[A4],implicitevidence$1077:kantan.csv.CellEncoder[A5],implicitevidence$1078:kantan.csv.CellDecoder[A5],implicitevidence$1079:kantan.csv.CellEncoder[A6],implicitevidence$1080:kantan.csv.CellDecoder[A6],implicitevidence$1081:kantan.csv.CellEncoder[A7],implicitevidence$1082:kantan.csv.CellDecoder[A7],implicitevidence$1083:kantan.csv.CellEncoder[A8],implicitevidence$1084:kantan.csv.CellDecoder[A8]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$1055:kantan.csv.CellEncoder[A1],implicitevidence$1056:kantan.csv.CellDecoder[A1],implicitevidence$1057:kantan.csv.CellEncoder[A2],implicitevidence$1058:kantan.csv.CellDecoder[A2],implicitevidence$1059:kantan.csv.CellEncoder[A3],implicitevidence$1060:kantan.csv.CellDecoder[A3],implicitevidence$1061:kantan.csv.CellEncoder[A4],implicitevidence$1062:kantan.csv.CellDecoder[A4],implicitevidence$1063:kantan.csv.CellEncoder[A5],implicitevidence$1064:kantan.csv.CellDecoder[A5],implicitevidence$1065:kantan.csv.CellEncoder[A6],implicitevidence$1066:kantan.csv.CellDecoder[A6],implicitevidence$1067:kantan.csv.CellEncoder[A7],implicitevidence$1068:kantan.csv.CellDecoder[A7]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$1043:kantan.csv.CellEncoder[A1],implicitevidence$1044:kantan.csv.CellDecoder[A1],implicitevidence$1045:kantan.csv.CellEncoder[A2],implicitevidence$1046:kantan.csv.CellDecoder[A2],implicitevidence$1047:kantan.csv.CellEncoder[A3],implicitevidence$1048:kantan.csv.CellDecoder[A3],implicitevidence$1049:kantan.csv.CellEncoder[A4],implicitevidence$1050:kantan.csv.CellDecoder[A4],implicitevidence$1051:kantan.csv.CellEncoder[A5],implicitevidence$1052:kantan.csv.CellDecoder[A5],implicitevidence$1053:kantan.csv.CellEncoder[A6],implicitevidence$1054:kantan.csv.CellDecoder[A6]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (A1, A2, A3, A4, A5) => C)(g: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:(A1,A2,A3,A4,A5)=>C)(g:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$1033:kantan.csv.CellEncoder[A1],implicitevidence$1034:kantan.csv.CellDecoder[A1],implicitevidence$1035:kantan.csv.CellEncoder[A2],implicitevidence$1036:kantan.csv.CellDecoder[A2],implicitevidence$1037:kantan.csv.CellEncoder[A3],implicitevidence$1038:kantan.csv.CellDecoder[A3],implicitevidence$1039:kantan.csv.CellEncoder[A4],implicitevidence$1040:kantan.csv.CellDecoder[A4],implicitevidence$1041:kantan.csv.CellEncoder[A5],implicitevidence$1042:kantan.csv.CellDecoder[A5]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (A1, A2, A3, A4) => C)(g: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(f:(A1,A2,A3,A4)=>C)(g:C=>Option[(A1,A2,A3,A4)])(implicitevidence$1025:kantan.csv.CellEncoder[A1],implicitevidence$1026:kantan.csv.CellDecoder[A1],implicitevidence$1027:kantan.csv.CellEncoder[A2],implicitevidence$1028:kantan.csv.CellDecoder[A2],implicitevidence$1029:kantan.csv.CellEncoder[A3],implicitevidence$1030:kantan.csv.CellDecoder[A3],implicitevidence$1031:kantan.csv.CellEncoder[A4],implicitevidence$1032:kantan.csv.CellDecoder[A4]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (A1, A2, A3) => C)(g: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2,A3](i1:Int,i2:Int,i3:Int)(f:(A1,A2,A3)=>C)(g:C=>Option[(A1,A2,A3)])(implicitevidence$1019:kantan.csv.CellEncoder[A1],implicitevidence$1020:kantan.csv.CellDecoder[A1],implicitevidence$1021:kantan.csv.CellEncoder[A2],implicitevidence$1022:kantan.csv.CellDecoder[A2],implicitevidence$1023:kantan.csv.CellEncoder[A3],implicitevidence$1024:kantan.csv.CellDecoder[A3]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(i1: Int, i2: Int)(f: (A1, A2) => C)(g: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1,A2](i1:Int,i2:Int)(f:(A1,A2)=>C)(g:C=>Option[(A1,A2)])(implicitevidence$1015:kantan.csv.CellEncoder[A1],implicitevidence$1016:kantan.csv.CellDecoder[A1],implicitevidence$1017:kantan.csv.CellEncoder[A2],implicitevidence$1018:kantan.csv.CellDecoder[A2]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(f: (A1) => C)(g: (C) => Option[A1])(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.caseCodec", "link" : "kantan\/csv\/RowCodec$.html#caseCodec[C,A1](f:A1=>C)(g:C=>Option[A1])(implicitevidence$1013:kantan.csv.CellEncoder[A1],implicitevidence$1014:kantan.csv.CellDecoder[A1]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$969:kantan.csv.CellEncoder[A1],implicitevidence$970:kantan.csv.CellDecoder[A1],implicitevidence$971:kantan.csv.CellEncoder[A2],implicitevidence$972:kantan.csv.CellDecoder[A2],implicitevidence$973:kantan.csv.CellEncoder[A3],implicitevidence$974:kantan.csv.CellDecoder[A3],implicitevidence$975:kantan.csv.CellEncoder[A4],implicitevidence$976:kantan.csv.CellDecoder[A4],implicitevidence$977:kantan.csv.CellEncoder[A5],implicitevidence$978:kantan.csv.CellDecoder[A5],implicitevidence$979:kantan.csv.CellEncoder[A6],implicitevidence$980:kantan.csv.CellDecoder[A6],implicitevidence$981:kantan.csv.CellEncoder[A7],implicitevidence$982:kantan.csv.CellDecoder[A7],implicitevidence$983:kantan.csv.CellEncoder[A8],implicitevidence$984:kantan.csv.CellDecoder[A8],implicitevidence$985:kantan.csv.CellEncoder[A9],implicitevidence$986:kantan.csv.CellDecoder[A9],implicitevidence$987:kantan.csv.CellEncoder[A10],implicitevidence$988:kantan.csv.CellDecoder[A10],implicitevidence$989:kantan.csv.CellEncoder[A11],implicitevidence$990:kantan.csv.CellDecoder[A11],implicitevidence$991:kantan.csv.CellEncoder[A12],implicitevidence$992:kantan.csv.CellDecoder[A12],implicitevidence$993:kantan.csv.CellEncoder[A13],implicitevidence$994:kantan.csv.CellDecoder[A13],implicitevidence$995:kantan.csv.CellEncoder[A14],implicitevidence$996:kantan.csv.CellDecoder[A14],implicitevidence$997:kantan.csv.CellEncoder[A15],implicitevidence$998:kantan.csv.CellDecoder[A15],implicitevidence$999:kantan.csv.CellEncoder[A16],implicitevidence$1000:kantan.csv.CellDecoder[A16],implicitevidence$1001:kantan.csv.CellEncoder[A17],implicitevidence$1002:kantan.csv.CellDecoder[A17],implicitevidence$1003:kantan.csv.CellEncoder[A18],implicitevidence$1004:kantan.csv.CellDecoder[A18],implicitevidence$1005:kantan.csv.CellEncoder[A19],implicitevidence$1006:kantan.csv.CellDecoder[A19],implicitevidence$1007:kantan.csv.CellEncoder[A20],implicitevidence$1008:kantan.csv.CellDecoder[A20],implicitevidence$1009:kantan.csv.CellEncoder[A21],implicitevidence$1010:kantan.csv.CellDecoder[A21],implicitevidence$1011:kantan.csv.CellEncoder[A22],implicitevidence$1012:kantan.csv.CellDecoder[A22]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$927:kantan.csv.CellEncoder[A1],implicitevidence$928:kantan.csv.CellDecoder[A1],implicitevidence$929:kantan.csv.CellEncoder[A2],implicitevidence$930:kantan.csv.CellDecoder[A2],implicitevidence$931:kantan.csv.CellEncoder[A3],implicitevidence$932:kantan.csv.CellDecoder[A3],implicitevidence$933:kantan.csv.CellEncoder[A4],implicitevidence$934:kantan.csv.CellDecoder[A4],implicitevidence$935:kantan.csv.CellEncoder[A5],implicitevidence$936:kantan.csv.CellDecoder[A5],implicitevidence$937:kantan.csv.CellEncoder[A6],implicitevidence$938:kantan.csv.CellDecoder[A6],implicitevidence$939:kantan.csv.CellEncoder[A7],implicitevidence$940:kantan.csv.CellDecoder[A7],implicitevidence$941:kantan.csv.CellEncoder[A8],implicitevidence$942:kantan.csv.CellDecoder[A8],implicitevidence$943:kantan.csv.CellEncoder[A9],implicitevidence$944:kantan.csv.CellDecoder[A9],implicitevidence$945:kantan.csv.CellEncoder[A10],implicitevidence$946:kantan.csv.CellDecoder[A10],implicitevidence$947:kantan.csv.CellEncoder[A11],implicitevidence$948:kantan.csv.CellDecoder[A11],implicitevidence$949:kantan.csv.CellEncoder[A12],implicitevidence$950:kantan.csv.CellDecoder[A12],implicitevidence$951:kantan.csv.CellEncoder[A13],implicitevidence$952:kantan.csv.CellDecoder[A13],implicitevidence$953:kantan.csv.CellEncoder[A14],implicitevidence$954:kantan.csv.CellDecoder[A14],implicitevidence$955:kantan.csv.CellEncoder[A15],implicitevidence$956:kantan.csv.CellDecoder[A15],implicitevidence$957:kantan.csv.CellEncoder[A16],implicitevidence$958:kantan.csv.CellDecoder[A16],implicitevidence$959:kantan.csv.CellEncoder[A17],implicitevidence$960:kantan.csv.CellDecoder[A17],implicitevidence$961:kantan.csv.CellEncoder[A18],implicitevidence$962:kantan.csv.CellDecoder[A18],implicitevidence$963:kantan.csv.CellEncoder[A19],implicitevidence$964:kantan.csv.CellDecoder[A19],implicitevidence$965:kantan.csv.CellEncoder[A20],implicitevidence$966:kantan.csv.CellDecoder[A20],implicitevidence$967:kantan.csv.CellEncoder[A21],implicitevidence$968:kantan.csv.CellDecoder[A21]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$887:kantan.csv.CellEncoder[A1],implicitevidence$888:kantan.csv.CellDecoder[A1],implicitevidence$889:kantan.csv.CellEncoder[A2],implicitevidence$890:kantan.csv.CellDecoder[A2],implicitevidence$891:kantan.csv.CellEncoder[A3],implicitevidence$892:kantan.csv.CellDecoder[A3],implicitevidence$893:kantan.csv.CellEncoder[A4],implicitevidence$894:kantan.csv.CellDecoder[A4],implicitevidence$895:kantan.csv.CellEncoder[A5],implicitevidence$896:kantan.csv.CellDecoder[A5],implicitevidence$897:kantan.csv.CellEncoder[A6],implicitevidence$898:kantan.csv.CellDecoder[A6],implicitevidence$899:kantan.csv.CellEncoder[A7],implicitevidence$900:kantan.csv.CellDecoder[A7],implicitevidence$901:kantan.csv.CellEncoder[A8],implicitevidence$902:kantan.csv.CellDecoder[A8],implicitevidence$903:kantan.csv.CellEncoder[A9],implicitevidence$904:kantan.csv.CellDecoder[A9],implicitevidence$905:kantan.csv.CellEncoder[A10],implicitevidence$906:kantan.csv.CellDecoder[A10],implicitevidence$907:kantan.csv.CellEncoder[A11],implicitevidence$908:kantan.csv.CellDecoder[A11],implicitevidence$909:kantan.csv.CellEncoder[A12],implicitevidence$910:kantan.csv.CellDecoder[A12],implicitevidence$911:kantan.csv.CellEncoder[A13],implicitevidence$912:kantan.csv.CellDecoder[A13],implicitevidence$913:kantan.csv.CellEncoder[A14],implicitevidence$914:kantan.csv.CellDecoder[A14],implicitevidence$915:kantan.csv.CellEncoder[A15],implicitevidence$916:kantan.csv.CellDecoder[A15],implicitevidence$917:kantan.csv.CellEncoder[A16],implicitevidence$918:kantan.csv.CellDecoder[A16],implicitevidence$919:kantan.csv.CellEncoder[A17],implicitevidence$920:kantan.csv.CellDecoder[A17],implicitevidence$921:kantan.csv.CellEncoder[A18],implicitevidence$922:kantan.csv.CellDecoder[A18],implicitevidence$923:kantan.csv.CellEncoder[A19],implicitevidence$924:kantan.csv.CellDecoder[A19],implicitevidence$925:kantan.csv.CellEncoder[A20],implicitevidence$926:kantan.csv.CellDecoder[A20]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$849:kantan.csv.CellEncoder[A1],implicitevidence$850:kantan.csv.CellDecoder[A1],implicitevidence$851:kantan.csv.CellEncoder[A2],implicitevidence$852:kantan.csv.CellDecoder[A2],implicitevidence$853:kantan.csv.CellEncoder[A3],implicitevidence$854:kantan.csv.CellDecoder[A3],implicitevidence$855:kantan.csv.CellEncoder[A4],implicitevidence$856:kantan.csv.CellDecoder[A4],implicitevidence$857:kantan.csv.CellEncoder[A5],implicitevidence$858:kantan.csv.CellDecoder[A5],implicitevidence$859:kantan.csv.CellEncoder[A6],implicitevidence$860:kantan.csv.CellDecoder[A6],implicitevidence$861:kantan.csv.CellEncoder[A7],implicitevidence$862:kantan.csv.CellDecoder[A7],implicitevidence$863:kantan.csv.CellEncoder[A8],implicitevidence$864:kantan.csv.CellDecoder[A8],implicitevidence$865:kantan.csv.CellEncoder[A9],implicitevidence$866:kantan.csv.CellDecoder[A9],implicitevidence$867:kantan.csv.CellEncoder[A10],implicitevidence$868:kantan.csv.CellDecoder[A10],implicitevidence$869:kantan.csv.CellEncoder[A11],implicitevidence$870:kantan.csv.CellDecoder[A11],implicitevidence$871:kantan.csv.CellEncoder[A12],implicitevidence$872:kantan.csv.CellDecoder[A12],implicitevidence$873:kantan.csv.CellEncoder[A13],implicitevidence$874:kantan.csv.CellDecoder[A13],implicitevidence$875:kantan.csv.CellEncoder[A14],implicitevidence$876:kantan.csv.CellDecoder[A14],implicitevidence$877:kantan.csv.CellEncoder[A15],implicitevidence$878:kantan.csv.CellDecoder[A15],implicitevidence$879:kantan.csv.CellEncoder[A16],implicitevidence$880:kantan.csv.CellDecoder[A16],implicitevidence$881:kantan.csv.CellEncoder[A17],implicitevidence$882:kantan.csv.CellDecoder[A17],implicitevidence$883:kantan.csv.CellEncoder[A18],implicitevidence$884:kantan.csv.CellDecoder[A18],implicitevidence$885:kantan.csv.CellEncoder[A19],implicitevidence$886:kantan.csv.CellDecoder[A19]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$813:kantan.csv.CellEncoder[A1],implicitevidence$814:kantan.csv.CellDecoder[A1],implicitevidence$815:kantan.csv.CellEncoder[A2],implicitevidence$816:kantan.csv.CellDecoder[A2],implicitevidence$817:kantan.csv.CellEncoder[A3],implicitevidence$818:kantan.csv.CellDecoder[A3],implicitevidence$819:kantan.csv.CellEncoder[A4],implicitevidence$820:kantan.csv.CellDecoder[A4],implicitevidence$821:kantan.csv.CellEncoder[A5],implicitevidence$822:kantan.csv.CellDecoder[A5],implicitevidence$823:kantan.csv.CellEncoder[A6],implicitevidence$824:kantan.csv.CellDecoder[A6],implicitevidence$825:kantan.csv.CellEncoder[A7],implicitevidence$826:kantan.csv.CellDecoder[A7],implicitevidence$827:kantan.csv.CellEncoder[A8],implicitevidence$828:kantan.csv.CellDecoder[A8],implicitevidence$829:kantan.csv.CellEncoder[A9],implicitevidence$830:kantan.csv.CellDecoder[A9],implicitevidence$831:kantan.csv.CellEncoder[A10],implicitevidence$832:kantan.csv.CellDecoder[A10],implicitevidence$833:kantan.csv.CellEncoder[A11],implicitevidence$834:kantan.csv.CellDecoder[A11],implicitevidence$835:kantan.csv.CellEncoder[A12],implicitevidence$836:kantan.csv.CellDecoder[A12],implicitevidence$837:kantan.csv.CellEncoder[A13],implicitevidence$838:kantan.csv.CellDecoder[A13],implicitevidence$839:kantan.csv.CellEncoder[A14],implicitevidence$840:kantan.csv.CellDecoder[A14],implicitevidence$841:kantan.csv.CellEncoder[A15],implicitevidence$842:kantan.csv.CellDecoder[A15],implicitevidence$843:kantan.csv.CellEncoder[A16],implicitevidence$844:kantan.csv.CellDecoder[A16],implicitevidence$845:kantan.csv.CellEncoder[A17],implicitevidence$846:kantan.csv.CellDecoder[A17],implicitevidence$847:kantan.csv.CellEncoder[A18],implicitevidence$848:kantan.csv.CellDecoder[A18]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$779:kantan.csv.CellEncoder[A1],implicitevidence$780:kantan.csv.CellDecoder[A1],implicitevidence$781:kantan.csv.CellEncoder[A2],implicitevidence$782:kantan.csv.CellDecoder[A2],implicitevidence$783:kantan.csv.CellEncoder[A3],implicitevidence$784:kantan.csv.CellDecoder[A3],implicitevidence$785:kantan.csv.CellEncoder[A4],implicitevidence$786:kantan.csv.CellDecoder[A4],implicitevidence$787:kantan.csv.CellEncoder[A5],implicitevidence$788:kantan.csv.CellDecoder[A5],implicitevidence$789:kantan.csv.CellEncoder[A6],implicitevidence$790:kantan.csv.CellDecoder[A6],implicitevidence$791:kantan.csv.CellEncoder[A7],implicitevidence$792:kantan.csv.CellDecoder[A7],implicitevidence$793:kantan.csv.CellEncoder[A8],implicitevidence$794:kantan.csv.CellDecoder[A8],implicitevidence$795:kantan.csv.CellEncoder[A9],implicitevidence$796:kantan.csv.CellDecoder[A9],implicitevidence$797:kantan.csv.CellEncoder[A10],implicitevidence$798:kantan.csv.CellDecoder[A10],implicitevidence$799:kantan.csv.CellEncoder[A11],implicitevidence$800:kantan.csv.CellDecoder[A11],implicitevidence$801:kantan.csv.CellEncoder[A12],implicitevidence$802:kantan.csv.CellDecoder[A12],implicitevidence$803:kantan.csv.CellEncoder[A13],implicitevidence$804:kantan.csv.CellDecoder[A13],implicitevidence$805:kantan.csv.CellEncoder[A14],implicitevidence$806:kantan.csv.CellDecoder[A14],implicitevidence$807:kantan.csv.CellEncoder[A15],implicitevidence$808:kantan.csv.CellDecoder[A15],implicitevidence$809:kantan.csv.CellEncoder[A16],implicitevidence$810:kantan.csv.CellDecoder[A16],implicitevidence$811:kantan.csv.CellEncoder[A17],implicitevidence$812:kantan.csv.CellDecoder[A17]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$747:kantan.csv.CellEncoder[A1],implicitevidence$748:kantan.csv.CellDecoder[A1],implicitevidence$749:kantan.csv.CellEncoder[A2],implicitevidence$750:kantan.csv.CellDecoder[A2],implicitevidence$751:kantan.csv.CellEncoder[A3],implicitevidence$752:kantan.csv.CellDecoder[A3],implicitevidence$753:kantan.csv.CellEncoder[A4],implicitevidence$754:kantan.csv.CellDecoder[A4],implicitevidence$755:kantan.csv.CellEncoder[A5],implicitevidence$756:kantan.csv.CellDecoder[A5],implicitevidence$757:kantan.csv.CellEncoder[A6],implicitevidence$758:kantan.csv.CellDecoder[A6],implicitevidence$759:kantan.csv.CellEncoder[A7],implicitevidence$760:kantan.csv.CellDecoder[A7],implicitevidence$761:kantan.csv.CellEncoder[A8],implicitevidence$762:kantan.csv.CellDecoder[A8],implicitevidence$763:kantan.csv.CellEncoder[A9],implicitevidence$764:kantan.csv.CellDecoder[A9],implicitevidence$765:kantan.csv.CellEncoder[A10],implicitevidence$766:kantan.csv.CellDecoder[A10],implicitevidence$767:kantan.csv.CellEncoder[A11],implicitevidence$768:kantan.csv.CellDecoder[A11],implicitevidence$769:kantan.csv.CellEncoder[A12],implicitevidence$770:kantan.csv.CellDecoder[A12],implicitevidence$771:kantan.csv.CellEncoder[A13],implicitevidence$772:kantan.csv.CellDecoder[A13],implicitevidence$773:kantan.csv.CellEncoder[A14],implicitevidence$774:kantan.csv.CellDecoder[A14],implicitevidence$775:kantan.csv.CellEncoder[A15],implicitevidence$776:kantan.csv.CellDecoder[A15],implicitevidence$777:kantan.csv.CellEncoder[A16],implicitevidence$778:kantan.csv.CellDecoder[A16]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$717:kantan.csv.CellEncoder[A1],implicitevidence$718:kantan.csv.CellDecoder[A1],implicitevidence$719:kantan.csv.CellEncoder[A2],implicitevidence$720:kantan.csv.CellDecoder[A2],implicitevidence$721:kantan.csv.CellEncoder[A3],implicitevidence$722:kantan.csv.CellDecoder[A3],implicitevidence$723:kantan.csv.CellEncoder[A4],implicitevidence$724:kantan.csv.CellDecoder[A4],implicitevidence$725:kantan.csv.CellEncoder[A5],implicitevidence$726:kantan.csv.CellDecoder[A5],implicitevidence$727:kantan.csv.CellEncoder[A6],implicitevidence$728:kantan.csv.CellDecoder[A6],implicitevidence$729:kantan.csv.CellEncoder[A7],implicitevidence$730:kantan.csv.CellDecoder[A7],implicitevidence$731:kantan.csv.CellEncoder[A8],implicitevidence$732:kantan.csv.CellDecoder[A8],implicitevidence$733:kantan.csv.CellEncoder[A9],implicitevidence$734:kantan.csv.CellDecoder[A9],implicitevidence$735:kantan.csv.CellEncoder[A10],implicitevidence$736:kantan.csv.CellDecoder[A10],implicitevidence$737:kantan.csv.CellEncoder[A11],implicitevidence$738:kantan.csv.CellDecoder[A11],implicitevidence$739:kantan.csv.CellEncoder[A12],implicitevidence$740:kantan.csv.CellDecoder[A12],implicitevidence$741:kantan.csv.CellEncoder[A13],implicitevidence$742:kantan.csv.CellDecoder[A13],implicitevidence$743:kantan.csv.CellEncoder[A14],implicitevidence$744:kantan.csv.CellDecoder[A14],implicitevidence$745:kantan.csv.CellEncoder[A15],implicitevidence$746:kantan.csv.CellDecoder[A15]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$689:kantan.csv.CellEncoder[A1],implicitevidence$690:kantan.csv.CellDecoder[A1],implicitevidence$691:kantan.csv.CellEncoder[A2],implicitevidence$692:kantan.csv.CellDecoder[A2],implicitevidence$693:kantan.csv.CellEncoder[A3],implicitevidence$694:kantan.csv.CellDecoder[A3],implicitevidence$695:kantan.csv.CellEncoder[A4],implicitevidence$696:kantan.csv.CellDecoder[A4],implicitevidence$697:kantan.csv.CellEncoder[A5],implicitevidence$698:kantan.csv.CellDecoder[A5],implicitevidence$699:kantan.csv.CellEncoder[A6],implicitevidence$700:kantan.csv.CellDecoder[A6],implicitevidence$701:kantan.csv.CellEncoder[A7],implicitevidence$702:kantan.csv.CellDecoder[A7],implicitevidence$703:kantan.csv.CellEncoder[A8],implicitevidence$704:kantan.csv.CellDecoder[A8],implicitevidence$705:kantan.csv.CellEncoder[A9],implicitevidence$706:kantan.csv.CellDecoder[A9],implicitevidence$707:kantan.csv.CellEncoder[A10],implicitevidence$708:kantan.csv.CellDecoder[A10],implicitevidence$709:kantan.csv.CellEncoder[A11],implicitevidence$710:kantan.csv.CellDecoder[A11],implicitevidence$711:kantan.csv.CellEncoder[A12],implicitevidence$712:kantan.csv.CellDecoder[A12],implicitevidence$713:kantan.csv.CellEncoder[A13],implicitevidence$714:kantan.csv.CellDecoder[A13],implicitevidence$715:kantan.csv.CellEncoder[A14],implicitevidence$716:kantan.csv.CellDecoder[A14]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$663:kantan.csv.CellEncoder[A1],implicitevidence$664:kantan.csv.CellDecoder[A1],implicitevidence$665:kantan.csv.CellEncoder[A2],implicitevidence$666:kantan.csv.CellDecoder[A2],implicitevidence$667:kantan.csv.CellEncoder[A3],implicitevidence$668:kantan.csv.CellDecoder[A3],implicitevidence$669:kantan.csv.CellEncoder[A4],implicitevidence$670:kantan.csv.CellDecoder[A4],implicitevidence$671:kantan.csv.CellEncoder[A5],implicitevidence$672:kantan.csv.CellDecoder[A5],implicitevidence$673:kantan.csv.CellEncoder[A6],implicitevidence$674:kantan.csv.CellDecoder[A6],implicitevidence$675:kantan.csv.CellEncoder[A7],implicitevidence$676:kantan.csv.CellDecoder[A7],implicitevidence$677:kantan.csv.CellEncoder[A8],implicitevidence$678:kantan.csv.CellDecoder[A8],implicitevidence$679:kantan.csv.CellEncoder[A9],implicitevidence$680:kantan.csv.CellDecoder[A9],implicitevidence$681:kantan.csv.CellEncoder[A10],implicitevidence$682:kantan.csv.CellDecoder[A10],implicitevidence$683:kantan.csv.CellEncoder[A11],implicitevidence$684:kantan.csv.CellDecoder[A11],implicitevidence$685:kantan.csv.CellEncoder[A12],implicitevidence$686:kantan.csv.CellDecoder[A12],implicitevidence$687:kantan.csv.CellEncoder[A13],implicitevidence$688:kantan.csv.CellDecoder[A13]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$639:kantan.csv.CellEncoder[A1],implicitevidence$640:kantan.csv.CellDecoder[A1],implicitevidence$641:kantan.csv.CellEncoder[A2],implicitevidence$642:kantan.csv.CellDecoder[A2],implicitevidence$643:kantan.csv.CellEncoder[A3],implicitevidence$644:kantan.csv.CellDecoder[A3],implicitevidence$645:kantan.csv.CellEncoder[A4],implicitevidence$646:kantan.csv.CellDecoder[A4],implicitevidence$647:kantan.csv.CellEncoder[A5],implicitevidence$648:kantan.csv.CellDecoder[A5],implicitevidence$649:kantan.csv.CellEncoder[A6],implicitevidence$650:kantan.csv.CellDecoder[A6],implicitevidence$651:kantan.csv.CellEncoder[A7],implicitevidence$652:kantan.csv.CellDecoder[A7],implicitevidence$653:kantan.csv.CellEncoder[A8],implicitevidence$654:kantan.csv.CellDecoder[A8],implicitevidence$655:kantan.csv.CellEncoder[A9],implicitevidence$656:kantan.csv.CellDecoder[A9],implicitevidence$657:kantan.csv.CellEncoder[A10],implicitevidence$658:kantan.csv.CellDecoder[A10],implicitevidence$659:kantan.csv.CellEncoder[A11],implicitevidence$660:kantan.csv.CellDecoder[A11],implicitevidence$661:kantan.csv.CellEncoder[A12],implicitevidence$662:kantan.csv.CellDecoder[A12]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$617:kantan.csv.CellEncoder[A1],implicitevidence$618:kantan.csv.CellDecoder[A1],implicitevidence$619:kantan.csv.CellEncoder[A2],implicitevidence$620:kantan.csv.CellDecoder[A2],implicitevidence$621:kantan.csv.CellEncoder[A3],implicitevidence$622:kantan.csv.CellDecoder[A3],implicitevidence$623:kantan.csv.CellEncoder[A4],implicitevidence$624:kantan.csv.CellDecoder[A4],implicitevidence$625:kantan.csv.CellEncoder[A5],implicitevidence$626:kantan.csv.CellDecoder[A5],implicitevidence$627:kantan.csv.CellEncoder[A6],implicitevidence$628:kantan.csv.CellDecoder[A6],implicitevidence$629:kantan.csv.CellEncoder[A7],implicitevidence$630:kantan.csv.CellDecoder[A7],implicitevidence$631:kantan.csv.CellEncoder[A8],implicitevidence$632:kantan.csv.CellDecoder[A8],implicitevidence$633:kantan.csv.CellEncoder[A9],implicitevidence$634:kantan.csv.CellDecoder[A9],implicitevidence$635:kantan.csv.CellEncoder[A10],implicitevidence$636:kantan.csv.CellDecoder[A10],implicitevidence$637:kantan.csv.CellEncoder[A11],implicitevidence$638:kantan.csv.CellDecoder[A11]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$597:kantan.csv.CellEncoder[A1],implicitevidence$598:kantan.csv.CellDecoder[A1],implicitevidence$599:kantan.csv.CellEncoder[A2],implicitevidence$600:kantan.csv.CellDecoder[A2],implicitevidence$601:kantan.csv.CellEncoder[A3],implicitevidence$602:kantan.csv.CellDecoder[A3],implicitevidence$603:kantan.csv.CellEncoder[A4],implicitevidence$604:kantan.csv.CellDecoder[A4],implicitevidence$605:kantan.csv.CellEncoder[A5],implicitevidence$606:kantan.csv.CellDecoder[A5],implicitevidence$607:kantan.csv.CellEncoder[A6],implicitevidence$608:kantan.csv.CellDecoder[A6],implicitevidence$609:kantan.csv.CellEncoder[A7],implicitevidence$610:kantan.csv.CellDecoder[A7],implicitevidence$611:kantan.csv.CellEncoder[A8],implicitevidence$612:kantan.csv.CellDecoder[A8],implicitevidence$613:kantan.csv.CellEncoder[A9],implicitevidence$614:kantan.csv.CellDecoder[A9],implicitevidence$615:kantan.csv.CellEncoder[A10],implicitevidence$616:kantan.csv.CellDecoder[A10]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$579:kantan.csv.CellEncoder[A1],implicitevidence$580:kantan.csv.CellDecoder[A1],implicitevidence$581:kantan.csv.CellEncoder[A2],implicitevidence$582:kantan.csv.CellDecoder[A2],implicitevidence$583:kantan.csv.CellEncoder[A3],implicitevidence$584:kantan.csv.CellDecoder[A3],implicitevidence$585:kantan.csv.CellEncoder[A4],implicitevidence$586:kantan.csv.CellDecoder[A4],implicitevidence$587:kantan.csv.CellEncoder[A5],implicitevidence$588:kantan.csv.CellDecoder[A5],implicitevidence$589:kantan.csv.CellEncoder[A6],implicitevidence$590:kantan.csv.CellDecoder[A6],implicitevidence$591:kantan.csv.CellEncoder[A7],implicitevidence$592:kantan.csv.CellDecoder[A7],implicitevidence$593:kantan.csv.CellEncoder[A8],implicitevidence$594:kantan.csv.CellDecoder[A8],implicitevidence$595:kantan.csv.CellEncoder[A9],implicitevidence$596:kantan.csv.CellDecoder[A9]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8](f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$563:kantan.csv.CellEncoder[A1],implicitevidence$564:kantan.csv.CellDecoder[A1],implicitevidence$565:kantan.csv.CellEncoder[A2],implicitevidence$566:kantan.csv.CellDecoder[A2],implicitevidence$567:kantan.csv.CellEncoder[A3],implicitevidence$568:kantan.csv.CellDecoder[A3],implicitevidence$569:kantan.csv.CellEncoder[A4],implicitevidence$570:kantan.csv.CellDecoder[A4],implicitevidence$571:kantan.csv.CellEncoder[A5],implicitevidence$572:kantan.csv.CellDecoder[A5],implicitevidence$573:kantan.csv.CellEncoder[A6],implicitevidence$574:kantan.csv.CellDecoder[A6],implicitevidence$575:kantan.csv.CellEncoder[A7],implicitevidence$576:kantan.csv.CellDecoder[A7],implicitevidence$577:kantan.csv.CellEncoder[A8],implicitevidence$578:kantan.csv.CellDecoder[A8]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7](f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$549:kantan.csv.CellEncoder[A1],implicitevidence$550:kantan.csv.CellDecoder[A1],implicitevidence$551:kantan.csv.CellEncoder[A2],implicitevidence$552:kantan.csv.CellDecoder[A2],implicitevidence$553:kantan.csv.CellEncoder[A3],implicitevidence$554:kantan.csv.CellDecoder[A3],implicitevidence$555:kantan.csv.CellEncoder[A4],implicitevidence$556:kantan.csv.CellDecoder[A4],implicitevidence$557:kantan.csv.CellEncoder[A5],implicitevidence$558:kantan.csv.CellDecoder[A5],implicitevidence$559:kantan.csv.CellEncoder[A6],implicitevidence$560:kantan.csv.CellDecoder[A6],implicitevidence$561:kantan.csv.CellEncoder[A7],implicitevidence$562:kantan.csv.CellDecoder[A7]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5,A6](f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$537:kantan.csv.CellEncoder[A1],implicitevidence$538:kantan.csv.CellDecoder[A1],implicitevidence$539:kantan.csv.CellEncoder[A2],implicitevidence$540:kantan.csv.CellDecoder[A2],implicitevidence$541:kantan.csv.CellEncoder[A3],implicitevidence$542:kantan.csv.CellDecoder[A3],implicitevidence$543:kantan.csv.CellEncoder[A4],implicitevidence$544:kantan.csv.CellDecoder[A4],implicitevidence$545:kantan.csv.CellEncoder[A5],implicitevidence$546:kantan.csv.CellDecoder[A5],implicitevidence$547:kantan.csv.CellEncoder[A6],implicitevidence$548:kantan.csv.CellDecoder[A6]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5) => C)(g: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4,A5](f:(A1,A2,A3,A4,A5)=>C)(g:C=>(A1,A2,A3,A4,A5))(implicitevidence$527:kantan.csv.CellEncoder[A1],implicitevidence$528:kantan.csv.CellDecoder[A1],implicitevidence$529:kantan.csv.CellEncoder[A2],implicitevidence$530:kantan.csv.CellDecoder[A2],implicitevidence$531:kantan.csv.CellEncoder[A3],implicitevidence$532:kantan.csv.CellDecoder[A3],implicitevidence$533:kantan.csv.CellEncoder[A4],implicitevidence$534:kantan.csv.CellDecoder[A4],implicitevidence$535:kantan.csv.CellEncoder[A5],implicitevidence$536:kantan.csv.CellDecoder[A5]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4) => C)(g: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3,A4](f:(A1,A2,A3,A4)=>C)(g:C=>(A1,A2,A3,A4))(implicitevidence$519:kantan.csv.CellEncoder[A1],implicitevidence$520:kantan.csv.CellDecoder[A1],implicitevidence$521:kantan.csv.CellEncoder[A2],implicitevidence$522:kantan.csv.CellDecoder[A2],implicitevidence$523:kantan.csv.CellEncoder[A3],implicitevidence$524:kantan.csv.CellDecoder[A3],implicitevidence$525:kantan.csv.CellEncoder[A4],implicitevidence$526:kantan.csv.CellDecoder[A4]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3) => C)(g: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2,A3](f:(A1,A2,A3)=>C)(g:C=>(A1,A2,A3))(implicitevidence$513:kantan.csv.CellEncoder[A1],implicitevidence$514:kantan.csv.CellDecoder[A1],implicitevidence$515:kantan.csv.CellEncoder[A2],implicitevidence$516:kantan.csv.CellDecoder[A2],implicitevidence$517:kantan.csv.CellEncoder[A3],implicitevidence$518:kantan.csv.CellDecoder[A3]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2) => C)(g: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1,A2](f:(A1,A2)=>C)(g:C=>(A1,A2))(implicitevidence$509:kantan.csv.CellEncoder[A1],implicitevidence$510:kantan.csv.CellDecoder[A1],implicitevidence$511:kantan.csv.CellEncoder[A2],implicitevidence$512:kantan.csv.CellDecoder[A2]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1) => C)(g: (C) => A1)(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.ordered", "link" : "kantan\/csv\/RowCodec$.html#ordered[C,A1](f:A1=>C)(g:C=>A1)(implicitevidence$507:kantan.csv.CellEncoder[A1],implicitevidence$508:kantan.csv.CellDecoder[A1]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21], arg42: CellEncoder[A22], arg43: CellDecoder[A22]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$463:kantan.csv.CellEncoder[A1],implicitevidence$464:kantan.csv.CellDecoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellDecoder[A2],implicitevidence$467:kantan.csv.CellEncoder[A3],implicitevidence$468:kantan.csv.CellDecoder[A3],implicitevidence$469:kantan.csv.CellEncoder[A4],implicitevidence$470:kantan.csv.CellDecoder[A4],implicitevidence$471:kantan.csv.CellEncoder[A5],implicitevidence$472:kantan.csv.CellDecoder[A5],implicitevidence$473:kantan.csv.CellEncoder[A6],implicitevidence$474:kantan.csv.CellDecoder[A6],implicitevidence$475:kantan.csv.CellEncoder[A7],implicitevidence$476:kantan.csv.CellDecoder[A7],implicitevidence$477:kantan.csv.CellEncoder[A8],implicitevidence$478:kantan.csv.CellDecoder[A8],implicitevidence$479:kantan.csv.CellEncoder[A9],implicitevidence$480:kantan.csv.CellDecoder[A9],implicitevidence$481:kantan.csv.CellEncoder[A10],implicitevidence$482:kantan.csv.CellDecoder[A10],implicitevidence$483:kantan.csv.CellEncoder[A11],implicitevidence$484:kantan.csv.CellDecoder[A11],implicitevidence$485:kantan.csv.CellEncoder[A12],implicitevidence$486:kantan.csv.CellDecoder[A12],implicitevidence$487:kantan.csv.CellEncoder[A13],implicitevidence$488:kantan.csv.CellDecoder[A13],implicitevidence$489:kantan.csv.CellEncoder[A14],implicitevidence$490:kantan.csv.CellDecoder[A14],implicitevidence$491:kantan.csv.CellEncoder[A15],implicitevidence$492:kantan.csv.CellDecoder[A15],implicitevidence$493:kantan.csv.CellEncoder[A16],implicitevidence$494:kantan.csv.CellDecoder[A16],implicitevidence$495:kantan.csv.CellEncoder[A17],implicitevidence$496:kantan.csv.CellDecoder[A17],implicitevidence$497:kantan.csv.CellEncoder[A18],implicitevidence$498:kantan.csv.CellDecoder[A18],implicitevidence$499:kantan.csv.CellEncoder[A19],implicitevidence$500:kantan.csv.CellDecoder[A19],implicitevidence$501:kantan.csv.CellEncoder[A20],implicitevidence$502:kantan.csv.CellDecoder[A20],implicitevidence$503:kantan.csv.CellEncoder[A21],implicitevidence$504:kantan.csv.CellDecoder[A21],implicitevidence$505:kantan.csv.CellEncoder[A22],implicitevidence$506:kantan.csv.CellDecoder[A22]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20], arg40: CellEncoder[A21], arg41: CellDecoder[A21]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$421:kantan.csv.CellEncoder[A1],implicitevidence$422:kantan.csv.CellDecoder[A1],implicitevidence$423:kantan.csv.CellEncoder[A2],implicitevidence$424:kantan.csv.CellDecoder[A2],implicitevidence$425:kantan.csv.CellEncoder[A3],implicitevidence$426:kantan.csv.CellDecoder[A3],implicitevidence$427:kantan.csv.CellEncoder[A4],implicitevidence$428:kantan.csv.CellDecoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellDecoder[A5],implicitevidence$431:kantan.csv.CellEncoder[A6],implicitevidence$432:kantan.csv.CellDecoder[A6],implicitevidence$433:kantan.csv.CellEncoder[A7],implicitevidence$434:kantan.csv.CellDecoder[A7],implicitevidence$435:kantan.csv.CellEncoder[A8],implicitevidence$436:kantan.csv.CellDecoder[A8],implicitevidence$437:kantan.csv.CellEncoder[A9],implicitevidence$438:kantan.csv.CellDecoder[A9],implicitevidence$439:kantan.csv.CellEncoder[A10],implicitevidence$440:kantan.csv.CellDecoder[A10],implicitevidence$441:kantan.csv.CellEncoder[A11],implicitevidence$442:kantan.csv.CellDecoder[A11],implicitevidence$443:kantan.csv.CellEncoder[A12],implicitevidence$444:kantan.csv.CellDecoder[A12],implicitevidence$445:kantan.csv.CellEncoder[A13],implicitevidence$446:kantan.csv.CellDecoder[A13],implicitevidence$447:kantan.csv.CellEncoder[A14],implicitevidence$448:kantan.csv.CellDecoder[A14],implicitevidence$449:kantan.csv.CellEncoder[A15],implicitevidence$450:kantan.csv.CellDecoder[A15],implicitevidence$451:kantan.csv.CellEncoder[A16],implicitevidence$452:kantan.csv.CellDecoder[A16],implicitevidence$453:kantan.csv.CellEncoder[A17],implicitevidence$454:kantan.csv.CellDecoder[A17],implicitevidence$455:kantan.csv.CellEncoder[A18],implicitevidence$456:kantan.csv.CellDecoder[A18],implicitevidence$457:kantan.csv.CellEncoder[A19],implicitevidence$458:kantan.csv.CellDecoder[A19],implicitevidence$459:kantan.csv.CellEncoder[A20],implicitevidence$460:kantan.csv.CellDecoder[A20],implicitevidence$461:kantan.csv.CellEncoder[A21],implicitevidence$462:kantan.csv.CellDecoder[A21]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19], arg38: CellEncoder[A20], arg39: CellDecoder[A20]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$381:kantan.csv.CellEncoder[A1],implicitevidence$382:kantan.csv.CellDecoder[A1],implicitevidence$383:kantan.csv.CellEncoder[A2],implicitevidence$384:kantan.csv.CellDecoder[A2],implicitevidence$385:kantan.csv.CellEncoder[A3],implicitevidence$386:kantan.csv.CellDecoder[A3],implicitevidence$387:kantan.csv.CellEncoder[A4],implicitevidence$388:kantan.csv.CellDecoder[A4],implicitevidence$389:kantan.csv.CellEncoder[A5],implicitevidence$390:kantan.csv.CellDecoder[A5],implicitevidence$391:kantan.csv.CellEncoder[A6],implicitevidence$392:kantan.csv.CellDecoder[A6],implicitevidence$393:kantan.csv.CellEncoder[A7],implicitevidence$394:kantan.csv.CellDecoder[A7],implicitevidence$395:kantan.csv.CellEncoder[A8],implicitevidence$396:kantan.csv.CellDecoder[A8],implicitevidence$397:kantan.csv.CellEncoder[A9],implicitevidence$398:kantan.csv.CellDecoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellDecoder[A10],implicitevidence$401:kantan.csv.CellEncoder[A11],implicitevidence$402:kantan.csv.CellDecoder[A11],implicitevidence$403:kantan.csv.CellEncoder[A12],implicitevidence$404:kantan.csv.CellDecoder[A12],implicitevidence$405:kantan.csv.CellEncoder[A13],implicitevidence$406:kantan.csv.CellDecoder[A13],implicitevidence$407:kantan.csv.CellEncoder[A14],implicitevidence$408:kantan.csv.CellDecoder[A14],implicitevidence$409:kantan.csv.CellEncoder[A15],implicitevidence$410:kantan.csv.CellDecoder[A15],implicitevidence$411:kantan.csv.CellEncoder[A16],implicitevidence$412:kantan.csv.CellDecoder[A16],implicitevidence$413:kantan.csv.CellEncoder[A17],implicitevidence$414:kantan.csv.CellDecoder[A17],implicitevidence$415:kantan.csv.CellEncoder[A18],implicitevidence$416:kantan.csv.CellDecoder[A18],implicitevidence$417:kantan.csv.CellEncoder[A19],implicitevidence$418:kantan.csv.CellDecoder[A19],implicitevidence$419:kantan.csv.CellEncoder[A20],implicitevidence$420:kantan.csv.CellDecoder[A20]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18], arg36: CellEncoder[A19], arg37: CellDecoder[A19]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$343:kantan.csv.CellEncoder[A1],implicitevidence$344:kantan.csv.CellDecoder[A1],implicitevidence$345:kantan.csv.CellEncoder[A2],implicitevidence$346:kantan.csv.CellDecoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellDecoder[A3],implicitevidence$349:kantan.csv.CellEncoder[A4],implicitevidence$350:kantan.csv.CellDecoder[A4],implicitevidence$351:kantan.csv.CellEncoder[A5],implicitevidence$352:kantan.csv.CellDecoder[A5],implicitevidence$353:kantan.csv.CellEncoder[A6],implicitevidence$354:kantan.csv.CellDecoder[A6],implicitevidence$355:kantan.csv.CellEncoder[A7],implicitevidence$356:kantan.csv.CellDecoder[A7],implicitevidence$357:kantan.csv.CellEncoder[A8],implicitevidence$358:kantan.csv.CellDecoder[A8],implicitevidence$359:kantan.csv.CellEncoder[A9],implicitevidence$360:kantan.csv.CellDecoder[A9],implicitevidence$361:kantan.csv.CellEncoder[A10],implicitevidence$362:kantan.csv.CellDecoder[A10],implicitevidence$363:kantan.csv.CellEncoder[A11],implicitevidence$364:kantan.csv.CellDecoder[A11],implicitevidence$365:kantan.csv.CellEncoder[A12],implicitevidence$366:kantan.csv.CellDecoder[A12],implicitevidence$367:kantan.csv.CellEncoder[A13],implicitevidence$368:kantan.csv.CellDecoder[A13],implicitevidence$369:kantan.csv.CellEncoder[A14],implicitevidence$370:kantan.csv.CellDecoder[A14],implicitevidence$371:kantan.csv.CellEncoder[A15],implicitevidence$372:kantan.csv.CellDecoder[A15],implicitevidence$373:kantan.csv.CellEncoder[A16],implicitevidence$374:kantan.csv.CellDecoder[A16],implicitevidence$375:kantan.csv.CellEncoder[A17],implicitevidence$376:kantan.csv.CellDecoder[A17],implicitevidence$377:kantan.csv.CellEncoder[A18],implicitevidence$378:kantan.csv.CellDecoder[A18],implicitevidence$379:kantan.csv.CellEncoder[A19],implicitevidence$380:kantan.csv.CellDecoder[A19]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17], arg34: CellEncoder[A18], arg35: CellDecoder[A18]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$307:kantan.csv.CellEncoder[A1],implicitevidence$308:kantan.csv.CellDecoder[A1],implicitevidence$309:kantan.csv.CellEncoder[A2],implicitevidence$310:kantan.csv.CellDecoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellDecoder[A3],implicitevidence$313:kantan.csv.CellEncoder[A4],implicitevidence$314:kantan.csv.CellDecoder[A4],implicitevidence$315:kantan.csv.CellEncoder[A5],implicitevidence$316:kantan.csv.CellDecoder[A5],implicitevidence$317:kantan.csv.CellEncoder[A6],implicitevidence$318:kantan.csv.CellDecoder[A6],implicitevidence$319:kantan.csv.CellEncoder[A7],implicitevidence$320:kantan.csv.CellDecoder[A7],implicitevidence$321:kantan.csv.CellEncoder[A8],implicitevidence$322:kantan.csv.CellDecoder[A8],implicitevidence$323:kantan.csv.CellEncoder[A9],implicitevidence$324:kantan.csv.CellDecoder[A9],implicitevidence$325:kantan.csv.CellEncoder[A10],implicitevidence$326:kantan.csv.CellDecoder[A10],implicitevidence$327:kantan.csv.CellEncoder[A11],implicitevidence$328:kantan.csv.CellDecoder[A11],implicitevidence$329:kantan.csv.CellEncoder[A12],implicitevidence$330:kantan.csv.CellDecoder[A12],implicitevidence$331:kantan.csv.CellEncoder[A13],implicitevidence$332:kantan.csv.CellDecoder[A13],implicitevidence$333:kantan.csv.CellEncoder[A14],implicitevidence$334:kantan.csv.CellDecoder[A14],implicitevidence$335:kantan.csv.CellEncoder[A15],implicitevidence$336:kantan.csv.CellDecoder[A15],implicitevidence$337:kantan.csv.CellEncoder[A16],implicitevidence$338:kantan.csv.CellDecoder[A16],implicitevidence$339:kantan.csv.CellEncoder[A17],implicitevidence$340:kantan.csv.CellDecoder[A17],implicitevidence$341:kantan.csv.CellEncoder[A18],implicitevidence$342:kantan.csv.CellDecoder[A18]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16], arg32: CellEncoder[A17], arg33: CellDecoder[A17]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$273:kantan.csv.CellEncoder[A1],implicitevidence$274:kantan.csv.CellDecoder[A1],implicitevidence$275:kantan.csv.CellEncoder[A2],implicitevidence$276:kantan.csv.CellDecoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellDecoder[A3],implicitevidence$279:kantan.csv.CellEncoder[A4],implicitevidence$280:kantan.csv.CellDecoder[A4],implicitevidence$281:kantan.csv.CellEncoder[A5],implicitevidence$282:kantan.csv.CellDecoder[A5],implicitevidence$283:kantan.csv.CellEncoder[A6],implicitevidence$284:kantan.csv.CellDecoder[A6],implicitevidence$285:kantan.csv.CellEncoder[A7],implicitevidence$286:kantan.csv.CellDecoder[A7],implicitevidence$287:kantan.csv.CellEncoder[A8],implicitevidence$288:kantan.csv.CellDecoder[A8],implicitevidence$289:kantan.csv.CellEncoder[A9],implicitevidence$290:kantan.csv.CellDecoder[A9],implicitevidence$291:kantan.csv.CellEncoder[A10],implicitevidence$292:kantan.csv.CellDecoder[A10],implicitevidence$293:kantan.csv.CellEncoder[A11],implicitevidence$294:kantan.csv.CellDecoder[A11],implicitevidence$295:kantan.csv.CellEncoder[A12],implicitevidence$296:kantan.csv.CellDecoder[A12],implicitevidence$297:kantan.csv.CellEncoder[A13],implicitevidence$298:kantan.csv.CellDecoder[A13],implicitevidence$299:kantan.csv.CellEncoder[A14],implicitevidence$300:kantan.csv.CellDecoder[A14],implicitevidence$301:kantan.csv.CellEncoder[A15],implicitevidence$302:kantan.csv.CellDecoder[A15],implicitevidence$303:kantan.csv.CellEncoder[A16],implicitevidence$304:kantan.csv.CellDecoder[A16],implicitevidence$305:kantan.csv.CellEncoder[A17],implicitevidence$306:kantan.csv.CellDecoder[A17]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15], arg30: CellEncoder[A16], arg31: CellDecoder[A16]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$241:kantan.csv.CellEncoder[A1],implicitevidence$242:kantan.csv.CellDecoder[A1],implicitevidence$243:kantan.csv.CellEncoder[A2],implicitevidence$244:kantan.csv.CellDecoder[A2],implicitevidence$245:kantan.csv.CellEncoder[A3],implicitevidence$246:kantan.csv.CellDecoder[A3],implicitevidence$247:kantan.csv.CellEncoder[A4],implicitevidence$248:kantan.csv.CellDecoder[A4],implicitevidence$249:kantan.csv.CellEncoder[A5],implicitevidence$250:kantan.csv.CellDecoder[A5],implicitevidence$251:kantan.csv.CellEncoder[A6],implicitevidence$252:kantan.csv.CellDecoder[A6],implicitevidence$253:kantan.csv.CellEncoder[A7],implicitevidence$254:kantan.csv.CellDecoder[A7],implicitevidence$255:kantan.csv.CellEncoder[A8],implicitevidence$256:kantan.csv.CellDecoder[A8],implicitevidence$257:kantan.csv.CellEncoder[A9],implicitevidence$258:kantan.csv.CellDecoder[A9],implicitevidence$259:kantan.csv.CellEncoder[A10],implicitevidence$260:kantan.csv.CellDecoder[A10],implicitevidence$261:kantan.csv.CellEncoder[A11],implicitevidence$262:kantan.csv.CellDecoder[A11],implicitevidence$263:kantan.csv.CellEncoder[A12],implicitevidence$264:kantan.csv.CellDecoder[A12],implicitevidence$265:kantan.csv.CellEncoder[A13],implicitevidence$266:kantan.csv.CellDecoder[A13],implicitevidence$267:kantan.csv.CellEncoder[A14],implicitevidence$268:kantan.csv.CellDecoder[A14],implicitevidence$269:kantan.csv.CellEncoder[A15],implicitevidence$270:kantan.csv.CellDecoder[A15],implicitevidence$271:kantan.csv.CellEncoder[A16],implicitevidence$272:kantan.csv.CellDecoder[A16]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14], arg28: CellEncoder[A15], arg29: CellDecoder[A15]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$211:kantan.csv.CellEncoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A1],implicitevidence$213:kantan.csv.CellEncoder[A2],implicitevidence$214:kantan.csv.CellDecoder[A2],implicitevidence$215:kantan.csv.CellEncoder[A3],implicitevidence$216:kantan.csv.CellDecoder[A3],implicitevidence$217:kantan.csv.CellEncoder[A4],implicitevidence$218:kantan.csv.CellDecoder[A4],implicitevidence$219:kantan.csv.CellEncoder[A5],implicitevidence$220:kantan.csv.CellDecoder[A5],implicitevidence$221:kantan.csv.CellEncoder[A6],implicitevidence$222:kantan.csv.CellDecoder[A6],implicitevidence$223:kantan.csv.CellEncoder[A7],implicitevidence$224:kantan.csv.CellDecoder[A7],implicitevidence$225:kantan.csv.CellEncoder[A8],implicitevidence$226:kantan.csv.CellDecoder[A8],implicitevidence$227:kantan.csv.CellEncoder[A9],implicitevidence$228:kantan.csv.CellDecoder[A9],implicitevidence$229:kantan.csv.CellEncoder[A10],implicitevidence$230:kantan.csv.CellDecoder[A10],implicitevidence$231:kantan.csv.CellEncoder[A11],implicitevidence$232:kantan.csv.CellDecoder[A11],implicitevidence$233:kantan.csv.CellEncoder[A12],implicitevidence$234:kantan.csv.CellDecoder[A12],implicitevidence$235:kantan.csv.CellEncoder[A13],implicitevidence$236:kantan.csv.CellDecoder[A13],implicitevidence$237:kantan.csv.CellEncoder[A14],implicitevidence$238:kantan.csv.CellDecoder[A14],implicitevidence$239:kantan.csv.CellEncoder[A15],implicitevidence$240:kantan.csv.CellDecoder[A15]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13], arg26: CellEncoder[A14], arg27: CellDecoder[A14]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$183:kantan.csv.CellEncoder[A1],implicitevidence$184:kantan.csv.CellDecoder[A1],implicitevidence$185:kantan.csv.CellEncoder[A2],implicitevidence$186:kantan.csv.CellDecoder[A2],implicitevidence$187:kantan.csv.CellEncoder[A3],implicitevidence$188:kantan.csv.CellDecoder[A3],implicitevidence$189:kantan.csv.CellEncoder[A4],implicitevidence$190:kantan.csv.CellDecoder[A4],implicitevidence$191:kantan.csv.CellEncoder[A5],implicitevidence$192:kantan.csv.CellDecoder[A5],implicitevidence$193:kantan.csv.CellEncoder[A6],implicitevidence$194:kantan.csv.CellDecoder[A6],implicitevidence$195:kantan.csv.CellEncoder[A7],implicitevidence$196:kantan.csv.CellDecoder[A7],implicitevidence$197:kantan.csv.CellEncoder[A8],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellEncoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A9],implicitevidence$201:kantan.csv.CellEncoder[A10],implicitevidence$202:kantan.csv.CellDecoder[A10],implicitevidence$203:kantan.csv.CellEncoder[A11],implicitevidence$204:kantan.csv.CellDecoder[A11],implicitevidence$205:kantan.csv.CellEncoder[A12],implicitevidence$206:kantan.csv.CellDecoder[A12],implicitevidence$207:kantan.csv.CellEncoder[A13],implicitevidence$208:kantan.csv.CellDecoder[A13],implicitevidence$209:kantan.csv.CellEncoder[A14],implicitevidence$210:kantan.csv.CellDecoder[A14]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12], arg24: CellEncoder[A13], arg25: CellDecoder[A13]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$157:kantan.csv.CellEncoder[A1],implicitevidence$158:kantan.csv.CellDecoder[A1],implicitevidence$159:kantan.csv.CellEncoder[A2],implicitevidence$160:kantan.csv.CellDecoder[A2],implicitevidence$161:kantan.csv.CellEncoder[A3],implicitevidence$162:kantan.csv.CellDecoder[A3],implicitevidence$163:kantan.csv.CellEncoder[A4],implicitevidence$164:kantan.csv.CellDecoder[A4],implicitevidence$165:kantan.csv.CellEncoder[A5],implicitevidence$166:kantan.csv.CellDecoder[A5],implicitevidence$167:kantan.csv.CellEncoder[A6],implicitevidence$168:kantan.csv.CellDecoder[A6],implicitevidence$169:kantan.csv.CellEncoder[A7],implicitevidence$170:kantan.csv.CellDecoder[A7],implicitevidence$171:kantan.csv.CellEncoder[A8],implicitevidence$172:kantan.csv.CellDecoder[A8],implicitevidence$173:kantan.csv.CellEncoder[A9],implicitevidence$174:kantan.csv.CellDecoder[A9],implicitevidence$175:kantan.csv.CellEncoder[A10],implicitevidence$176:kantan.csv.CellDecoder[A10],implicitevidence$177:kantan.csv.CellEncoder[A11],implicitevidence$178:kantan.csv.CellDecoder[A11],implicitevidence$179:kantan.csv.CellEncoder[A12],implicitevidence$180:kantan.csv.CellDecoder[A12],implicitevidence$181:kantan.csv.CellEncoder[A13],implicitevidence$182:kantan.csv.CellDecoder[A13]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11], arg22: CellEncoder[A12], arg23: CellDecoder[A12]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$133:kantan.csv.CellEncoder[A1],implicitevidence$134:kantan.csv.CellDecoder[A1],implicitevidence$135:kantan.csv.CellEncoder[A2],implicitevidence$136:kantan.csv.CellDecoder[A2],implicitevidence$137:kantan.csv.CellEncoder[A3],implicitevidence$138:kantan.csv.CellDecoder[A3],implicitevidence$139:kantan.csv.CellEncoder[A4],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellEncoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A5],implicitevidence$143:kantan.csv.CellEncoder[A6],implicitevidence$144:kantan.csv.CellDecoder[A6],implicitevidence$145:kantan.csv.CellEncoder[A7],implicitevidence$146:kantan.csv.CellDecoder[A7],implicitevidence$147:kantan.csv.CellEncoder[A8],implicitevidence$148:kantan.csv.CellDecoder[A8],implicitevidence$149:kantan.csv.CellEncoder[A9],implicitevidence$150:kantan.csv.CellDecoder[A9],implicitevidence$151:kantan.csv.CellEncoder[A10],implicitevidence$152:kantan.csv.CellDecoder[A10],implicitevidence$153:kantan.csv.CellEncoder[A11],implicitevidence$154:kantan.csv.CellDecoder[A11],implicitevidence$155:kantan.csv.CellEncoder[A12],implicitevidence$156:kantan.csv.CellDecoder[A12]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10], arg20: CellEncoder[A11], arg21: CellDecoder[A11]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$111:kantan.csv.CellEncoder[A1],implicitevidence$112:kantan.csv.CellDecoder[A1],implicitevidence$113:kantan.csv.CellEncoder[A2],implicitevidence$114:kantan.csv.CellDecoder[A2],implicitevidence$115:kantan.csv.CellEncoder[A3],implicitevidence$116:kantan.csv.CellDecoder[A3],implicitevidence$117:kantan.csv.CellEncoder[A4],implicitevidence$118:kantan.csv.CellDecoder[A4],implicitevidence$119:kantan.csv.CellEncoder[A5],implicitevidence$120:kantan.csv.CellDecoder[A5],implicitevidence$121:kantan.csv.CellEncoder[A6],implicitevidence$122:kantan.csv.CellDecoder[A6],implicitevidence$123:kantan.csv.CellEncoder[A7],implicitevidence$124:kantan.csv.CellDecoder[A7],implicitevidence$125:kantan.csv.CellEncoder[A8],implicitevidence$126:kantan.csv.CellDecoder[A8],implicitevidence$127:kantan.csv.CellEncoder[A9],implicitevidence$128:kantan.csv.CellDecoder[A9],implicitevidence$129:kantan.csv.CellEncoder[A10],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellEncoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A11]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9], arg18: CellEncoder[A10], arg19: CellDecoder[A10]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$91:kantan.csv.CellEncoder[A1],implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellEncoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A2],implicitevidence$95:kantan.csv.CellEncoder[A3],implicitevidence$96:kantan.csv.CellDecoder[A3],implicitevidence$97:kantan.csv.CellEncoder[A4],implicitevidence$98:kantan.csv.CellDecoder[A4],implicitevidence$99:kantan.csv.CellEncoder[A5],implicitevidence$100:kantan.csv.CellDecoder[A5],implicitevidence$101:kantan.csv.CellEncoder[A6],implicitevidence$102:kantan.csv.CellDecoder[A6],implicitevidence$103:kantan.csv.CellEncoder[A7],implicitevidence$104:kantan.csv.CellDecoder[A7],implicitevidence$105:kantan.csv.CellEncoder[A8],implicitevidence$106:kantan.csv.CellDecoder[A8],implicitevidence$107:kantan.csv.CellEncoder[A9],implicitevidence$108:kantan.csv.CellDecoder[A9],implicitevidence$109:kantan.csv.CellEncoder[A10],implicitevidence$110:kantan.csv.CellDecoder[A10]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8], arg16: CellEncoder[A9], arg17: CellDecoder[A9]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$73:kantan.csv.CellEncoder[A1],implicitevidence$74:kantan.csv.CellDecoder[A1],implicitevidence$75:kantan.csv.CellEncoder[A2],implicitevidence$76:kantan.csv.CellDecoder[A2],implicitevidence$77:kantan.csv.CellEncoder[A3],implicitevidence$78:kantan.csv.CellDecoder[A3],implicitevidence$79:kantan.csv.CellEncoder[A4],implicitevidence$80:kantan.csv.CellDecoder[A4],implicitevidence$81:kantan.csv.CellEncoder[A5],implicitevidence$82:kantan.csv.CellDecoder[A5],implicitevidence$83:kantan.csv.CellEncoder[A6],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellEncoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A7],implicitevidence$87:kantan.csv.CellEncoder[A8],implicitevidence$88:kantan.csv.CellDecoder[A8],implicitevidence$89:kantan.csv.CellEncoder[A9],implicitevidence$90:kantan.csv.CellDecoder[A9]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7], arg14: CellEncoder[A8], arg15: CellDecoder[A8]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$57:kantan.csv.CellEncoder[A1],implicitevidence$58:kantan.csv.CellDecoder[A1],implicitevidence$59:kantan.csv.CellEncoder[A2],implicitevidence$60:kantan.csv.CellDecoder[A2],implicitevidence$61:kantan.csv.CellEncoder[A3],implicitevidence$62:kantan.csv.CellDecoder[A3],implicitevidence$63:kantan.csv.CellEncoder[A4],implicitevidence$64:kantan.csv.CellDecoder[A4],implicitevidence$65:kantan.csv.CellEncoder[A5],implicitevidence$66:kantan.csv.CellDecoder[A5],implicitevidence$67:kantan.csv.CellEncoder[A6],implicitevidence$68:kantan.csv.CellDecoder[A6],implicitevidence$69:kantan.csv.CellEncoder[A7],implicitevidence$70:kantan.csv.CellDecoder[A7],implicitevidence$71:kantan.csv.CellEncoder[A8],implicitevidence$72:kantan.csv.CellDecoder[A8]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (A1, A2, A3, A4, A5, A6, A7) => C)(g: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6], arg12: CellEncoder[A7], arg13: CellDecoder[A7]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:(A1,A2,A3,A4,A5,A6,A7)=>C)(g:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$43:kantan.csv.CellEncoder[A1],implicitevidence$44:kantan.csv.CellDecoder[A1],implicitevidence$45:kantan.csv.CellEncoder[A2],implicitevidence$46:kantan.csv.CellDecoder[A2],implicitevidence$47:kantan.csv.CellEncoder[A3],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellEncoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A4],implicitevidence$51:kantan.csv.CellEncoder[A5],implicitevidence$52:kantan.csv.CellDecoder[A5],implicitevidence$53:kantan.csv.CellEncoder[A6],implicitevidence$54:kantan.csv.CellDecoder[A6],implicitevidence$55:kantan.csv.CellEncoder[A7],implicitevidence$56:kantan.csv.CellDecoder[A7]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (A1, A2, A3, A4, A5, A6) => C)(g: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5], arg10: CellEncoder[A6], arg11: CellDecoder[A6]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:(A1,A2,A3,A4,A5,A6)=>C)(g:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$31:kantan.csv.CellEncoder[A1],implicitevidence$32:kantan.csv.CellDecoder[A1],implicitevidence$33:kantan.csv.CellEncoder[A2],implicitevidence$34:kantan.csv.CellDecoder[A2],implicitevidence$35:kantan.csv.CellEncoder[A3],implicitevidence$36:kantan.csv.CellDecoder[A3],implicitevidence$37:kantan.csv.CellEncoder[A4],implicitevidence$38:kantan.csv.CellDecoder[A4],implicitevidence$39:kantan.csv.CellEncoder[A5],implicitevidence$40:kantan.csv.CellDecoder[A5],implicitevidence$41:kantan.csv.CellEncoder[A6],implicitevidence$42:kantan.csv.CellDecoder[A6]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (A1, A2, A3, A4, A5) => C)(g: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4], arg8: CellEncoder[A5], arg9: CellDecoder[A5]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:(A1,A2,A3,A4,A5)=>C)(g:C=>(A1,A2,A3,A4,A5))(implicitevidence$21:kantan.csv.CellEncoder[A1],implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellEncoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A2],implicitevidence$25:kantan.csv.CellEncoder[A3],implicitevidence$26:kantan.csv.CellDecoder[A3],implicitevidence$27:kantan.csv.CellEncoder[A4],implicitevidence$28:kantan.csv.CellDecoder[A4],implicitevidence$29:kantan.csv.CellEncoder[A5],implicitevidence$30:kantan.csv.CellDecoder[A5]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (A1, A2, A3, A4) => C)(g: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3], arg6: CellEncoder[A4], arg7: CellDecoder[A4]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(f:(A1,A2,A3,A4)=>C)(g:C=>(A1,A2,A3,A4))(implicitevidence$13:kantan.csv.CellEncoder[A1],implicitevidence$14:kantan.csv.CellDecoder[A1],implicitevidence$15:kantan.csv.CellEncoder[A2],implicitevidence$16:kantan.csv.CellDecoder[A2],implicitevidence$17:kantan.csv.CellEncoder[A3],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellEncoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A4]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (A1, A2, A3) => C)(g: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2], arg4: CellEncoder[A3], arg5: CellDecoder[A3]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2,A3](i1:Int,i2:Int,i3:Int)(f:(A1,A2,A3)=>C)(g:C=>(A1,A2,A3))(implicitevidence$7:kantan.csv.CellEncoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A1],implicitevidence$9:kantan.csv.CellEncoder[A2],implicitevidence$10:kantan.csv.CellDecoder[A2],implicitevidence$11:kantan.csv.CellEncoder[A3],implicitevidence$12:kantan.csv.CellDecoder[A3]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(i1: Int, i2: Int)(f: (A1, A2) => C)(g: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellDecoder[A1], arg2: CellEncoder[A2], arg3: CellDecoder[A2]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1,A2](i1:Int,i2:Int)(f:(A1,A2)=>C)(g:C=>(A1,A2))(implicitevidence$3:kantan.csv.CellEncoder[A1],implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellEncoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A2]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "codec", "tail" : "(f: (A1) => C)(g: (C) => A1)(arg0: CellEncoder[A1], arg1: CellDecoder[A1]): RowCodec[C]", "member" : "kantan.csv.GeneratedRowCodecs.codec", "link" : "kantan\/csv\/RowCodec$.html#codec[C,A1](f:A1=>C)(g:C=>A1)(implicitevidence$1:kantan.csv.CellEncoder[A1],implicitevidence$2:kantan.csv.CellDecoder[A1]):kantan.csv.RowCodec[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/RowCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/RowCodec$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/RowCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/RowCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/RowCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/RowCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/RowCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/RowCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/RowCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/RowCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/RowCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/RowCodec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/RowCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/RowCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/RowCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/RowCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "imapEncoded", "tail" : "(f: (E) => EE)(g: (EE) => E): Codec[EE, D, F, T]", "member" : "kantan.codecs.Codec.imapEncoded", "link" : "kantan\/csv\/package$$RowCodec.html#imapEncoded[EE](f:E=>EE)(g:EE=>E):kantan.codecs.Codec[EE,D,F,T]", "kind" : "def"}, {"label" : "imap", "tail" : "(f: (D) => DD)(g: (DD) => D): Codec[E, DD, F, T]", "member" : "kantan.codecs.Codec.imap", "link" : "kantan\/csv\/package$$RowCodec.html#imap[DD](f:D=>DD)(g:DD=>D):kantan.codecs.Codec[E,DD,F,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Codec[E, D, FF, T]", "member" : "kantan.codecs.Codec.mapError", "link" : "kantan\/csv\/package$$RowCodec.html#mapError[FF](f:F=>FF):kantan.codecs.Codec[E,D,FF,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Codec[E, D, FF, T]", "member" : "kantan.codecs.Codec.leftMap", "link" : "kantan\/csv\/package$$RowCodec.html#leftMap[FF](f:F=>FF):kantan.codecs.Codec[E,D,FF,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Codec[E, D, F, TT]", "member" : "kantan.codecs.Codec.tag", "link" : "kantan\/csv\/package$$RowCodec.html#tag[TT]:kantan.codecs.Codec[E,D,F,TT]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (DD) => D): Encoder[E, DD, T]", "member" : "kantan.codecs.Encoder.contramap", "link" : "kantan\/csv\/package$$RowCodec.html#contramap[DD](f:DD=>D):kantan.codecs.Encoder[E,DD,T]", "kind" : "def"}, {"label" : "mapEncoded", "tail" : "(f: (E) => EE): Encoder[EE, D, T]", "member" : "kantan.codecs.Encoder.mapEncoded", "link" : "kantan\/csv\/package$$RowCodec.html#mapEncoded[EE](f:E=>EE):kantan.codecs.Encoder[EE,D,T]", "kind" : "def"}, {"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/csv\/package$$RowCodec.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/csv\/package$$RowCodec.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/csv\/package$$RowCodec.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/csv\/package$$RowCodec.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/csv\/package$$RowCodec.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/csv\/package$$RowCodec.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/csv\/package$$RowCodec.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/csv\/package$$RowCodec.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/csv\/package$$RowCodec.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/csv\/package$$RowCodec.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/csv\/package$$RowCodec.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/csv\/package$$RowCodec.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/csv\/package$$RowCodec.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/csv\/package$$RowCodec.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$RowCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$RowCodec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$RowCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$RowCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$RowCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$RowCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$RowCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$RowCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$RowCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$RowCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$RowCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$RowCodec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$RowCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$RowCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$RowCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$RowCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encode", "tail" : "(d: D): E", "member" : "kantan.codecs.Encoder.encode", "link" : "kantan\/csv\/package$$RowCodec.html#encode(d:D):E", "kind" : "abstract def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/csv\/package$$RowCodec.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$RowCodec.html"}, {"name" : "kantan.csv.RowCodecInstances", "trait" : "kantan\/csv\/RowCodecInstances.html", "kind" : "trait", "members_trait" : [{"label" : "hasBuilderRowDecoder", "tail" : "(arg0: CellDecoder[A], hb: Factory[A, F[A]]): RowDecoder[F[A]]", "member" : "kantan.csv.RowDecoderInstances.hasBuilderRowDecoder", "link" : "kantan\/csv\/RowCodecInstances.html#hasBuilderRowDecoder[A,F[_]](implicitevidence$4:kantan.csv.CellDecoder[A],implicithb:kantan.codecs.collection.Factory[A,F[A]]):kantan.csv.RowDecoder[F[A]]", "kind" : "implicit def"}, {"label" : "fromCellDecoder", "tail" : "(arg0: CellDecoder[A]): RowDecoder[A]", "member" : "kantan.csv.RowDecoderInstances.fromCellDecoder", "link" : "kantan\/csv\/RowCodecInstances.html#fromCellDecoder[A](implicitevidence$3:kantan.csv.CellDecoder[A]):kantan.csv.RowDecoder[A]", "kind" : "implicit def"}, {"label" : "fromCellEncoder", "tail" : "(arg0: CellEncoder[A]): RowEncoder[A]", "member" : "kantan.csv.RowEncoderInstances.fromCellEncoder", "link" : "kantan\/csv\/RowCodecInstances.html#fromCellEncoder[A](implicitevidence$1:kantan.csv.CellEncoder[A]):kantan.csv.RowEncoder[A]", "kind" : "implicit def"}, {"label" : "iterable", "tail" : "(arg0: CellEncoder[A]): RowEncoder[M[A]]", "member" : "kantan.csv.VersionSpecificRowEncoderInstances.iterable", "link" : "kantan\/csv\/RowCodecInstances.html#iterable[A,M[X]<:IterableOnce[X]](implicitevidence$1:kantan.csv.CellEncoder[A]):kantan.csv.RowEncoder[M[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/RowCodecInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/RowCodecInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/RowCodecInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/RowCodecInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/RowCodecInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/RowCodecInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/RowCodecInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowCodecInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowCodecInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowCodecInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/RowCodecInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/RowCodecInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/RowCodecInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/RowCodecInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/RowCodecInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/RowCodecInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/RowCodecInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/RowCodecInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/RowCodecInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "All default RowCodec instances."}, {"name" : "kantan.csv.RowDecoder", "shortDescription" : "Provides various instance creation and summoning methods.", "object" : "kantan\/csv\/RowDecoder$.html", "members_object" : [{"label" : "field", "tail" : "(index: Int)(arg0: CellDecoder[A]): RowDecoder[A]", "member" : "kantan.csv.RowDecoder.field", "link" : "kantan\/csv\/RowDecoder$.html#field[A](index:Int)(implicitevidence$2:kantan.csv.CellDecoder[A]):kantan.csv.RowDecoder[A]", "kind" : "def"}, {"label" : "decodeCell", "tail" : "(ss: Seq[String], i: Int)(arg0: CellDecoder[A]): DecodeResult[A]", "member" : "kantan.csv.RowDecoder.decodeCell", "link" : "kantan\/csv\/RowDecoder$.html#decodeCell[A](ss:Seq[String],i:Int)(implicitevidence$1:kantan.csv.CellDecoder[A]):kantan.csv.DecodeResult[A]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(ds: Decoder[Seq[String], D, DecodeError, codecs.type]*)(i: IsError[DecodeError]): Decoder[Seq[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/csv\/RowDecoder$.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[Seq[String], Either[DecodeError, D]])(t: IsError[DecodeError]): Decoder[Seq[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/csv\/RowDecoder$.html#fromPartial[D](f:PartialFunction[E,Either[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (Seq[String]) => D)(t: IsError[DecodeError]): Decoder[Seq[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/csv\/RowDecoder$.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (Seq[String]) => Either[DecodeError, D]): Decoder[Seq[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/csv\/RowDecoder$.html#from[D](f:E=>Either[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[Seq[String], D, DecodeError, codecs.type]): Decoder[Seq[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/csv\/RowDecoder$.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21], arg21: CellDecoder[A22]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>R)(implicitevidence$485:kantan.csv.CellDecoder[A1],implicitevidence$486:kantan.csv.CellDecoder[A2],implicitevidence$487:kantan.csv.CellDecoder[A3],implicitevidence$488:kantan.csv.CellDecoder[A4],implicitevidence$489:kantan.csv.CellDecoder[A5],implicitevidence$490:kantan.csv.CellDecoder[A6],implicitevidence$491:kantan.csv.CellDecoder[A7],implicitevidence$492:kantan.csv.CellDecoder[A8],implicitevidence$493:kantan.csv.CellDecoder[A9],implicitevidence$494:kantan.csv.CellDecoder[A10],implicitevidence$495:kantan.csv.CellDecoder[A11],implicitevidence$496:kantan.csv.CellDecoder[A12],implicitevidence$497:kantan.csv.CellDecoder[A13],implicitevidence$498:kantan.csv.CellDecoder[A14],implicitevidence$499:kantan.csv.CellDecoder[A15],implicitevidence$500:kantan.csv.CellDecoder[A16],implicitevidence$501:kantan.csv.CellDecoder[A17],implicitevidence$502:kantan.csv.CellDecoder[A18],implicitevidence$503:kantan.csv.CellDecoder[A19],implicitevidence$504:kantan.csv.CellDecoder[A20],implicitevidence$505:kantan.csv.CellDecoder[A21],implicitevidence$506:kantan.csv.CellDecoder[A22]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>R)(implicitevidence$464:kantan.csv.CellDecoder[A1],implicitevidence$465:kantan.csv.CellDecoder[A2],implicitevidence$466:kantan.csv.CellDecoder[A3],implicitevidence$467:kantan.csv.CellDecoder[A4],implicitevidence$468:kantan.csv.CellDecoder[A5],implicitevidence$469:kantan.csv.CellDecoder[A6],implicitevidence$470:kantan.csv.CellDecoder[A7],implicitevidence$471:kantan.csv.CellDecoder[A8],implicitevidence$472:kantan.csv.CellDecoder[A9],implicitevidence$473:kantan.csv.CellDecoder[A10],implicitevidence$474:kantan.csv.CellDecoder[A11],implicitevidence$475:kantan.csv.CellDecoder[A12],implicitevidence$476:kantan.csv.CellDecoder[A13],implicitevidence$477:kantan.csv.CellDecoder[A14],implicitevidence$478:kantan.csv.CellDecoder[A15],implicitevidence$479:kantan.csv.CellDecoder[A16],implicitevidence$480:kantan.csv.CellDecoder[A17],implicitevidence$481:kantan.csv.CellDecoder[A18],implicitevidence$482:kantan.csv.CellDecoder[A19],implicitevidence$483:kantan.csv.CellDecoder[A20],implicitevidence$484:kantan.csv.CellDecoder[A21]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>R)(implicitevidence$444:kantan.csv.CellDecoder[A1],implicitevidence$445:kantan.csv.CellDecoder[A2],implicitevidence$446:kantan.csv.CellDecoder[A3],implicitevidence$447:kantan.csv.CellDecoder[A4],implicitevidence$448:kantan.csv.CellDecoder[A5],implicitevidence$449:kantan.csv.CellDecoder[A6],implicitevidence$450:kantan.csv.CellDecoder[A7],implicitevidence$451:kantan.csv.CellDecoder[A8],implicitevidence$452:kantan.csv.CellDecoder[A9],implicitevidence$453:kantan.csv.CellDecoder[A10],implicitevidence$454:kantan.csv.CellDecoder[A11],implicitevidence$455:kantan.csv.CellDecoder[A12],implicitevidence$456:kantan.csv.CellDecoder[A13],implicitevidence$457:kantan.csv.CellDecoder[A14],implicitevidence$458:kantan.csv.CellDecoder[A15],implicitevidence$459:kantan.csv.CellDecoder[A16],implicitevidence$460:kantan.csv.CellDecoder[A17],implicitevidence$461:kantan.csv.CellDecoder[A18],implicitevidence$462:kantan.csv.CellDecoder[A19],implicitevidence$463:kantan.csv.CellDecoder[A20]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>R)(implicitevidence$425:kantan.csv.CellDecoder[A1],implicitevidence$426:kantan.csv.CellDecoder[A2],implicitevidence$427:kantan.csv.CellDecoder[A3],implicitevidence$428:kantan.csv.CellDecoder[A4],implicitevidence$429:kantan.csv.CellDecoder[A5],implicitevidence$430:kantan.csv.CellDecoder[A6],implicitevidence$431:kantan.csv.CellDecoder[A7],implicitevidence$432:kantan.csv.CellDecoder[A8],implicitevidence$433:kantan.csv.CellDecoder[A9],implicitevidence$434:kantan.csv.CellDecoder[A10],implicitevidence$435:kantan.csv.CellDecoder[A11],implicitevidence$436:kantan.csv.CellDecoder[A12],implicitevidence$437:kantan.csv.CellDecoder[A13],implicitevidence$438:kantan.csv.CellDecoder[A14],implicitevidence$439:kantan.csv.CellDecoder[A15],implicitevidence$440:kantan.csv.CellDecoder[A16],implicitevidence$441:kantan.csv.CellDecoder[A17],implicitevidence$442:kantan.csv.CellDecoder[A18],implicitevidence$443:kantan.csv.CellDecoder[A19]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>R)(implicitevidence$407:kantan.csv.CellDecoder[A1],implicitevidence$408:kantan.csv.CellDecoder[A2],implicitevidence$409:kantan.csv.CellDecoder[A3],implicitevidence$410:kantan.csv.CellDecoder[A4],implicitevidence$411:kantan.csv.CellDecoder[A5],implicitevidence$412:kantan.csv.CellDecoder[A6],implicitevidence$413:kantan.csv.CellDecoder[A7],implicitevidence$414:kantan.csv.CellDecoder[A8],implicitevidence$415:kantan.csv.CellDecoder[A9],implicitevidence$416:kantan.csv.CellDecoder[A10],implicitevidence$417:kantan.csv.CellDecoder[A11],implicitevidence$418:kantan.csv.CellDecoder[A12],implicitevidence$419:kantan.csv.CellDecoder[A13],implicitevidence$420:kantan.csv.CellDecoder[A14],implicitevidence$421:kantan.csv.CellDecoder[A15],implicitevidence$422:kantan.csv.CellDecoder[A16],implicitevidence$423:kantan.csv.CellDecoder[A17],implicitevidence$424:kantan.csv.CellDecoder[A18]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>R)(implicitevidence$390:kantan.csv.CellDecoder[A1],implicitevidence$391:kantan.csv.CellDecoder[A2],implicitevidence$392:kantan.csv.CellDecoder[A3],implicitevidence$393:kantan.csv.CellDecoder[A4],implicitevidence$394:kantan.csv.CellDecoder[A5],implicitevidence$395:kantan.csv.CellDecoder[A6],implicitevidence$396:kantan.csv.CellDecoder[A7],implicitevidence$397:kantan.csv.CellDecoder[A8],implicitevidence$398:kantan.csv.CellDecoder[A9],implicitevidence$399:kantan.csv.CellDecoder[A10],implicitevidence$400:kantan.csv.CellDecoder[A11],implicitevidence$401:kantan.csv.CellDecoder[A12],implicitevidence$402:kantan.csv.CellDecoder[A13],implicitevidence$403:kantan.csv.CellDecoder[A14],implicitevidence$404:kantan.csv.CellDecoder[A15],implicitevidence$405:kantan.csv.CellDecoder[A16],implicitevidence$406:kantan.csv.CellDecoder[A17]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>R)(implicitevidence$374:kantan.csv.CellDecoder[A1],implicitevidence$375:kantan.csv.CellDecoder[A2],implicitevidence$376:kantan.csv.CellDecoder[A3],implicitevidence$377:kantan.csv.CellDecoder[A4],implicitevidence$378:kantan.csv.CellDecoder[A5],implicitevidence$379:kantan.csv.CellDecoder[A6],implicitevidence$380:kantan.csv.CellDecoder[A7],implicitevidence$381:kantan.csv.CellDecoder[A8],implicitevidence$382:kantan.csv.CellDecoder[A9],implicitevidence$383:kantan.csv.CellDecoder[A10],implicitevidence$384:kantan.csv.CellDecoder[A11],implicitevidence$385:kantan.csv.CellDecoder[A12],implicitevidence$386:kantan.csv.CellDecoder[A13],implicitevidence$387:kantan.csv.CellDecoder[A14],implicitevidence$388:kantan.csv.CellDecoder[A15],implicitevidence$389:kantan.csv.CellDecoder[A16]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>R)(implicitevidence$359:kantan.csv.CellDecoder[A1],implicitevidence$360:kantan.csv.CellDecoder[A2],implicitevidence$361:kantan.csv.CellDecoder[A3],implicitevidence$362:kantan.csv.CellDecoder[A4],implicitevidence$363:kantan.csv.CellDecoder[A5],implicitevidence$364:kantan.csv.CellDecoder[A6],implicitevidence$365:kantan.csv.CellDecoder[A7],implicitevidence$366:kantan.csv.CellDecoder[A8],implicitevidence$367:kantan.csv.CellDecoder[A9],implicitevidence$368:kantan.csv.CellDecoder[A10],implicitevidence$369:kantan.csv.CellDecoder[A11],implicitevidence$370:kantan.csv.CellDecoder[A12],implicitevidence$371:kantan.csv.CellDecoder[A13],implicitevidence$372:kantan.csv.CellDecoder[A14],implicitevidence$373:kantan.csv.CellDecoder[A15]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>R)(implicitevidence$345:kantan.csv.CellDecoder[A1],implicitevidence$346:kantan.csv.CellDecoder[A2],implicitevidence$347:kantan.csv.CellDecoder[A3],implicitevidence$348:kantan.csv.CellDecoder[A4],implicitevidence$349:kantan.csv.CellDecoder[A5],implicitevidence$350:kantan.csv.CellDecoder[A6],implicitevidence$351:kantan.csv.CellDecoder[A7],implicitevidence$352:kantan.csv.CellDecoder[A8],implicitevidence$353:kantan.csv.CellDecoder[A9],implicitevidence$354:kantan.csv.CellDecoder[A10],implicitevidence$355:kantan.csv.CellDecoder[A11],implicitevidence$356:kantan.csv.CellDecoder[A12],implicitevidence$357:kantan.csv.CellDecoder[A13],implicitevidence$358:kantan.csv.CellDecoder[A14]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>R)(implicitevidence$332:kantan.csv.CellDecoder[A1],implicitevidence$333:kantan.csv.CellDecoder[A2],implicitevidence$334:kantan.csv.CellDecoder[A3],implicitevidence$335:kantan.csv.CellDecoder[A4],implicitevidence$336:kantan.csv.CellDecoder[A5],implicitevidence$337:kantan.csv.CellDecoder[A6],implicitevidence$338:kantan.csv.CellDecoder[A7],implicitevidence$339:kantan.csv.CellDecoder[A8],implicitevidence$340:kantan.csv.CellDecoder[A9],implicitevidence$341:kantan.csv.CellDecoder[A10],implicitevidence$342:kantan.csv.CellDecoder[A11],implicitevidence$343:kantan.csv.CellDecoder[A12],implicitevidence$344:kantan.csv.CellDecoder[A13]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>R)(implicitevidence$320:kantan.csv.CellDecoder[A1],implicitevidence$321:kantan.csv.CellDecoder[A2],implicitevidence$322:kantan.csv.CellDecoder[A3],implicitevidence$323:kantan.csv.CellDecoder[A4],implicitevidence$324:kantan.csv.CellDecoder[A5],implicitevidence$325:kantan.csv.CellDecoder[A6],implicitevidence$326:kantan.csv.CellDecoder[A7],implicitevidence$327:kantan.csv.CellDecoder[A8],implicitevidence$328:kantan.csv.CellDecoder[A9],implicitevidence$329:kantan.csv.CellDecoder[A10],implicitevidence$330:kantan.csv.CellDecoder[A11],implicitevidence$331:kantan.csv.CellDecoder[A12]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>R)(implicitevidence$309:kantan.csv.CellDecoder[A1],implicitevidence$310:kantan.csv.CellDecoder[A2],implicitevidence$311:kantan.csv.CellDecoder[A3],implicitevidence$312:kantan.csv.CellDecoder[A4],implicitevidence$313:kantan.csv.CellDecoder[A5],implicitevidence$314:kantan.csv.CellDecoder[A6],implicitevidence$315:kantan.csv.CellDecoder[A7],implicitevidence$316:kantan.csv.CellDecoder[A8],implicitevidence$317:kantan.csv.CellDecoder[A9],implicitevidence$318:kantan.csv.CellDecoder[A10],implicitevidence$319:kantan.csv.CellDecoder[A11]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>R)(implicitevidence$299:kantan.csv.CellDecoder[A1],implicitevidence$300:kantan.csv.CellDecoder[A2],implicitevidence$301:kantan.csv.CellDecoder[A3],implicitevidence$302:kantan.csv.CellDecoder[A4],implicitevidence$303:kantan.csv.CellDecoder[A5],implicitevidence$304:kantan.csv.CellDecoder[A6],implicitevidence$305:kantan.csv.CellDecoder[A7],implicitevidence$306:kantan.csv.CellDecoder[A8],implicitevidence$307:kantan.csv.CellDecoder[A9],implicitevidence$308:kantan.csv.CellDecoder[A10]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,R](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>R)(implicitevidence$290:kantan.csv.CellDecoder[A1],implicitevidence$291:kantan.csv.CellDecoder[A2],implicitevidence$292:kantan.csv.CellDecoder[A3],implicitevidence$293:kantan.csv.CellDecoder[A4],implicitevidence$294:kantan.csv.CellDecoder[A5],implicitevidence$295:kantan.csv.CellDecoder[A6],implicitevidence$296:kantan.csv.CellDecoder[A7],implicitevidence$297:kantan.csv.CellDecoder[A8],implicitevidence$298:kantan.csv.CellDecoder[A9]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,R](f:(A1,A2,A3,A4,A5,A6,A7,A8)=>R)(implicitevidence$282:kantan.csv.CellDecoder[A1],implicitevidence$283:kantan.csv.CellDecoder[A2],implicitevidence$284:kantan.csv.CellDecoder[A3],implicitevidence$285:kantan.csv.CellDecoder[A4],implicitevidence$286:kantan.csv.CellDecoder[A5],implicitevidence$287:kantan.csv.CellDecoder[A6],implicitevidence$288:kantan.csv.CellDecoder[A7],implicitevidence$289:kantan.csv.CellDecoder[A8]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,R](f:(A1,A2,A3,A4,A5,A6,A7)=>R)(implicitevidence$275:kantan.csv.CellDecoder[A1],implicitevidence$276:kantan.csv.CellDecoder[A2],implicitevidence$277:kantan.csv.CellDecoder[A3],implicitevidence$278:kantan.csv.CellDecoder[A4],implicitevidence$279:kantan.csv.CellDecoder[A5],implicitevidence$280:kantan.csv.CellDecoder[A6],implicitevidence$281:kantan.csv.CellDecoder[A7]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,R](f:(A1,A2,A3,A4,A5,A6)=>R)(implicitevidence$269:kantan.csv.CellDecoder[A1],implicitevidence$270:kantan.csv.CellDecoder[A2],implicitevidence$271:kantan.csv.CellDecoder[A3],implicitevidence$272:kantan.csv.CellDecoder[A4],implicitevidence$273:kantan.csv.CellDecoder[A5],implicitevidence$274:kantan.csv.CellDecoder[A6]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,A5,R](f:(A1,A2,A3,A4,A5)=>R)(implicitevidence$264:kantan.csv.CellDecoder[A1],implicitevidence$265:kantan.csv.CellDecoder[A2],implicitevidence$266:kantan.csv.CellDecoder[A3],implicitevidence$267:kantan.csv.CellDecoder[A4],implicitevidence$268:kantan.csv.CellDecoder[A5]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,A4,R](f:(A1,A2,A3,A4)=>R)(implicitevidence$260:kantan.csv.CellDecoder[A1],implicitevidence$261:kantan.csv.CellDecoder[A2],implicitevidence$262:kantan.csv.CellDecoder[A3],implicitevidence$263:kantan.csv.CellDecoder[A4]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,A3,R](f:(A1,A2,A3)=>R)(implicitevidence$257:kantan.csv.CellDecoder[A1],implicitevidence$258:kantan.csv.CellDecoder[A2],implicitevidence$259:kantan.csv.CellDecoder[A3]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,A2,R](f:(A1,A2)=>R)(implicitevidence$255:kantan.csv.CellDecoder[A1],implicitevidence$256:kantan.csv.CellDecoder[A2]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1) => R)(arg0: CellDecoder[A1]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.ordered", "link" : "kantan\/csv\/RowDecoder$.html#ordered[A1,R](f:A1=>R)(implicitevidence$254:kantan.csv.CellDecoder[A1]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21], arg21: CellDecoder[A22]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>R)(implicitevidence$232:kantan.csv.CellDecoder[A1],implicitevidence$233:kantan.csv.CellDecoder[A2],implicitevidence$234:kantan.csv.CellDecoder[A3],implicitevidence$235:kantan.csv.CellDecoder[A4],implicitevidence$236:kantan.csv.CellDecoder[A5],implicitevidence$237:kantan.csv.CellDecoder[A6],implicitevidence$238:kantan.csv.CellDecoder[A7],implicitevidence$239:kantan.csv.CellDecoder[A8],implicitevidence$240:kantan.csv.CellDecoder[A9],implicitevidence$241:kantan.csv.CellDecoder[A10],implicitevidence$242:kantan.csv.CellDecoder[A11],implicitevidence$243:kantan.csv.CellDecoder[A12],implicitevidence$244:kantan.csv.CellDecoder[A13],implicitevidence$245:kantan.csv.CellDecoder[A14],implicitevidence$246:kantan.csv.CellDecoder[A15],implicitevidence$247:kantan.csv.CellDecoder[A16],implicitevidence$248:kantan.csv.CellDecoder[A17],implicitevidence$249:kantan.csv.CellDecoder[A18],implicitevidence$250:kantan.csv.CellDecoder[A19],implicitevidence$251:kantan.csv.CellDecoder[A20],implicitevidence$252:kantan.csv.CellDecoder[A21],implicitevidence$253:kantan.csv.CellDecoder[A22]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>R)(implicitevidence$211:kantan.csv.CellDecoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A2],implicitevidence$213:kantan.csv.CellDecoder[A3],implicitevidence$214:kantan.csv.CellDecoder[A4],implicitevidence$215:kantan.csv.CellDecoder[A5],implicitevidence$216:kantan.csv.CellDecoder[A6],implicitevidence$217:kantan.csv.CellDecoder[A7],implicitevidence$218:kantan.csv.CellDecoder[A8],implicitevidence$219:kantan.csv.CellDecoder[A9],implicitevidence$220:kantan.csv.CellDecoder[A10],implicitevidence$221:kantan.csv.CellDecoder[A11],implicitevidence$222:kantan.csv.CellDecoder[A12],implicitevidence$223:kantan.csv.CellDecoder[A13],implicitevidence$224:kantan.csv.CellDecoder[A14],implicitevidence$225:kantan.csv.CellDecoder[A15],implicitevidence$226:kantan.csv.CellDecoder[A16],implicitevidence$227:kantan.csv.CellDecoder[A17],implicitevidence$228:kantan.csv.CellDecoder[A18],implicitevidence$229:kantan.csv.CellDecoder[A19],implicitevidence$230:kantan.csv.CellDecoder[A20],implicitevidence$231:kantan.csv.CellDecoder[A21]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>R)(implicitevidence$191:kantan.csv.CellDecoder[A1],implicitevidence$192:kantan.csv.CellDecoder[A2],implicitevidence$193:kantan.csv.CellDecoder[A3],implicitevidence$194:kantan.csv.CellDecoder[A4],implicitevidence$195:kantan.csv.CellDecoder[A5],implicitevidence$196:kantan.csv.CellDecoder[A6],implicitevidence$197:kantan.csv.CellDecoder[A7],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellDecoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A10],implicitevidence$201:kantan.csv.CellDecoder[A11],implicitevidence$202:kantan.csv.CellDecoder[A12],implicitevidence$203:kantan.csv.CellDecoder[A13],implicitevidence$204:kantan.csv.CellDecoder[A14],implicitevidence$205:kantan.csv.CellDecoder[A15],implicitevidence$206:kantan.csv.CellDecoder[A16],implicitevidence$207:kantan.csv.CellDecoder[A17],implicitevidence$208:kantan.csv.CellDecoder[A18],implicitevidence$209:kantan.csv.CellDecoder[A19],implicitevidence$210:kantan.csv.CellDecoder[A20]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>R)(implicitevidence$172:kantan.csv.CellDecoder[A1],implicitevidence$173:kantan.csv.CellDecoder[A2],implicitevidence$174:kantan.csv.CellDecoder[A3],implicitevidence$175:kantan.csv.CellDecoder[A4],implicitevidence$176:kantan.csv.CellDecoder[A5],implicitevidence$177:kantan.csv.CellDecoder[A6],implicitevidence$178:kantan.csv.CellDecoder[A7],implicitevidence$179:kantan.csv.CellDecoder[A8],implicitevidence$180:kantan.csv.CellDecoder[A9],implicitevidence$181:kantan.csv.CellDecoder[A10],implicitevidence$182:kantan.csv.CellDecoder[A11],implicitevidence$183:kantan.csv.CellDecoder[A12],implicitevidence$184:kantan.csv.CellDecoder[A13],implicitevidence$185:kantan.csv.CellDecoder[A14],implicitevidence$186:kantan.csv.CellDecoder[A15],implicitevidence$187:kantan.csv.CellDecoder[A16],implicitevidence$188:kantan.csv.CellDecoder[A17],implicitevidence$189:kantan.csv.CellDecoder[A18],implicitevidence$190:kantan.csv.CellDecoder[A19]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>R)(implicitevidence$154:kantan.csv.CellDecoder[A1],implicitevidence$155:kantan.csv.CellDecoder[A2],implicitevidence$156:kantan.csv.CellDecoder[A3],implicitevidence$157:kantan.csv.CellDecoder[A4],implicitevidence$158:kantan.csv.CellDecoder[A5],implicitevidence$159:kantan.csv.CellDecoder[A6],implicitevidence$160:kantan.csv.CellDecoder[A7],implicitevidence$161:kantan.csv.CellDecoder[A8],implicitevidence$162:kantan.csv.CellDecoder[A9],implicitevidence$163:kantan.csv.CellDecoder[A10],implicitevidence$164:kantan.csv.CellDecoder[A11],implicitevidence$165:kantan.csv.CellDecoder[A12],implicitevidence$166:kantan.csv.CellDecoder[A13],implicitevidence$167:kantan.csv.CellDecoder[A14],implicitevidence$168:kantan.csv.CellDecoder[A15],implicitevidence$169:kantan.csv.CellDecoder[A16],implicitevidence$170:kantan.csv.CellDecoder[A17],implicitevidence$171:kantan.csv.CellDecoder[A18]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>R)(implicitevidence$137:kantan.csv.CellDecoder[A1],implicitevidence$138:kantan.csv.CellDecoder[A2],implicitevidence$139:kantan.csv.CellDecoder[A3],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellDecoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A6],implicitevidence$143:kantan.csv.CellDecoder[A7],implicitevidence$144:kantan.csv.CellDecoder[A8],implicitevidence$145:kantan.csv.CellDecoder[A9],implicitevidence$146:kantan.csv.CellDecoder[A10],implicitevidence$147:kantan.csv.CellDecoder[A11],implicitevidence$148:kantan.csv.CellDecoder[A12],implicitevidence$149:kantan.csv.CellDecoder[A13],implicitevidence$150:kantan.csv.CellDecoder[A14],implicitevidence$151:kantan.csv.CellDecoder[A15],implicitevidence$152:kantan.csv.CellDecoder[A16],implicitevidence$153:kantan.csv.CellDecoder[A17]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>R)(implicitevidence$121:kantan.csv.CellDecoder[A1],implicitevidence$122:kantan.csv.CellDecoder[A2],implicitevidence$123:kantan.csv.CellDecoder[A3],implicitevidence$124:kantan.csv.CellDecoder[A4],implicitevidence$125:kantan.csv.CellDecoder[A5],implicitevidence$126:kantan.csv.CellDecoder[A6],implicitevidence$127:kantan.csv.CellDecoder[A7],implicitevidence$128:kantan.csv.CellDecoder[A8],implicitevidence$129:kantan.csv.CellDecoder[A9],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellDecoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A12],implicitevidence$133:kantan.csv.CellDecoder[A13],implicitevidence$134:kantan.csv.CellDecoder[A14],implicitevidence$135:kantan.csv.CellDecoder[A15],implicitevidence$136:kantan.csv.CellDecoder[A16]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>R)(implicitevidence$106:kantan.csv.CellDecoder[A1],implicitevidence$107:kantan.csv.CellDecoder[A2],implicitevidence$108:kantan.csv.CellDecoder[A3],implicitevidence$109:kantan.csv.CellDecoder[A4],implicitevidence$110:kantan.csv.CellDecoder[A5],implicitevidence$111:kantan.csv.CellDecoder[A6],implicitevidence$112:kantan.csv.CellDecoder[A7],implicitevidence$113:kantan.csv.CellDecoder[A8],implicitevidence$114:kantan.csv.CellDecoder[A9],implicitevidence$115:kantan.csv.CellDecoder[A10],implicitevidence$116:kantan.csv.CellDecoder[A11],implicitevidence$117:kantan.csv.CellDecoder[A12],implicitevidence$118:kantan.csv.CellDecoder[A13],implicitevidence$119:kantan.csv.CellDecoder[A14],implicitevidence$120:kantan.csv.CellDecoder[A15]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>R)(implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellDecoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A3],implicitevidence$95:kantan.csv.CellDecoder[A4],implicitevidence$96:kantan.csv.CellDecoder[A5],implicitevidence$97:kantan.csv.CellDecoder[A6],implicitevidence$98:kantan.csv.CellDecoder[A7],implicitevidence$99:kantan.csv.CellDecoder[A8],implicitevidence$100:kantan.csv.CellDecoder[A9],implicitevidence$101:kantan.csv.CellDecoder[A10],implicitevidence$102:kantan.csv.CellDecoder[A11],implicitevidence$103:kantan.csv.CellDecoder[A12],implicitevidence$104:kantan.csv.CellDecoder[A13],implicitevidence$105:kantan.csv.CellDecoder[A14]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>R)(implicitevidence$79:kantan.csv.CellDecoder[A1],implicitevidence$80:kantan.csv.CellDecoder[A2],implicitevidence$81:kantan.csv.CellDecoder[A3],implicitevidence$82:kantan.csv.CellDecoder[A4],implicitevidence$83:kantan.csv.CellDecoder[A5],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellDecoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A8],implicitevidence$87:kantan.csv.CellDecoder[A9],implicitevidence$88:kantan.csv.CellDecoder[A10],implicitevidence$89:kantan.csv.CellDecoder[A11],implicitevidence$90:kantan.csv.CellDecoder[A12],implicitevidence$91:kantan.csv.CellDecoder[A13]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>R)(implicitevidence$67:kantan.csv.CellDecoder[A1],implicitevidence$68:kantan.csv.CellDecoder[A2],implicitevidence$69:kantan.csv.CellDecoder[A3],implicitevidence$70:kantan.csv.CellDecoder[A4],implicitevidence$71:kantan.csv.CellDecoder[A5],implicitevidence$72:kantan.csv.CellDecoder[A6],implicitevidence$73:kantan.csv.CellDecoder[A7],implicitevidence$74:kantan.csv.CellDecoder[A8],implicitevidence$75:kantan.csv.CellDecoder[A9],implicitevidence$76:kantan.csv.CellDecoder[A10],implicitevidence$77:kantan.csv.CellDecoder[A11],implicitevidence$78:kantan.csv.CellDecoder[A12]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>R)(implicitevidence$56:kantan.csv.CellDecoder[A1],implicitevidence$57:kantan.csv.CellDecoder[A2],implicitevidence$58:kantan.csv.CellDecoder[A3],implicitevidence$59:kantan.csv.CellDecoder[A4],implicitevidence$60:kantan.csv.CellDecoder[A5],implicitevidence$61:kantan.csv.CellDecoder[A6],implicitevidence$62:kantan.csv.CellDecoder[A7],implicitevidence$63:kantan.csv.CellDecoder[A8],implicitevidence$64:kantan.csv.CellDecoder[A9],implicitevidence$65:kantan.csv.CellDecoder[A10],implicitevidence$66:kantan.csv.CellDecoder[A11]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>R)(implicitevidence$46:kantan.csv.CellDecoder[A1],implicitevidence$47:kantan.csv.CellDecoder[A2],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellDecoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A5],implicitevidence$51:kantan.csv.CellDecoder[A6],implicitevidence$52:kantan.csv.CellDecoder[A7],implicitevidence$53:kantan.csv.CellDecoder[A8],implicitevidence$54:kantan.csv.CellDecoder[A9],implicitevidence$55:kantan.csv.CellDecoder[A10]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>R)(implicitevidence$37:kantan.csv.CellDecoder[A1],implicitevidence$38:kantan.csv.CellDecoder[A2],implicitevidence$39:kantan.csv.CellDecoder[A3],implicitevidence$40:kantan.csv.CellDecoder[A4],implicitevidence$41:kantan.csv.CellDecoder[A5],implicitevidence$42:kantan.csv.CellDecoder[A6],implicitevidence$43:kantan.csv.CellDecoder[A7],implicitevidence$44:kantan.csv.CellDecoder[A8],implicitevidence$45:kantan.csv.CellDecoder[A9]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>R)(implicitevidence$29:kantan.csv.CellDecoder[A1],implicitevidence$30:kantan.csv.CellDecoder[A2],implicitevidence$31:kantan.csv.CellDecoder[A3],implicitevidence$32:kantan.csv.CellDecoder[A4],implicitevidence$33:kantan.csv.CellDecoder[A5],implicitevidence$34:kantan.csv.CellDecoder[A6],implicitevidence$35:kantan.csv.CellDecoder[A7],implicitevidence$36:kantan.csv.CellDecoder[A8]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (A1, A2, A3, A4, A5, A6, A7) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:(A1,A2,A3,A4,A5,A6,A7)=>R)(implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellDecoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A3],implicitevidence$25:kantan.csv.CellDecoder[A4],implicitevidence$26:kantan.csv.CellDecoder[A5],implicitevidence$27:kantan.csv.CellDecoder[A6],implicitevidence$28:kantan.csv.CellDecoder[A7]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (A1, A2, A3, A4, A5, A6) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:(A1,A2,A3,A4,A5,A6)=>R)(implicitevidence$16:kantan.csv.CellDecoder[A1],implicitevidence$17:kantan.csv.CellDecoder[A2],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellDecoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A5],implicitevidence$21:kantan.csv.CellDecoder[A6]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (A1, A2, A3, A4, A5) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,A5,R](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:(A1,A2,A3,A4,A5)=>R)(implicitevidence$11:kantan.csv.CellDecoder[A1],implicitevidence$12:kantan.csv.CellDecoder[A2],implicitevidence$13:kantan.csv.CellDecoder[A3],implicitevidence$14:kantan.csv.CellDecoder[A4],implicitevidence$15:kantan.csv.CellDecoder[A5]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (A1, A2, A3, A4) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,A4,R](i1:Int,i2:Int,i3:Int,i4:Int)(f:(A1,A2,A3,A4)=>R)(implicitevidence$7:kantan.csv.CellDecoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A2],implicitevidence$9:kantan.csv.CellDecoder[A3],implicitevidence$10:kantan.csv.CellDecoder[A4]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (A1, A2, A3) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,A3,R](i1:Int,i2:Int,i3:Int)(f:(A1,A2,A3)=>R)(implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellDecoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A3]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int)(f: (A1, A2) => R)(arg0: CellDecoder[A1], arg1: CellDecoder[A2]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,A2,R](i1:Int,i2:Int)(f:(A1,A2)=>R)(implicitevidence$2:kantan.csv.CellDecoder[A1],implicitevidence$3:kantan.csv.CellDecoder[A2]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int)(f: (A1) => R)(arg0: CellDecoder[A1]): RowDecoder[R]", "member" : "kantan.csv.GeneratedRowDecoders.decoder", "link" : "kantan\/csv\/RowDecoder$.html#decoder[A1,R](i1:Int)(f:A1=>R)(implicitevidence$1:kantan.csv.CellDecoder[A1]):kantan.csv.RowDecoder[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/RowDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/RowDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/RowDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/RowDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/RowDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/RowDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/RowDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/RowDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/RowDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/RowDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/RowDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/RowDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/RowDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/RowDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/RowDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/RowDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/csv\/package$$RowDecoder.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/csv\/package$$RowDecoder.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Decoder[E, D, F, TT]", "member" : "kantan.codecs.Decoder.tag", "link" : "kantan\/csv\/package$$RowDecoder.html#tag[TT]:kantan.codecs.Decoder[E,D,F,TT]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/csv\/package$$RowDecoder.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.leftMap", "link" : "kantan\/csv\/package$$RowDecoder.html#leftMap[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.mapError", "link" : "kantan\/csv\/package$$RowDecoder.html#mapError[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/csv\/package$$RowDecoder.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/csv\/package$$RowDecoder.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/csv\/package$$RowDecoder.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/csv\/package$$RowDecoder.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/csv\/package$$RowDecoder.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/csv\/package$$RowDecoder.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/csv\/package$$RowDecoder.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/csv\/package$$RowDecoder.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/csv\/package$$RowDecoder.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/csv\/package$$RowDecoder.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/csv\/package$$RowDecoder.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$RowDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$RowDecoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$RowDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$RowDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$RowDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$RowDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$RowDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$RowDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$RowDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$RowDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$RowDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$RowDecoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$RowDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$RowDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$RowDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$RowDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/csv\/package$$RowDecoder.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$RowDecoder.html"}, {"name" : "kantan.csv.RowDecoderInstances", "trait" : "kantan\/csv\/RowDecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "hasBuilderRowDecoder", "tail" : "(arg0: CellDecoder[A], hb: Factory[A, F[A]]): RowDecoder[F[A]]", "member" : "kantan.csv.RowDecoderInstances.hasBuilderRowDecoder", "link" : "kantan\/csv\/RowDecoderInstances.html#hasBuilderRowDecoder[A,F[_]](implicitevidence$4:kantan.csv.CellDecoder[A],implicithb:kantan.codecs.collection.Factory[A,F[A]]):kantan.csv.RowDecoder[F[A]]", "kind" : "implicit def"}, {"label" : "fromCellDecoder", "tail" : "(arg0: CellDecoder[A]): RowDecoder[A]", "member" : "kantan.csv.RowDecoderInstances.fromCellDecoder", "link" : "kantan\/csv\/RowDecoderInstances.html#fromCellDecoder[A](implicitevidence$3:kantan.csv.CellDecoder[A]):kantan.csv.RowDecoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/RowDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/RowDecoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/RowDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/RowDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/RowDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/RowDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/RowDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/RowDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/RowDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/RowDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/RowDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/RowDecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/RowDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/RowDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/RowDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/RowDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides reasonable default RowDecoder instances for various types."}, {"name" : "kantan.csv.RowEncoder", "shortDescription" : "Provides various instance creation and summoning methods.", "object" : "kantan\/csv\/RowEncoder$.html", "members_object" : [{"label" : "from", "tail" : "(f: (D) => Seq[String]): Encoder[Seq[String], D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.from", "link" : "kantan\/csv\/RowEncoder$.html#from[D](f:D=>E):kantan.codecs.Encoder[E,D,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Encoder[Seq[String], D, codecs.type]): Encoder[Seq[String], D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.apply", "link" : "kantan\/csv\/RowEncoder$.html#apply[D](implicitev:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "macro def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$991:kantan.csv.CellEncoder[A1],implicitevidence$992:kantan.csv.CellEncoder[A2],implicitevidence$993:kantan.csv.CellEncoder[A3],implicitevidence$994:kantan.csv.CellEncoder[A4],implicitevidence$995:kantan.csv.CellEncoder[A5],implicitevidence$996:kantan.csv.CellEncoder[A6],implicitevidence$997:kantan.csv.CellEncoder[A7],implicitevidence$998:kantan.csv.CellEncoder[A8],implicitevidence$999:kantan.csv.CellEncoder[A9],implicitevidence$1000:kantan.csv.CellEncoder[A10],implicitevidence$1001:kantan.csv.CellEncoder[A11],implicitevidence$1002:kantan.csv.CellEncoder[A12],implicitevidence$1003:kantan.csv.CellEncoder[A13],implicitevidence$1004:kantan.csv.CellEncoder[A14],implicitevidence$1005:kantan.csv.CellEncoder[A15],implicitevidence$1006:kantan.csv.CellEncoder[A16],implicitevidence$1007:kantan.csv.CellEncoder[A17],implicitevidence$1008:kantan.csv.CellEncoder[A18],implicitevidence$1009:kantan.csv.CellEncoder[A19],implicitevidence$1010:kantan.csv.CellEncoder[A20],implicitevidence$1011:kantan.csv.CellEncoder[A21],implicitevidence$1012:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$970:kantan.csv.CellEncoder[A1],implicitevidence$971:kantan.csv.CellEncoder[A2],implicitevidence$972:kantan.csv.CellEncoder[A3],implicitevidence$973:kantan.csv.CellEncoder[A4],implicitevidence$974:kantan.csv.CellEncoder[A5],implicitevidence$975:kantan.csv.CellEncoder[A6],implicitevidence$976:kantan.csv.CellEncoder[A7],implicitevidence$977:kantan.csv.CellEncoder[A8],implicitevidence$978:kantan.csv.CellEncoder[A9],implicitevidence$979:kantan.csv.CellEncoder[A10],implicitevidence$980:kantan.csv.CellEncoder[A11],implicitevidence$981:kantan.csv.CellEncoder[A12],implicitevidence$982:kantan.csv.CellEncoder[A13],implicitevidence$983:kantan.csv.CellEncoder[A14],implicitevidence$984:kantan.csv.CellEncoder[A15],implicitevidence$985:kantan.csv.CellEncoder[A16],implicitevidence$986:kantan.csv.CellEncoder[A17],implicitevidence$987:kantan.csv.CellEncoder[A18],implicitevidence$988:kantan.csv.CellEncoder[A19],implicitevidence$989:kantan.csv.CellEncoder[A20],implicitevidence$990:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$950:kantan.csv.CellEncoder[A1],implicitevidence$951:kantan.csv.CellEncoder[A2],implicitevidence$952:kantan.csv.CellEncoder[A3],implicitevidence$953:kantan.csv.CellEncoder[A4],implicitevidence$954:kantan.csv.CellEncoder[A5],implicitevidence$955:kantan.csv.CellEncoder[A6],implicitevidence$956:kantan.csv.CellEncoder[A7],implicitevidence$957:kantan.csv.CellEncoder[A8],implicitevidence$958:kantan.csv.CellEncoder[A9],implicitevidence$959:kantan.csv.CellEncoder[A10],implicitevidence$960:kantan.csv.CellEncoder[A11],implicitevidence$961:kantan.csv.CellEncoder[A12],implicitevidence$962:kantan.csv.CellEncoder[A13],implicitevidence$963:kantan.csv.CellEncoder[A14],implicitevidence$964:kantan.csv.CellEncoder[A15],implicitevidence$965:kantan.csv.CellEncoder[A16],implicitevidence$966:kantan.csv.CellEncoder[A17],implicitevidence$967:kantan.csv.CellEncoder[A18],implicitevidence$968:kantan.csv.CellEncoder[A19],implicitevidence$969:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$931:kantan.csv.CellEncoder[A1],implicitevidence$932:kantan.csv.CellEncoder[A2],implicitevidence$933:kantan.csv.CellEncoder[A3],implicitevidence$934:kantan.csv.CellEncoder[A4],implicitevidence$935:kantan.csv.CellEncoder[A5],implicitevidence$936:kantan.csv.CellEncoder[A6],implicitevidence$937:kantan.csv.CellEncoder[A7],implicitevidence$938:kantan.csv.CellEncoder[A8],implicitevidence$939:kantan.csv.CellEncoder[A9],implicitevidence$940:kantan.csv.CellEncoder[A10],implicitevidence$941:kantan.csv.CellEncoder[A11],implicitevidence$942:kantan.csv.CellEncoder[A12],implicitevidence$943:kantan.csv.CellEncoder[A13],implicitevidence$944:kantan.csv.CellEncoder[A14],implicitevidence$945:kantan.csv.CellEncoder[A15],implicitevidence$946:kantan.csv.CellEncoder[A16],implicitevidence$947:kantan.csv.CellEncoder[A17],implicitevidence$948:kantan.csv.CellEncoder[A18],implicitevidence$949:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$913:kantan.csv.CellEncoder[A1],implicitevidence$914:kantan.csv.CellEncoder[A2],implicitevidence$915:kantan.csv.CellEncoder[A3],implicitevidence$916:kantan.csv.CellEncoder[A4],implicitevidence$917:kantan.csv.CellEncoder[A5],implicitevidence$918:kantan.csv.CellEncoder[A6],implicitevidence$919:kantan.csv.CellEncoder[A7],implicitevidence$920:kantan.csv.CellEncoder[A8],implicitevidence$921:kantan.csv.CellEncoder[A9],implicitevidence$922:kantan.csv.CellEncoder[A10],implicitevidence$923:kantan.csv.CellEncoder[A11],implicitevidence$924:kantan.csv.CellEncoder[A12],implicitevidence$925:kantan.csv.CellEncoder[A13],implicitevidence$926:kantan.csv.CellEncoder[A14],implicitevidence$927:kantan.csv.CellEncoder[A15],implicitevidence$928:kantan.csv.CellEncoder[A16],implicitevidence$929:kantan.csv.CellEncoder[A17],implicitevidence$930:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$896:kantan.csv.CellEncoder[A1],implicitevidence$897:kantan.csv.CellEncoder[A2],implicitevidence$898:kantan.csv.CellEncoder[A3],implicitevidence$899:kantan.csv.CellEncoder[A4],implicitevidence$900:kantan.csv.CellEncoder[A5],implicitevidence$901:kantan.csv.CellEncoder[A6],implicitevidence$902:kantan.csv.CellEncoder[A7],implicitevidence$903:kantan.csv.CellEncoder[A8],implicitevidence$904:kantan.csv.CellEncoder[A9],implicitevidence$905:kantan.csv.CellEncoder[A10],implicitevidence$906:kantan.csv.CellEncoder[A11],implicitevidence$907:kantan.csv.CellEncoder[A12],implicitevidence$908:kantan.csv.CellEncoder[A13],implicitevidence$909:kantan.csv.CellEncoder[A14],implicitevidence$910:kantan.csv.CellEncoder[A15],implicitevidence$911:kantan.csv.CellEncoder[A16],implicitevidence$912:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$880:kantan.csv.CellEncoder[A1],implicitevidence$881:kantan.csv.CellEncoder[A2],implicitevidence$882:kantan.csv.CellEncoder[A3],implicitevidence$883:kantan.csv.CellEncoder[A4],implicitevidence$884:kantan.csv.CellEncoder[A5],implicitevidence$885:kantan.csv.CellEncoder[A6],implicitevidence$886:kantan.csv.CellEncoder[A7],implicitevidence$887:kantan.csv.CellEncoder[A8],implicitevidence$888:kantan.csv.CellEncoder[A9],implicitevidence$889:kantan.csv.CellEncoder[A10],implicitevidence$890:kantan.csv.CellEncoder[A11],implicitevidence$891:kantan.csv.CellEncoder[A12],implicitevidence$892:kantan.csv.CellEncoder[A13],implicitevidence$893:kantan.csv.CellEncoder[A14],implicitevidence$894:kantan.csv.CellEncoder[A15],implicitevidence$895:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$865:kantan.csv.CellEncoder[A1],implicitevidence$866:kantan.csv.CellEncoder[A2],implicitevidence$867:kantan.csv.CellEncoder[A3],implicitevidence$868:kantan.csv.CellEncoder[A4],implicitevidence$869:kantan.csv.CellEncoder[A5],implicitevidence$870:kantan.csv.CellEncoder[A6],implicitevidence$871:kantan.csv.CellEncoder[A7],implicitevidence$872:kantan.csv.CellEncoder[A8],implicitevidence$873:kantan.csv.CellEncoder[A9],implicitevidence$874:kantan.csv.CellEncoder[A10],implicitevidence$875:kantan.csv.CellEncoder[A11],implicitevidence$876:kantan.csv.CellEncoder[A12],implicitevidence$877:kantan.csv.CellEncoder[A13],implicitevidence$878:kantan.csv.CellEncoder[A14],implicitevidence$879:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$851:kantan.csv.CellEncoder[A1],implicitevidence$852:kantan.csv.CellEncoder[A2],implicitevidence$853:kantan.csv.CellEncoder[A3],implicitevidence$854:kantan.csv.CellEncoder[A4],implicitevidence$855:kantan.csv.CellEncoder[A5],implicitevidence$856:kantan.csv.CellEncoder[A6],implicitevidence$857:kantan.csv.CellEncoder[A7],implicitevidence$858:kantan.csv.CellEncoder[A8],implicitevidence$859:kantan.csv.CellEncoder[A9],implicitevidence$860:kantan.csv.CellEncoder[A10],implicitevidence$861:kantan.csv.CellEncoder[A11],implicitevidence$862:kantan.csv.CellEncoder[A12],implicitevidence$863:kantan.csv.CellEncoder[A13],implicitevidence$864:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$838:kantan.csv.CellEncoder[A1],implicitevidence$839:kantan.csv.CellEncoder[A2],implicitevidence$840:kantan.csv.CellEncoder[A3],implicitevidence$841:kantan.csv.CellEncoder[A4],implicitevidence$842:kantan.csv.CellEncoder[A5],implicitevidence$843:kantan.csv.CellEncoder[A6],implicitevidence$844:kantan.csv.CellEncoder[A7],implicitevidence$845:kantan.csv.CellEncoder[A8],implicitevidence$846:kantan.csv.CellEncoder[A9],implicitevidence$847:kantan.csv.CellEncoder[A10],implicitevidence$848:kantan.csv.CellEncoder[A11],implicitevidence$849:kantan.csv.CellEncoder[A12],implicitevidence$850:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$826:kantan.csv.CellEncoder[A1],implicitevidence$827:kantan.csv.CellEncoder[A2],implicitevidence$828:kantan.csv.CellEncoder[A3],implicitevidence$829:kantan.csv.CellEncoder[A4],implicitevidence$830:kantan.csv.CellEncoder[A5],implicitevidence$831:kantan.csv.CellEncoder[A6],implicitevidence$832:kantan.csv.CellEncoder[A7],implicitevidence$833:kantan.csv.CellEncoder[A8],implicitevidence$834:kantan.csv.CellEncoder[A9],implicitevidence$835:kantan.csv.CellEncoder[A10],implicitevidence$836:kantan.csv.CellEncoder[A11],implicitevidence$837:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$815:kantan.csv.CellEncoder[A1],implicitevidence$816:kantan.csv.CellEncoder[A2],implicitevidence$817:kantan.csv.CellEncoder[A3],implicitevidence$818:kantan.csv.CellEncoder[A4],implicitevidence$819:kantan.csv.CellEncoder[A5],implicitevidence$820:kantan.csv.CellEncoder[A6],implicitevidence$821:kantan.csv.CellEncoder[A7],implicitevidence$822:kantan.csv.CellEncoder[A8],implicitevidence$823:kantan.csv.CellEncoder[A9],implicitevidence$824:kantan.csv.CellEncoder[A10],implicitevidence$825:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$805:kantan.csv.CellEncoder[A1],implicitevidence$806:kantan.csv.CellEncoder[A2],implicitevidence$807:kantan.csv.CellEncoder[A3],implicitevidence$808:kantan.csv.CellEncoder[A4],implicitevidence$809:kantan.csv.CellEncoder[A5],implicitevidence$810:kantan.csv.CellEncoder[A6],implicitevidence$811:kantan.csv.CellEncoder[A7],implicitevidence$812:kantan.csv.CellEncoder[A8],implicitevidence$813:kantan.csv.CellEncoder[A9],implicitevidence$814:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$796:kantan.csv.CellEncoder[A1],implicitevidence$797:kantan.csv.CellEncoder[A2],implicitevidence$798:kantan.csv.CellEncoder[A3],implicitevidence$799:kantan.csv.CellEncoder[A4],implicitevidence$800:kantan.csv.CellEncoder[A5],implicitevidence$801:kantan.csv.CellEncoder[A6],implicitevidence$802:kantan.csv.CellEncoder[A7],implicitevidence$803:kantan.csv.CellEncoder[A8],implicitevidence$804:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7,A8](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$788:kantan.csv.CellEncoder[A1],implicitevidence$789:kantan.csv.CellEncoder[A2],implicitevidence$790:kantan.csv.CellEncoder[A3],implicitevidence$791:kantan.csv.CellEncoder[A4],implicitevidence$792:kantan.csv.CellEncoder[A5],implicitevidence$793:kantan.csv.CellEncoder[A6],implicitevidence$794:kantan.csv.CellEncoder[A7],implicitevidence$795:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6,A7](f:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$781:kantan.csv.CellEncoder[A1],implicitevidence$782:kantan.csv.CellEncoder[A2],implicitevidence$783:kantan.csv.CellEncoder[A3],implicitevidence$784:kantan.csv.CellEncoder[A4],implicitevidence$785:kantan.csv.CellEncoder[A5],implicitevidence$786:kantan.csv.CellEncoder[A6],implicitevidence$787:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5,A6](f:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$775:kantan.csv.CellEncoder[A1],implicitevidence$776:kantan.csv.CellEncoder[A2],implicitevidence$777:kantan.csv.CellEncoder[A3],implicitevidence$778:kantan.csv.CellEncoder[A4],implicitevidence$779:kantan.csv.CellEncoder[A5],implicitevidence$780:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4,A5](f:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$770:kantan.csv.CellEncoder[A1],implicitevidence$771:kantan.csv.CellEncoder[A2],implicitevidence$772:kantan.csv.CellEncoder[A3],implicitevidence$773:kantan.csv.CellEncoder[A4],implicitevidence$774:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3,A4](f:C=>Option[(A1,A2,A3,A4)])(implicitevidence$766:kantan.csv.CellEncoder[A1],implicitevidence$767:kantan.csv.CellEncoder[A2],implicitevidence$768:kantan.csv.CellEncoder[A3],implicitevidence$769:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2,A3](f:C=>Option[(A1,A2,A3)])(implicitevidence$763:kantan.csv.CellEncoder[A1],implicitevidence$764:kantan.csv.CellEncoder[A2],implicitevidence$765:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1,A2](f:C=>Option[(A1,A2)])(implicitevidence$761:kantan.csv.CellEncoder[A1],implicitevidence$762:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseOrdered", "tail" : "(f: (C) => Option[A1])(arg0: CellEncoder[A1]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseOrdered", "link" : "kantan\/csv\/RowEncoder$.html#caseOrdered[C,A1](f:C=>Option[A1])(implicitevidence$760:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$738:kantan.csv.CellEncoder[A1],implicitevidence$739:kantan.csv.CellEncoder[A2],implicitevidence$740:kantan.csv.CellEncoder[A3],implicitevidence$741:kantan.csv.CellEncoder[A4],implicitevidence$742:kantan.csv.CellEncoder[A5],implicitevidence$743:kantan.csv.CellEncoder[A6],implicitevidence$744:kantan.csv.CellEncoder[A7],implicitevidence$745:kantan.csv.CellEncoder[A8],implicitevidence$746:kantan.csv.CellEncoder[A9],implicitevidence$747:kantan.csv.CellEncoder[A10],implicitevidence$748:kantan.csv.CellEncoder[A11],implicitevidence$749:kantan.csv.CellEncoder[A12],implicitevidence$750:kantan.csv.CellEncoder[A13],implicitevidence$751:kantan.csv.CellEncoder[A14],implicitevidence$752:kantan.csv.CellEncoder[A15],implicitevidence$753:kantan.csv.CellEncoder[A16],implicitevidence$754:kantan.csv.CellEncoder[A17],implicitevidence$755:kantan.csv.CellEncoder[A18],implicitevidence$756:kantan.csv.CellEncoder[A19],implicitevidence$757:kantan.csv.CellEncoder[A20],implicitevidence$758:kantan.csv.CellEncoder[A21],implicitevidence$759:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$717:kantan.csv.CellEncoder[A1],implicitevidence$718:kantan.csv.CellEncoder[A2],implicitevidence$719:kantan.csv.CellEncoder[A3],implicitevidence$720:kantan.csv.CellEncoder[A4],implicitevidence$721:kantan.csv.CellEncoder[A5],implicitevidence$722:kantan.csv.CellEncoder[A6],implicitevidence$723:kantan.csv.CellEncoder[A7],implicitevidence$724:kantan.csv.CellEncoder[A8],implicitevidence$725:kantan.csv.CellEncoder[A9],implicitevidence$726:kantan.csv.CellEncoder[A10],implicitevidence$727:kantan.csv.CellEncoder[A11],implicitevidence$728:kantan.csv.CellEncoder[A12],implicitevidence$729:kantan.csv.CellEncoder[A13],implicitevidence$730:kantan.csv.CellEncoder[A14],implicitevidence$731:kantan.csv.CellEncoder[A15],implicitevidence$732:kantan.csv.CellEncoder[A16],implicitevidence$733:kantan.csv.CellEncoder[A17],implicitevidence$734:kantan.csv.CellEncoder[A18],implicitevidence$735:kantan.csv.CellEncoder[A19],implicitevidence$736:kantan.csv.CellEncoder[A20],implicitevidence$737:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$697:kantan.csv.CellEncoder[A1],implicitevidence$698:kantan.csv.CellEncoder[A2],implicitevidence$699:kantan.csv.CellEncoder[A3],implicitevidence$700:kantan.csv.CellEncoder[A4],implicitevidence$701:kantan.csv.CellEncoder[A5],implicitevidence$702:kantan.csv.CellEncoder[A6],implicitevidence$703:kantan.csv.CellEncoder[A7],implicitevidence$704:kantan.csv.CellEncoder[A8],implicitevidence$705:kantan.csv.CellEncoder[A9],implicitevidence$706:kantan.csv.CellEncoder[A10],implicitevidence$707:kantan.csv.CellEncoder[A11],implicitevidence$708:kantan.csv.CellEncoder[A12],implicitevidence$709:kantan.csv.CellEncoder[A13],implicitevidence$710:kantan.csv.CellEncoder[A14],implicitevidence$711:kantan.csv.CellEncoder[A15],implicitevidence$712:kantan.csv.CellEncoder[A16],implicitevidence$713:kantan.csv.CellEncoder[A17],implicitevidence$714:kantan.csv.CellEncoder[A18],implicitevidence$715:kantan.csv.CellEncoder[A19],implicitevidence$716:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$678:kantan.csv.CellEncoder[A1],implicitevidence$679:kantan.csv.CellEncoder[A2],implicitevidence$680:kantan.csv.CellEncoder[A3],implicitevidence$681:kantan.csv.CellEncoder[A4],implicitevidence$682:kantan.csv.CellEncoder[A5],implicitevidence$683:kantan.csv.CellEncoder[A6],implicitevidence$684:kantan.csv.CellEncoder[A7],implicitevidence$685:kantan.csv.CellEncoder[A8],implicitevidence$686:kantan.csv.CellEncoder[A9],implicitevidence$687:kantan.csv.CellEncoder[A10],implicitevidence$688:kantan.csv.CellEncoder[A11],implicitevidence$689:kantan.csv.CellEncoder[A12],implicitevidence$690:kantan.csv.CellEncoder[A13],implicitevidence$691:kantan.csv.CellEncoder[A14],implicitevidence$692:kantan.csv.CellEncoder[A15],implicitevidence$693:kantan.csv.CellEncoder[A16],implicitevidence$694:kantan.csv.CellEncoder[A17],implicitevidence$695:kantan.csv.CellEncoder[A18],implicitevidence$696:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$660:kantan.csv.CellEncoder[A1],implicitevidence$661:kantan.csv.CellEncoder[A2],implicitevidence$662:kantan.csv.CellEncoder[A3],implicitevidence$663:kantan.csv.CellEncoder[A4],implicitevidence$664:kantan.csv.CellEncoder[A5],implicitevidence$665:kantan.csv.CellEncoder[A6],implicitevidence$666:kantan.csv.CellEncoder[A7],implicitevidence$667:kantan.csv.CellEncoder[A8],implicitevidence$668:kantan.csv.CellEncoder[A9],implicitevidence$669:kantan.csv.CellEncoder[A10],implicitevidence$670:kantan.csv.CellEncoder[A11],implicitevidence$671:kantan.csv.CellEncoder[A12],implicitevidence$672:kantan.csv.CellEncoder[A13],implicitevidence$673:kantan.csv.CellEncoder[A14],implicitevidence$674:kantan.csv.CellEncoder[A15],implicitevidence$675:kantan.csv.CellEncoder[A16],implicitevidence$676:kantan.csv.CellEncoder[A17],implicitevidence$677:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$643:kantan.csv.CellEncoder[A1],implicitevidence$644:kantan.csv.CellEncoder[A2],implicitevidence$645:kantan.csv.CellEncoder[A3],implicitevidence$646:kantan.csv.CellEncoder[A4],implicitevidence$647:kantan.csv.CellEncoder[A5],implicitevidence$648:kantan.csv.CellEncoder[A6],implicitevidence$649:kantan.csv.CellEncoder[A7],implicitevidence$650:kantan.csv.CellEncoder[A8],implicitevidence$651:kantan.csv.CellEncoder[A9],implicitevidence$652:kantan.csv.CellEncoder[A10],implicitevidence$653:kantan.csv.CellEncoder[A11],implicitevidence$654:kantan.csv.CellEncoder[A12],implicitevidence$655:kantan.csv.CellEncoder[A13],implicitevidence$656:kantan.csv.CellEncoder[A14],implicitevidence$657:kantan.csv.CellEncoder[A15],implicitevidence$658:kantan.csv.CellEncoder[A16],implicitevidence$659:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$627:kantan.csv.CellEncoder[A1],implicitevidence$628:kantan.csv.CellEncoder[A2],implicitevidence$629:kantan.csv.CellEncoder[A3],implicitevidence$630:kantan.csv.CellEncoder[A4],implicitevidence$631:kantan.csv.CellEncoder[A5],implicitevidence$632:kantan.csv.CellEncoder[A6],implicitevidence$633:kantan.csv.CellEncoder[A7],implicitevidence$634:kantan.csv.CellEncoder[A8],implicitevidence$635:kantan.csv.CellEncoder[A9],implicitevidence$636:kantan.csv.CellEncoder[A10],implicitevidence$637:kantan.csv.CellEncoder[A11],implicitevidence$638:kantan.csv.CellEncoder[A12],implicitevidence$639:kantan.csv.CellEncoder[A13],implicitevidence$640:kantan.csv.CellEncoder[A14],implicitevidence$641:kantan.csv.CellEncoder[A15],implicitevidence$642:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$612:kantan.csv.CellEncoder[A1],implicitevidence$613:kantan.csv.CellEncoder[A2],implicitevidence$614:kantan.csv.CellEncoder[A3],implicitevidence$615:kantan.csv.CellEncoder[A4],implicitevidence$616:kantan.csv.CellEncoder[A5],implicitevidence$617:kantan.csv.CellEncoder[A6],implicitevidence$618:kantan.csv.CellEncoder[A7],implicitevidence$619:kantan.csv.CellEncoder[A8],implicitevidence$620:kantan.csv.CellEncoder[A9],implicitevidence$621:kantan.csv.CellEncoder[A10],implicitevidence$622:kantan.csv.CellEncoder[A11],implicitevidence$623:kantan.csv.CellEncoder[A12],implicitevidence$624:kantan.csv.CellEncoder[A13],implicitevidence$625:kantan.csv.CellEncoder[A14],implicitevidence$626:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$598:kantan.csv.CellEncoder[A1],implicitevidence$599:kantan.csv.CellEncoder[A2],implicitevidence$600:kantan.csv.CellEncoder[A3],implicitevidence$601:kantan.csv.CellEncoder[A4],implicitevidence$602:kantan.csv.CellEncoder[A5],implicitevidence$603:kantan.csv.CellEncoder[A6],implicitevidence$604:kantan.csv.CellEncoder[A7],implicitevidence$605:kantan.csv.CellEncoder[A8],implicitevidence$606:kantan.csv.CellEncoder[A9],implicitevidence$607:kantan.csv.CellEncoder[A10],implicitevidence$608:kantan.csv.CellEncoder[A11],implicitevidence$609:kantan.csv.CellEncoder[A12],implicitevidence$610:kantan.csv.CellEncoder[A13],implicitevidence$611:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$585:kantan.csv.CellEncoder[A1],implicitevidence$586:kantan.csv.CellEncoder[A2],implicitevidence$587:kantan.csv.CellEncoder[A3],implicitevidence$588:kantan.csv.CellEncoder[A4],implicitevidence$589:kantan.csv.CellEncoder[A5],implicitevidence$590:kantan.csv.CellEncoder[A6],implicitevidence$591:kantan.csv.CellEncoder[A7],implicitevidence$592:kantan.csv.CellEncoder[A8],implicitevidence$593:kantan.csv.CellEncoder[A9],implicitevidence$594:kantan.csv.CellEncoder[A10],implicitevidence$595:kantan.csv.CellEncoder[A11],implicitevidence$596:kantan.csv.CellEncoder[A12],implicitevidence$597:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$573:kantan.csv.CellEncoder[A1],implicitevidence$574:kantan.csv.CellEncoder[A2],implicitevidence$575:kantan.csv.CellEncoder[A3],implicitevidence$576:kantan.csv.CellEncoder[A4],implicitevidence$577:kantan.csv.CellEncoder[A5],implicitevidence$578:kantan.csv.CellEncoder[A6],implicitevidence$579:kantan.csv.CellEncoder[A7],implicitevidence$580:kantan.csv.CellEncoder[A8],implicitevidence$581:kantan.csv.CellEncoder[A9],implicitevidence$582:kantan.csv.CellEncoder[A10],implicitevidence$583:kantan.csv.CellEncoder[A11],implicitevidence$584:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$562:kantan.csv.CellEncoder[A1],implicitevidence$563:kantan.csv.CellEncoder[A2],implicitevidence$564:kantan.csv.CellEncoder[A3],implicitevidence$565:kantan.csv.CellEncoder[A4],implicitevidence$566:kantan.csv.CellEncoder[A5],implicitevidence$567:kantan.csv.CellEncoder[A6],implicitevidence$568:kantan.csv.CellEncoder[A7],implicitevidence$569:kantan.csv.CellEncoder[A8],implicitevidence$570:kantan.csv.CellEncoder[A9],implicitevidence$571:kantan.csv.CellEncoder[A10],implicitevidence$572:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$552:kantan.csv.CellEncoder[A1],implicitevidence$553:kantan.csv.CellEncoder[A2],implicitevidence$554:kantan.csv.CellEncoder[A3],implicitevidence$555:kantan.csv.CellEncoder[A4],implicitevidence$556:kantan.csv.CellEncoder[A5],implicitevidence$557:kantan.csv.CellEncoder[A6],implicitevidence$558:kantan.csv.CellEncoder[A7],implicitevidence$559:kantan.csv.CellEncoder[A8],implicitevidence$560:kantan.csv.CellEncoder[A9],implicitevidence$561:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$543:kantan.csv.CellEncoder[A1],implicitevidence$544:kantan.csv.CellEncoder[A2],implicitevidence$545:kantan.csv.CellEncoder[A3],implicitevidence$546:kantan.csv.CellEncoder[A4],implicitevidence$547:kantan.csv.CellEncoder[A5],implicitevidence$548:kantan.csv.CellEncoder[A6],implicitevidence$549:kantan.csv.CellEncoder[A7],implicitevidence$550:kantan.csv.CellEncoder[A8],implicitevidence$551:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$535:kantan.csv.CellEncoder[A1],implicitevidence$536:kantan.csv.CellEncoder[A2],implicitevidence$537:kantan.csv.CellEncoder[A3],implicitevidence$538:kantan.csv.CellEncoder[A4],implicitevidence$539:kantan.csv.CellEncoder[A5],implicitevidence$540:kantan.csv.CellEncoder[A6],implicitevidence$541:kantan.csv.CellEncoder[A7],implicitevidence$542:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$528:kantan.csv.CellEncoder[A1],implicitevidence$529:kantan.csv.CellEncoder[A2],implicitevidence$530:kantan.csv.CellEncoder[A3],implicitevidence$531:kantan.csv.CellEncoder[A4],implicitevidence$532:kantan.csv.CellEncoder[A5],implicitevidence$533:kantan.csv.CellEncoder[A6],implicitevidence$534:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (C) => Option[(A1, A2, A3, A4, A5, A6)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:C=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$522:kantan.csv.CellEncoder[A1],implicitevidence$523:kantan.csv.CellEncoder[A2],implicitevidence$524:kantan.csv.CellEncoder[A3],implicitevidence$525:kantan.csv.CellEncoder[A4],implicitevidence$526:kantan.csv.CellEncoder[A5],implicitevidence$527:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (C) => Option[(A1, A2, A3, A4, A5)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:C=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$517:kantan.csv.CellEncoder[A1],implicitevidence$518:kantan.csv.CellEncoder[A2],implicitevidence$519:kantan.csv.CellEncoder[A3],implicitevidence$520:kantan.csv.CellEncoder[A4],implicitevidence$521:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (C) => Option[(A1, A2, A3, A4)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(f:C=>Option[(A1,A2,A3,A4)])(implicitevidence$513:kantan.csv.CellEncoder[A1],implicitevidence$514:kantan.csv.CellEncoder[A2],implicitevidence$515:kantan.csv.CellEncoder[A3],implicitevidence$516:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (C) => Option[(A1, A2, A3)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2,A3](i1:Int,i2:Int,i3:Int)(f:C=>Option[(A1,A2,A3)])(implicitevidence$510:kantan.csv.CellEncoder[A1],implicitevidence$511:kantan.csv.CellEncoder[A2],implicitevidence$512:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(i1: Int, i2: Int)(f: (C) => Option[(A1, A2)])(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1,A2](i1:Int,i2:Int)(f:C=>Option[(A1,A2)])(implicitevidence$508:kantan.csv.CellEncoder[A1],implicitevidence$509:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(f: (C) => Option[A1])(arg0: CellEncoder[A1]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.caseEncoder", "link" : "kantan\/csv\/RowEncoder$.html#caseEncoder[C,A1](f:C=>Option[A1])(implicitevidence$507:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$485:kantan.csv.CellEncoder[A1],implicitevidence$486:kantan.csv.CellEncoder[A2],implicitevidence$487:kantan.csv.CellEncoder[A3],implicitevidence$488:kantan.csv.CellEncoder[A4],implicitevidence$489:kantan.csv.CellEncoder[A5],implicitevidence$490:kantan.csv.CellEncoder[A6],implicitevidence$491:kantan.csv.CellEncoder[A7],implicitevidence$492:kantan.csv.CellEncoder[A8],implicitevidence$493:kantan.csv.CellEncoder[A9],implicitevidence$494:kantan.csv.CellEncoder[A10],implicitevidence$495:kantan.csv.CellEncoder[A11],implicitevidence$496:kantan.csv.CellEncoder[A12],implicitevidence$497:kantan.csv.CellEncoder[A13],implicitevidence$498:kantan.csv.CellEncoder[A14],implicitevidence$499:kantan.csv.CellEncoder[A15],implicitevidence$500:kantan.csv.CellEncoder[A16],implicitevidence$501:kantan.csv.CellEncoder[A17],implicitevidence$502:kantan.csv.CellEncoder[A18],implicitevidence$503:kantan.csv.CellEncoder[A19],implicitevidence$504:kantan.csv.CellEncoder[A20],implicitevidence$505:kantan.csv.CellEncoder[A21],implicitevidence$506:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$464:kantan.csv.CellEncoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellEncoder[A3],implicitevidence$467:kantan.csv.CellEncoder[A4],implicitevidence$468:kantan.csv.CellEncoder[A5],implicitevidence$469:kantan.csv.CellEncoder[A6],implicitevidence$470:kantan.csv.CellEncoder[A7],implicitevidence$471:kantan.csv.CellEncoder[A8],implicitevidence$472:kantan.csv.CellEncoder[A9],implicitevidence$473:kantan.csv.CellEncoder[A10],implicitevidence$474:kantan.csv.CellEncoder[A11],implicitevidence$475:kantan.csv.CellEncoder[A12],implicitevidence$476:kantan.csv.CellEncoder[A13],implicitevidence$477:kantan.csv.CellEncoder[A14],implicitevidence$478:kantan.csv.CellEncoder[A15],implicitevidence$479:kantan.csv.CellEncoder[A16],implicitevidence$480:kantan.csv.CellEncoder[A17],implicitevidence$481:kantan.csv.CellEncoder[A18],implicitevidence$482:kantan.csv.CellEncoder[A19],implicitevidence$483:kantan.csv.CellEncoder[A20],implicitevidence$484:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$444:kantan.csv.CellEncoder[A1],implicitevidence$445:kantan.csv.CellEncoder[A2],implicitevidence$446:kantan.csv.CellEncoder[A3],implicitevidence$447:kantan.csv.CellEncoder[A4],implicitevidence$448:kantan.csv.CellEncoder[A5],implicitevidence$449:kantan.csv.CellEncoder[A6],implicitevidence$450:kantan.csv.CellEncoder[A7],implicitevidence$451:kantan.csv.CellEncoder[A8],implicitevidence$452:kantan.csv.CellEncoder[A9],implicitevidence$453:kantan.csv.CellEncoder[A10],implicitevidence$454:kantan.csv.CellEncoder[A11],implicitevidence$455:kantan.csv.CellEncoder[A12],implicitevidence$456:kantan.csv.CellEncoder[A13],implicitevidence$457:kantan.csv.CellEncoder[A14],implicitevidence$458:kantan.csv.CellEncoder[A15],implicitevidence$459:kantan.csv.CellEncoder[A16],implicitevidence$460:kantan.csv.CellEncoder[A17],implicitevidence$461:kantan.csv.CellEncoder[A18],implicitevidence$462:kantan.csv.CellEncoder[A19],implicitevidence$463:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$425:kantan.csv.CellEncoder[A1],implicitevidence$426:kantan.csv.CellEncoder[A2],implicitevidence$427:kantan.csv.CellEncoder[A3],implicitevidence$428:kantan.csv.CellEncoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellEncoder[A6],implicitevidence$431:kantan.csv.CellEncoder[A7],implicitevidence$432:kantan.csv.CellEncoder[A8],implicitevidence$433:kantan.csv.CellEncoder[A9],implicitevidence$434:kantan.csv.CellEncoder[A10],implicitevidence$435:kantan.csv.CellEncoder[A11],implicitevidence$436:kantan.csv.CellEncoder[A12],implicitevidence$437:kantan.csv.CellEncoder[A13],implicitevidence$438:kantan.csv.CellEncoder[A14],implicitevidence$439:kantan.csv.CellEncoder[A15],implicitevidence$440:kantan.csv.CellEncoder[A16],implicitevidence$441:kantan.csv.CellEncoder[A17],implicitevidence$442:kantan.csv.CellEncoder[A18],implicitevidence$443:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$407:kantan.csv.CellEncoder[A1],implicitevidence$408:kantan.csv.CellEncoder[A2],implicitevidence$409:kantan.csv.CellEncoder[A3],implicitevidence$410:kantan.csv.CellEncoder[A4],implicitevidence$411:kantan.csv.CellEncoder[A5],implicitevidence$412:kantan.csv.CellEncoder[A6],implicitevidence$413:kantan.csv.CellEncoder[A7],implicitevidence$414:kantan.csv.CellEncoder[A8],implicitevidence$415:kantan.csv.CellEncoder[A9],implicitevidence$416:kantan.csv.CellEncoder[A10],implicitevidence$417:kantan.csv.CellEncoder[A11],implicitevidence$418:kantan.csv.CellEncoder[A12],implicitevidence$419:kantan.csv.CellEncoder[A13],implicitevidence$420:kantan.csv.CellEncoder[A14],implicitevidence$421:kantan.csv.CellEncoder[A15],implicitevidence$422:kantan.csv.CellEncoder[A16],implicitevidence$423:kantan.csv.CellEncoder[A17],implicitevidence$424:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$390:kantan.csv.CellEncoder[A1],implicitevidence$391:kantan.csv.CellEncoder[A2],implicitevidence$392:kantan.csv.CellEncoder[A3],implicitevidence$393:kantan.csv.CellEncoder[A4],implicitevidence$394:kantan.csv.CellEncoder[A5],implicitevidence$395:kantan.csv.CellEncoder[A6],implicitevidence$396:kantan.csv.CellEncoder[A7],implicitevidence$397:kantan.csv.CellEncoder[A8],implicitevidence$398:kantan.csv.CellEncoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellEncoder[A11],implicitevidence$401:kantan.csv.CellEncoder[A12],implicitevidence$402:kantan.csv.CellEncoder[A13],implicitevidence$403:kantan.csv.CellEncoder[A14],implicitevidence$404:kantan.csv.CellEncoder[A15],implicitevidence$405:kantan.csv.CellEncoder[A16],implicitevidence$406:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$374:kantan.csv.CellEncoder[A1],implicitevidence$375:kantan.csv.CellEncoder[A2],implicitevidence$376:kantan.csv.CellEncoder[A3],implicitevidence$377:kantan.csv.CellEncoder[A4],implicitevidence$378:kantan.csv.CellEncoder[A5],implicitevidence$379:kantan.csv.CellEncoder[A6],implicitevidence$380:kantan.csv.CellEncoder[A7],implicitevidence$381:kantan.csv.CellEncoder[A8],implicitevidence$382:kantan.csv.CellEncoder[A9],implicitevidence$383:kantan.csv.CellEncoder[A10],implicitevidence$384:kantan.csv.CellEncoder[A11],implicitevidence$385:kantan.csv.CellEncoder[A12],implicitevidence$386:kantan.csv.CellEncoder[A13],implicitevidence$387:kantan.csv.CellEncoder[A14],implicitevidence$388:kantan.csv.CellEncoder[A15],implicitevidence$389:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$359:kantan.csv.CellEncoder[A1],implicitevidence$360:kantan.csv.CellEncoder[A2],implicitevidence$361:kantan.csv.CellEncoder[A3],implicitevidence$362:kantan.csv.CellEncoder[A4],implicitevidence$363:kantan.csv.CellEncoder[A5],implicitevidence$364:kantan.csv.CellEncoder[A6],implicitevidence$365:kantan.csv.CellEncoder[A7],implicitevidence$366:kantan.csv.CellEncoder[A8],implicitevidence$367:kantan.csv.CellEncoder[A9],implicitevidence$368:kantan.csv.CellEncoder[A10],implicitevidence$369:kantan.csv.CellEncoder[A11],implicitevidence$370:kantan.csv.CellEncoder[A12],implicitevidence$371:kantan.csv.CellEncoder[A13],implicitevidence$372:kantan.csv.CellEncoder[A14],implicitevidence$373:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$345:kantan.csv.CellEncoder[A1],implicitevidence$346:kantan.csv.CellEncoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellEncoder[A4],implicitevidence$349:kantan.csv.CellEncoder[A5],implicitevidence$350:kantan.csv.CellEncoder[A6],implicitevidence$351:kantan.csv.CellEncoder[A7],implicitevidence$352:kantan.csv.CellEncoder[A8],implicitevidence$353:kantan.csv.CellEncoder[A9],implicitevidence$354:kantan.csv.CellEncoder[A10],implicitevidence$355:kantan.csv.CellEncoder[A11],implicitevidence$356:kantan.csv.CellEncoder[A12],implicitevidence$357:kantan.csv.CellEncoder[A13],implicitevidence$358:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$332:kantan.csv.CellEncoder[A1],implicitevidence$333:kantan.csv.CellEncoder[A2],implicitevidence$334:kantan.csv.CellEncoder[A3],implicitevidence$335:kantan.csv.CellEncoder[A4],implicitevidence$336:kantan.csv.CellEncoder[A5],implicitevidence$337:kantan.csv.CellEncoder[A6],implicitevidence$338:kantan.csv.CellEncoder[A7],implicitevidence$339:kantan.csv.CellEncoder[A8],implicitevidence$340:kantan.csv.CellEncoder[A9],implicitevidence$341:kantan.csv.CellEncoder[A10],implicitevidence$342:kantan.csv.CellEncoder[A11],implicitevidence$343:kantan.csv.CellEncoder[A12],implicitevidence$344:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$320:kantan.csv.CellEncoder[A1],implicitevidence$321:kantan.csv.CellEncoder[A2],implicitevidence$322:kantan.csv.CellEncoder[A3],implicitevidence$323:kantan.csv.CellEncoder[A4],implicitevidence$324:kantan.csv.CellEncoder[A5],implicitevidence$325:kantan.csv.CellEncoder[A6],implicitevidence$326:kantan.csv.CellEncoder[A7],implicitevidence$327:kantan.csv.CellEncoder[A8],implicitevidence$328:kantan.csv.CellEncoder[A9],implicitevidence$329:kantan.csv.CellEncoder[A10],implicitevidence$330:kantan.csv.CellEncoder[A11],implicitevidence$331:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$309:kantan.csv.CellEncoder[A1],implicitevidence$310:kantan.csv.CellEncoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellEncoder[A4],implicitevidence$313:kantan.csv.CellEncoder[A5],implicitevidence$314:kantan.csv.CellEncoder[A6],implicitevidence$315:kantan.csv.CellEncoder[A7],implicitevidence$316:kantan.csv.CellEncoder[A8],implicitevidence$317:kantan.csv.CellEncoder[A9],implicitevidence$318:kantan.csv.CellEncoder[A10],implicitevidence$319:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$299:kantan.csv.CellEncoder[A1],implicitevidence$300:kantan.csv.CellEncoder[A2],implicitevidence$301:kantan.csv.CellEncoder[A3],implicitevidence$302:kantan.csv.CellEncoder[A4],implicitevidence$303:kantan.csv.CellEncoder[A5],implicitevidence$304:kantan.csv.CellEncoder[A6],implicitevidence$305:kantan.csv.CellEncoder[A7],implicitevidence$306:kantan.csv.CellEncoder[A8],implicitevidence$307:kantan.csv.CellEncoder[A9],implicitevidence$308:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$290:kantan.csv.CellEncoder[A1],implicitevidence$291:kantan.csv.CellEncoder[A2],implicitevidence$292:kantan.csv.CellEncoder[A3],implicitevidence$293:kantan.csv.CellEncoder[A4],implicitevidence$294:kantan.csv.CellEncoder[A5],implicitevidence$295:kantan.csv.CellEncoder[A6],implicitevidence$296:kantan.csv.CellEncoder[A7],implicitevidence$297:kantan.csv.CellEncoder[A8],implicitevidence$298:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7,A8](f:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$282:kantan.csv.CellEncoder[A1],implicitevidence$283:kantan.csv.CellEncoder[A2],implicitevidence$284:kantan.csv.CellEncoder[A3],implicitevidence$285:kantan.csv.CellEncoder[A4],implicitevidence$286:kantan.csv.CellEncoder[A5],implicitevidence$287:kantan.csv.CellEncoder[A6],implicitevidence$288:kantan.csv.CellEncoder[A7],implicitevidence$289:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6,A7](f:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$275:kantan.csv.CellEncoder[A1],implicitevidence$276:kantan.csv.CellEncoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellEncoder[A4],implicitevidence$279:kantan.csv.CellEncoder[A5],implicitevidence$280:kantan.csv.CellEncoder[A6],implicitevidence$281:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5,A6](f:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$269:kantan.csv.CellEncoder[A1],implicitevidence$270:kantan.csv.CellEncoder[A2],implicitevidence$271:kantan.csv.CellEncoder[A3],implicitevidence$272:kantan.csv.CellEncoder[A4],implicitevidence$273:kantan.csv.CellEncoder[A5],implicitevidence$274:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4,A5](f:C=>(A1,A2,A3,A4,A5))(implicitevidence$264:kantan.csv.CellEncoder[A1],implicitevidence$265:kantan.csv.CellEncoder[A2],implicitevidence$266:kantan.csv.CellEncoder[A3],implicitevidence$267:kantan.csv.CellEncoder[A4],implicitevidence$268:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3,A4](f:C=>(A1,A2,A3,A4))(implicitevidence$260:kantan.csv.CellEncoder[A1],implicitevidence$261:kantan.csv.CellEncoder[A2],implicitevidence$262:kantan.csv.CellEncoder[A3],implicitevidence$263:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2,A3](f:C=>(A1,A2,A3))(implicitevidence$257:kantan.csv.CellEncoder[A1],implicitevidence$258:kantan.csv.CellEncoder[A2],implicitevidence$259:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1,A2](f:C=>(A1,A2))(implicitevidence$255:kantan.csv.CellEncoder[A1],implicitevidence$256:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (C) => A1)(arg0: CellEncoder[A1]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.ordered", "link" : "kantan\/csv\/RowEncoder$.html#ordered[C,A1](f:C=>A1)(implicitevidence$254:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$232:kantan.csv.CellEncoder[A1],implicitevidence$233:kantan.csv.CellEncoder[A2],implicitevidence$234:kantan.csv.CellEncoder[A3],implicitevidence$235:kantan.csv.CellEncoder[A4],implicitevidence$236:kantan.csv.CellEncoder[A5],implicitevidence$237:kantan.csv.CellEncoder[A6],implicitevidence$238:kantan.csv.CellEncoder[A7],implicitevidence$239:kantan.csv.CellEncoder[A8],implicitevidence$240:kantan.csv.CellEncoder[A9],implicitevidence$241:kantan.csv.CellEncoder[A10],implicitevidence$242:kantan.csv.CellEncoder[A11],implicitevidence$243:kantan.csv.CellEncoder[A12],implicitevidence$244:kantan.csv.CellEncoder[A13],implicitevidence$245:kantan.csv.CellEncoder[A14],implicitevidence$246:kantan.csv.CellEncoder[A15],implicitevidence$247:kantan.csv.CellEncoder[A16],implicitevidence$248:kantan.csv.CellEncoder[A17],implicitevidence$249:kantan.csv.CellEncoder[A18],implicitevidence$250:kantan.csv.CellEncoder[A19],implicitevidence$251:kantan.csv.CellEncoder[A20],implicitevidence$252:kantan.csv.CellEncoder[A21],implicitevidence$253:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$211:kantan.csv.CellEncoder[A1],implicitevidence$212:kantan.csv.CellEncoder[A2],implicitevidence$213:kantan.csv.CellEncoder[A3],implicitevidence$214:kantan.csv.CellEncoder[A4],implicitevidence$215:kantan.csv.CellEncoder[A5],implicitevidence$216:kantan.csv.CellEncoder[A6],implicitevidence$217:kantan.csv.CellEncoder[A7],implicitevidence$218:kantan.csv.CellEncoder[A8],implicitevidence$219:kantan.csv.CellEncoder[A9],implicitevidence$220:kantan.csv.CellEncoder[A10],implicitevidence$221:kantan.csv.CellEncoder[A11],implicitevidence$222:kantan.csv.CellEncoder[A12],implicitevidence$223:kantan.csv.CellEncoder[A13],implicitevidence$224:kantan.csv.CellEncoder[A14],implicitevidence$225:kantan.csv.CellEncoder[A15],implicitevidence$226:kantan.csv.CellEncoder[A16],implicitevidence$227:kantan.csv.CellEncoder[A17],implicitevidence$228:kantan.csv.CellEncoder[A18],implicitevidence$229:kantan.csv.CellEncoder[A19],implicitevidence$230:kantan.csv.CellEncoder[A20],implicitevidence$231:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$191:kantan.csv.CellEncoder[A1],implicitevidence$192:kantan.csv.CellEncoder[A2],implicitevidence$193:kantan.csv.CellEncoder[A3],implicitevidence$194:kantan.csv.CellEncoder[A4],implicitevidence$195:kantan.csv.CellEncoder[A5],implicitevidence$196:kantan.csv.CellEncoder[A6],implicitevidence$197:kantan.csv.CellEncoder[A7],implicitevidence$198:kantan.csv.CellEncoder[A8],implicitevidence$199:kantan.csv.CellEncoder[A9],implicitevidence$200:kantan.csv.CellEncoder[A10],implicitevidence$201:kantan.csv.CellEncoder[A11],implicitevidence$202:kantan.csv.CellEncoder[A12],implicitevidence$203:kantan.csv.CellEncoder[A13],implicitevidence$204:kantan.csv.CellEncoder[A14],implicitevidence$205:kantan.csv.CellEncoder[A15],implicitevidence$206:kantan.csv.CellEncoder[A16],implicitevidence$207:kantan.csv.CellEncoder[A17],implicitevidence$208:kantan.csv.CellEncoder[A18],implicitevidence$209:kantan.csv.CellEncoder[A19],implicitevidence$210:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$172:kantan.csv.CellEncoder[A1],implicitevidence$173:kantan.csv.CellEncoder[A2],implicitevidence$174:kantan.csv.CellEncoder[A3],implicitevidence$175:kantan.csv.CellEncoder[A4],implicitevidence$176:kantan.csv.CellEncoder[A5],implicitevidence$177:kantan.csv.CellEncoder[A6],implicitevidence$178:kantan.csv.CellEncoder[A7],implicitevidence$179:kantan.csv.CellEncoder[A8],implicitevidence$180:kantan.csv.CellEncoder[A9],implicitevidence$181:kantan.csv.CellEncoder[A10],implicitevidence$182:kantan.csv.CellEncoder[A11],implicitevidence$183:kantan.csv.CellEncoder[A12],implicitevidence$184:kantan.csv.CellEncoder[A13],implicitevidence$185:kantan.csv.CellEncoder[A14],implicitevidence$186:kantan.csv.CellEncoder[A15],implicitevidence$187:kantan.csv.CellEncoder[A16],implicitevidence$188:kantan.csv.CellEncoder[A17],implicitevidence$189:kantan.csv.CellEncoder[A18],implicitevidence$190:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$154:kantan.csv.CellEncoder[A1],implicitevidence$155:kantan.csv.CellEncoder[A2],implicitevidence$156:kantan.csv.CellEncoder[A3],implicitevidence$157:kantan.csv.CellEncoder[A4],implicitevidence$158:kantan.csv.CellEncoder[A5],implicitevidence$159:kantan.csv.CellEncoder[A6],implicitevidence$160:kantan.csv.CellEncoder[A7],implicitevidence$161:kantan.csv.CellEncoder[A8],implicitevidence$162:kantan.csv.CellEncoder[A9],implicitevidence$163:kantan.csv.CellEncoder[A10],implicitevidence$164:kantan.csv.CellEncoder[A11],implicitevidence$165:kantan.csv.CellEncoder[A12],implicitevidence$166:kantan.csv.CellEncoder[A13],implicitevidence$167:kantan.csv.CellEncoder[A14],implicitevidence$168:kantan.csv.CellEncoder[A15],implicitevidence$169:kantan.csv.CellEncoder[A16],implicitevidence$170:kantan.csv.CellEncoder[A17],implicitevidence$171:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$137:kantan.csv.CellEncoder[A1],implicitevidence$138:kantan.csv.CellEncoder[A2],implicitevidence$139:kantan.csv.CellEncoder[A3],implicitevidence$140:kantan.csv.CellEncoder[A4],implicitevidence$141:kantan.csv.CellEncoder[A5],implicitevidence$142:kantan.csv.CellEncoder[A6],implicitevidence$143:kantan.csv.CellEncoder[A7],implicitevidence$144:kantan.csv.CellEncoder[A8],implicitevidence$145:kantan.csv.CellEncoder[A9],implicitevidence$146:kantan.csv.CellEncoder[A10],implicitevidence$147:kantan.csv.CellEncoder[A11],implicitevidence$148:kantan.csv.CellEncoder[A12],implicitevidence$149:kantan.csv.CellEncoder[A13],implicitevidence$150:kantan.csv.CellEncoder[A14],implicitevidence$151:kantan.csv.CellEncoder[A15],implicitevidence$152:kantan.csv.CellEncoder[A16],implicitevidence$153:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$121:kantan.csv.CellEncoder[A1],implicitevidence$122:kantan.csv.CellEncoder[A2],implicitevidence$123:kantan.csv.CellEncoder[A3],implicitevidence$124:kantan.csv.CellEncoder[A4],implicitevidence$125:kantan.csv.CellEncoder[A5],implicitevidence$126:kantan.csv.CellEncoder[A6],implicitevidence$127:kantan.csv.CellEncoder[A7],implicitevidence$128:kantan.csv.CellEncoder[A8],implicitevidence$129:kantan.csv.CellEncoder[A9],implicitevidence$130:kantan.csv.CellEncoder[A10],implicitevidence$131:kantan.csv.CellEncoder[A11],implicitevidence$132:kantan.csv.CellEncoder[A12],implicitevidence$133:kantan.csv.CellEncoder[A13],implicitevidence$134:kantan.csv.CellEncoder[A14],implicitevidence$135:kantan.csv.CellEncoder[A15],implicitevidence$136:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$106:kantan.csv.CellEncoder[A1],implicitevidence$107:kantan.csv.CellEncoder[A2],implicitevidence$108:kantan.csv.CellEncoder[A3],implicitevidence$109:kantan.csv.CellEncoder[A4],implicitevidence$110:kantan.csv.CellEncoder[A5],implicitevidence$111:kantan.csv.CellEncoder[A6],implicitevidence$112:kantan.csv.CellEncoder[A7],implicitevidence$113:kantan.csv.CellEncoder[A8],implicitevidence$114:kantan.csv.CellEncoder[A9],implicitevidence$115:kantan.csv.CellEncoder[A10],implicitevidence$116:kantan.csv.CellEncoder[A11],implicitevidence$117:kantan.csv.CellEncoder[A12],implicitevidence$118:kantan.csv.CellEncoder[A13],implicitevidence$119:kantan.csv.CellEncoder[A14],implicitevidence$120:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$92:kantan.csv.CellEncoder[A1],implicitevidence$93:kantan.csv.CellEncoder[A2],implicitevidence$94:kantan.csv.CellEncoder[A3],implicitevidence$95:kantan.csv.CellEncoder[A4],implicitevidence$96:kantan.csv.CellEncoder[A5],implicitevidence$97:kantan.csv.CellEncoder[A6],implicitevidence$98:kantan.csv.CellEncoder[A7],implicitevidence$99:kantan.csv.CellEncoder[A8],implicitevidence$100:kantan.csv.CellEncoder[A9],implicitevidence$101:kantan.csv.CellEncoder[A10],implicitevidence$102:kantan.csv.CellEncoder[A11],implicitevidence$103:kantan.csv.CellEncoder[A12],implicitevidence$104:kantan.csv.CellEncoder[A13],implicitevidence$105:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$79:kantan.csv.CellEncoder[A1],implicitevidence$80:kantan.csv.CellEncoder[A2],implicitevidence$81:kantan.csv.CellEncoder[A3],implicitevidence$82:kantan.csv.CellEncoder[A4],implicitevidence$83:kantan.csv.CellEncoder[A5],implicitevidence$84:kantan.csv.CellEncoder[A6],implicitevidence$85:kantan.csv.CellEncoder[A7],implicitevidence$86:kantan.csv.CellEncoder[A8],implicitevidence$87:kantan.csv.CellEncoder[A9],implicitevidence$88:kantan.csv.CellEncoder[A10],implicitevidence$89:kantan.csv.CellEncoder[A11],implicitevidence$90:kantan.csv.CellEncoder[A12],implicitevidence$91:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$67:kantan.csv.CellEncoder[A1],implicitevidence$68:kantan.csv.CellEncoder[A2],implicitevidence$69:kantan.csv.CellEncoder[A3],implicitevidence$70:kantan.csv.CellEncoder[A4],implicitevidence$71:kantan.csv.CellEncoder[A5],implicitevidence$72:kantan.csv.CellEncoder[A6],implicitevidence$73:kantan.csv.CellEncoder[A7],implicitevidence$74:kantan.csv.CellEncoder[A8],implicitevidence$75:kantan.csv.CellEncoder[A9],implicitevidence$76:kantan.csv.CellEncoder[A10],implicitevidence$77:kantan.csv.CellEncoder[A11],implicitevidence$78:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$56:kantan.csv.CellEncoder[A1],implicitevidence$57:kantan.csv.CellEncoder[A2],implicitevidence$58:kantan.csv.CellEncoder[A3],implicitevidence$59:kantan.csv.CellEncoder[A4],implicitevidence$60:kantan.csv.CellEncoder[A5],implicitevidence$61:kantan.csv.CellEncoder[A6],implicitevidence$62:kantan.csv.CellEncoder[A7],implicitevidence$63:kantan.csv.CellEncoder[A8],implicitevidence$64:kantan.csv.CellEncoder[A9],implicitevidence$65:kantan.csv.CellEncoder[A10],implicitevidence$66:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$46:kantan.csv.CellEncoder[A1],implicitevidence$47:kantan.csv.CellEncoder[A2],implicitevidence$48:kantan.csv.CellEncoder[A3],implicitevidence$49:kantan.csv.CellEncoder[A4],implicitevidence$50:kantan.csv.CellEncoder[A5],implicitevidence$51:kantan.csv.CellEncoder[A6],implicitevidence$52:kantan.csv.CellEncoder[A7],implicitevidence$53:kantan.csv.CellEncoder[A8],implicitevidence$54:kantan.csv.CellEncoder[A9],implicitevidence$55:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$37:kantan.csv.CellEncoder[A1],implicitevidence$38:kantan.csv.CellEncoder[A2],implicitevidence$39:kantan.csv.CellEncoder[A3],implicitevidence$40:kantan.csv.CellEncoder[A4],implicitevidence$41:kantan.csv.CellEncoder[A5],implicitevidence$42:kantan.csv.CellEncoder[A6],implicitevidence$43:kantan.csv.CellEncoder[A7],implicitevidence$44:kantan.csv.CellEncoder[A8],implicitevidence$45:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$29:kantan.csv.CellEncoder[A1],implicitevidence$30:kantan.csv.CellEncoder[A2],implicitevidence$31:kantan.csv.CellEncoder[A3],implicitevidence$32:kantan.csv.CellEncoder[A4],implicitevidence$33:kantan.csv.CellEncoder[A5],implicitevidence$34:kantan.csv.CellEncoder[A6],implicitevidence$35:kantan.csv.CellEncoder[A7],implicitevidence$36:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (C) => (A1, A2, A3, A4, A5, A6, A7))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:C=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$22:kantan.csv.CellEncoder[A1],implicitevidence$23:kantan.csv.CellEncoder[A2],implicitevidence$24:kantan.csv.CellEncoder[A3],implicitevidence$25:kantan.csv.CellEncoder[A4],implicitevidence$26:kantan.csv.CellEncoder[A5],implicitevidence$27:kantan.csv.CellEncoder[A6],implicitevidence$28:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (C) => (A1, A2, A3, A4, A5, A6))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:C=>(A1,A2,A3,A4,A5,A6))(implicitevidence$16:kantan.csv.CellEncoder[A1],implicitevidence$17:kantan.csv.CellEncoder[A2],implicitevidence$18:kantan.csv.CellEncoder[A3],implicitevidence$19:kantan.csv.CellEncoder[A4],implicitevidence$20:kantan.csv.CellEncoder[A5],implicitevidence$21:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (C) => (A1, A2, A3, A4, A5))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:C=>(A1,A2,A3,A4,A5))(implicitevidence$11:kantan.csv.CellEncoder[A1],implicitevidence$12:kantan.csv.CellEncoder[A2],implicitevidence$13:kantan.csv.CellEncoder[A3],implicitevidence$14:kantan.csv.CellEncoder[A4],implicitevidence$15:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (C) => (A1, A2, A3, A4))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(f:C=>(A1,A2,A3,A4))(implicitevidence$7:kantan.csv.CellEncoder[A1],implicitevidence$8:kantan.csv.CellEncoder[A2],implicitevidence$9:kantan.csv.CellEncoder[A3],implicitevidence$10:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (C) => (A1, A2, A3))(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2,A3](i1:Int,i2:Int,i3:Int)(f:C=>(A1,A2,A3))(implicitevidence$4:kantan.csv.CellEncoder[A1],implicitevidence$5:kantan.csv.CellEncoder[A2],implicitevidence$6:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(i1: Int, i2: Int)(f: (C) => (A1, A2))(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1,A2](i1:Int,i2:Int)(f:C=>(A1,A2))(implicitevidence$2:kantan.csv.CellEncoder[A1],implicitevidence$3:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "encoder", "tail" : "(f: (C) => A1)(arg0: CellEncoder[A1]): RowEncoder[C]", "member" : "kantan.csv.GeneratedRowEncoders.encoder", "link" : "kantan\/csv\/RowEncoder$.html#encoder[C,A1](f:C=>A1)(implicitevidence$1:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/RowEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/RowEncoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/RowEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/RowEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/RowEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/RowEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/RowEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/RowEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/RowEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/RowEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/RowEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/RowEncoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/RowEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/RowEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/RowEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/RowEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "tag", "tail" : "(): Encoder[E, D, TT]", "member" : "kantan.codecs.Encoder.tag", "link" : "kantan\/csv\/package$$RowEncoder.html#tag[TT]:kantan.codecs.Encoder[E,D,TT]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (DD) => D): Encoder[E, DD, T]", "member" : "kantan.codecs.Encoder.contramap", "link" : "kantan\/csv\/package$$RowEncoder.html#contramap[DD](f:DD=>D):kantan.codecs.Encoder[E,DD,T]", "kind" : "def"}, {"label" : "mapEncoded", "tail" : "(f: (E) => EE): Encoder[EE, D, T]", "member" : "kantan.codecs.Encoder.mapEncoded", "link" : "kantan\/csv\/package$$RowEncoder.html#mapEncoded[EE](f:E=>EE):kantan.codecs.Encoder[EE,D,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/package$$RowEncoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/package$$RowEncoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/package$$RowEncoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/package$$RowEncoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/package$$RowEncoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/package$$RowEncoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/package$$RowEncoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowEncoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowEncoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/package$$RowEncoder.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/package$$RowEncoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/package$$RowEncoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/package$$RowEncoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/package$$RowEncoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/package$$RowEncoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/package$$RowEncoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/package$$RowEncoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/package$$RowEncoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/package$$RowEncoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encode", "tail" : "(d: D): E", "member" : "kantan.codecs.Encoder.encode", "link" : "kantan\/csv\/package$$RowEncoder.html#encode(d:D):E", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/csv\/package$$RowEncoder.html"}, {"name" : "kantan.csv.RowEncoderInstances", "trait" : "kantan\/csv\/RowEncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "fromCellEncoder", "tail" : "(arg0: CellEncoder[A]): RowEncoder[A]", "member" : "kantan.csv.RowEncoderInstances.fromCellEncoder", "link" : "kantan\/csv\/RowEncoderInstances.html#fromCellEncoder[A](implicitevidence$1:kantan.csv.CellEncoder[A]):kantan.csv.RowEncoder[A]", "kind" : "implicit def"}, {"label" : "iterable", "tail" : "(arg0: CellEncoder[A]): RowEncoder[M[A]]", "member" : "kantan.csv.VersionSpecificRowEncoderInstances.iterable", "link" : "kantan\/csv\/RowEncoderInstances.html#iterable[A,M[X]<:IterableOnce[X]](implicitevidence$1:kantan.csv.CellEncoder[A]):kantan.csv.RowEncoder[M[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/RowEncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/RowEncoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/RowEncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/RowEncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/RowEncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/RowEncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/RowEncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowEncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowEncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/RowEncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/RowEncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/RowEncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/RowEncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/RowEncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/RowEncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/RowEncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/RowEncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/RowEncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/RowEncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides reasonable default RowEncoder instances for various types."}, {"name" : "kantan.csv.TupleInstances", "trait" : "kantan\/csv\/TupleInstances.html", "kind" : "trait", "members_trait" : [{"label" : "tupleRowEncoder22", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21], arg21: CellEncoder[A22]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder22", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$485:kantan.csv.CellEncoder[A1],implicitevidence$486:kantan.csv.CellEncoder[A2],implicitevidence$487:kantan.csv.CellEncoder[A3],implicitevidence$488:kantan.csv.CellEncoder[A4],implicitevidence$489:kantan.csv.CellEncoder[A5],implicitevidence$490:kantan.csv.CellEncoder[A6],implicitevidence$491:kantan.csv.CellEncoder[A7],implicitevidence$492:kantan.csv.CellEncoder[A8],implicitevidence$493:kantan.csv.CellEncoder[A9],implicitevidence$494:kantan.csv.CellEncoder[A10],implicitevidence$495:kantan.csv.CellEncoder[A11],implicitevidence$496:kantan.csv.CellEncoder[A12],implicitevidence$497:kantan.csv.CellEncoder[A13],implicitevidence$498:kantan.csv.CellEncoder[A14],implicitevidence$499:kantan.csv.CellEncoder[A15],implicitevidence$500:kantan.csv.CellEncoder[A16],implicitevidence$501:kantan.csv.CellEncoder[A17],implicitevidence$502:kantan.csv.CellEncoder[A18],implicitevidence$503:kantan.csv.CellEncoder[A19],implicitevidence$504:kantan.csv.CellEncoder[A20],implicitevidence$505:kantan.csv.CellEncoder[A21],implicitevidence$506:kantan.csv.CellEncoder[A22]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder21", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20], arg20: CellEncoder[A21]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder21", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$464:kantan.csv.CellEncoder[A1],implicitevidence$465:kantan.csv.CellEncoder[A2],implicitevidence$466:kantan.csv.CellEncoder[A3],implicitevidence$467:kantan.csv.CellEncoder[A4],implicitevidence$468:kantan.csv.CellEncoder[A5],implicitevidence$469:kantan.csv.CellEncoder[A6],implicitevidence$470:kantan.csv.CellEncoder[A7],implicitevidence$471:kantan.csv.CellEncoder[A8],implicitevidence$472:kantan.csv.CellEncoder[A9],implicitevidence$473:kantan.csv.CellEncoder[A10],implicitevidence$474:kantan.csv.CellEncoder[A11],implicitevidence$475:kantan.csv.CellEncoder[A12],implicitevidence$476:kantan.csv.CellEncoder[A13],implicitevidence$477:kantan.csv.CellEncoder[A14],implicitevidence$478:kantan.csv.CellEncoder[A15],implicitevidence$479:kantan.csv.CellEncoder[A16],implicitevidence$480:kantan.csv.CellEncoder[A17],implicitevidence$481:kantan.csv.CellEncoder[A18],implicitevidence$482:kantan.csv.CellEncoder[A19],implicitevidence$483:kantan.csv.CellEncoder[A20],implicitevidence$484:kantan.csv.CellEncoder[A21]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder20", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19], arg19: CellEncoder[A20]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder20", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$444:kantan.csv.CellEncoder[A1],implicitevidence$445:kantan.csv.CellEncoder[A2],implicitevidence$446:kantan.csv.CellEncoder[A3],implicitevidence$447:kantan.csv.CellEncoder[A4],implicitevidence$448:kantan.csv.CellEncoder[A5],implicitevidence$449:kantan.csv.CellEncoder[A6],implicitevidence$450:kantan.csv.CellEncoder[A7],implicitevidence$451:kantan.csv.CellEncoder[A8],implicitevidence$452:kantan.csv.CellEncoder[A9],implicitevidence$453:kantan.csv.CellEncoder[A10],implicitevidence$454:kantan.csv.CellEncoder[A11],implicitevidence$455:kantan.csv.CellEncoder[A12],implicitevidence$456:kantan.csv.CellEncoder[A13],implicitevidence$457:kantan.csv.CellEncoder[A14],implicitevidence$458:kantan.csv.CellEncoder[A15],implicitevidence$459:kantan.csv.CellEncoder[A16],implicitevidence$460:kantan.csv.CellEncoder[A17],implicitevidence$461:kantan.csv.CellEncoder[A18],implicitevidence$462:kantan.csv.CellEncoder[A19],implicitevidence$463:kantan.csv.CellEncoder[A20]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder19", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18], arg18: CellEncoder[A19]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder19", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$425:kantan.csv.CellEncoder[A1],implicitevidence$426:kantan.csv.CellEncoder[A2],implicitevidence$427:kantan.csv.CellEncoder[A3],implicitevidence$428:kantan.csv.CellEncoder[A4],implicitevidence$429:kantan.csv.CellEncoder[A5],implicitevidence$430:kantan.csv.CellEncoder[A6],implicitevidence$431:kantan.csv.CellEncoder[A7],implicitevidence$432:kantan.csv.CellEncoder[A8],implicitevidence$433:kantan.csv.CellEncoder[A9],implicitevidence$434:kantan.csv.CellEncoder[A10],implicitevidence$435:kantan.csv.CellEncoder[A11],implicitevidence$436:kantan.csv.CellEncoder[A12],implicitevidence$437:kantan.csv.CellEncoder[A13],implicitevidence$438:kantan.csv.CellEncoder[A14],implicitevidence$439:kantan.csv.CellEncoder[A15],implicitevidence$440:kantan.csv.CellEncoder[A16],implicitevidence$441:kantan.csv.CellEncoder[A17],implicitevidence$442:kantan.csv.CellEncoder[A18],implicitevidence$443:kantan.csv.CellEncoder[A19]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder18", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17], arg17: CellEncoder[A18]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder18", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$407:kantan.csv.CellEncoder[A1],implicitevidence$408:kantan.csv.CellEncoder[A2],implicitevidence$409:kantan.csv.CellEncoder[A3],implicitevidence$410:kantan.csv.CellEncoder[A4],implicitevidence$411:kantan.csv.CellEncoder[A5],implicitevidence$412:kantan.csv.CellEncoder[A6],implicitevidence$413:kantan.csv.CellEncoder[A7],implicitevidence$414:kantan.csv.CellEncoder[A8],implicitevidence$415:kantan.csv.CellEncoder[A9],implicitevidence$416:kantan.csv.CellEncoder[A10],implicitevidence$417:kantan.csv.CellEncoder[A11],implicitevidence$418:kantan.csv.CellEncoder[A12],implicitevidence$419:kantan.csv.CellEncoder[A13],implicitevidence$420:kantan.csv.CellEncoder[A14],implicitevidence$421:kantan.csv.CellEncoder[A15],implicitevidence$422:kantan.csv.CellEncoder[A16],implicitevidence$423:kantan.csv.CellEncoder[A17],implicitevidence$424:kantan.csv.CellEncoder[A18]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder17", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16], arg16: CellEncoder[A17]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder17", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$390:kantan.csv.CellEncoder[A1],implicitevidence$391:kantan.csv.CellEncoder[A2],implicitevidence$392:kantan.csv.CellEncoder[A3],implicitevidence$393:kantan.csv.CellEncoder[A4],implicitevidence$394:kantan.csv.CellEncoder[A5],implicitevidence$395:kantan.csv.CellEncoder[A6],implicitevidence$396:kantan.csv.CellEncoder[A7],implicitevidence$397:kantan.csv.CellEncoder[A8],implicitevidence$398:kantan.csv.CellEncoder[A9],implicitevidence$399:kantan.csv.CellEncoder[A10],implicitevidence$400:kantan.csv.CellEncoder[A11],implicitevidence$401:kantan.csv.CellEncoder[A12],implicitevidence$402:kantan.csv.CellEncoder[A13],implicitevidence$403:kantan.csv.CellEncoder[A14],implicitevidence$404:kantan.csv.CellEncoder[A15],implicitevidence$405:kantan.csv.CellEncoder[A16],implicitevidence$406:kantan.csv.CellEncoder[A17]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder16", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15], arg15: CellEncoder[A16]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder16", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$374:kantan.csv.CellEncoder[A1],implicitevidence$375:kantan.csv.CellEncoder[A2],implicitevidence$376:kantan.csv.CellEncoder[A3],implicitevidence$377:kantan.csv.CellEncoder[A4],implicitevidence$378:kantan.csv.CellEncoder[A5],implicitevidence$379:kantan.csv.CellEncoder[A6],implicitevidence$380:kantan.csv.CellEncoder[A7],implicitevidence$381:kantan.csv.CellEncoder[A8],implicitevidence$382:kantan.csv.CellEncoder[A9],implicitevidence$383:kantan.csv.CellEncoder[A10],implicitevidence$384:kantan.csv.CellEncoder[A11],implicitevidence$385:kantan.csv.CellEncoder[A12],implicitevidence$386:kantan.csv.CellEncoder[A13],implicitevidence$387:kantan.csv.CellEncoder[A14],implicitevidence$388:kantan.csv.CellEncoder[A15],implicitevidence$389:kantan.csv.CellEncoder[A16]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder15", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14], arg14: CellEncoder[A15]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder15", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$359:kantan.csv.CellEncoder[A1],implicitevidence$360:kantan.csv.CellEncoder[A2],implicitevidence$361:kantan.csv.CellEncoder[A3],implicitevidence$362:kantan.csv.CellEncoder[A4],implicitevidence$363:kantan.csv.CellEncoder[A5],implicitevidence$364:kantan.csv.CellEncoder[A6],implicitevidence$365:kantan.csv.CellEncoder[A7],implicitevidence$366:kantan.csv.CellEncoder[A8],implicitevidence$367:kantan.csv.CellEncoder[A9],implicitevidence$368:kantan.csv.CellEncoder[A10],implicitevidence$369:kantan.csv.CellEncoder[A11],implicitevidence$370:kantan.csv.CellEncoder[A12],implicitevidence$371:kantan.csv.CellEncoder[A13],implicitevidence$372:kantan.csv.CellEncoder[A14],implicitevidence$373:kantan.csv.CellEncoder[A15]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder14", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13], arg13: CellEncoder[A14]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder14", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$345:kantan.csv.CellEncoder[A1],implicitevidence$346:kantan.csv.CellEncoder[A2],implicitevidence$347:kantan.csv.CellEncoder[A3],implicitevidence$348:kantan.csv.CellEncoder[A4],implicitevidence$349:kantan.csv.CellEncoder[A5],implicitevidence$350:kantan.csv.CellEncoder[A6],implicitevidence$351:kantan.csv.CellEncoder[A7],implicitevidence$352:kantan.csv.CellEncoder[A8],implicitevidence$353:kantan.csv.CellEncoder[A9],implicitevidence$354:kantan.csv.CellEncoder[A10],implicitevidence$355:kantan.csv.CellEncoder[A11],implicitevidence$356:kantan.csv.CellEncoder[A12],implicitevidence$357:kantan.csv.CellEncoder[A13],implicitevidence$358:kantan.csv.CellEncoder[A14]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder13", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12], arg12: CellEncoder[A13]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder13", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$332:kantan.csv.CellEncoder[A1],implicitevidence$333:kantan.csv.CellEncoder[A2],implicitevidence$334:kantan.csv.CellEncoder[A3],implicitevidence$335:kantan.csv.CellEncoder[A4],implicitevidence$336:kantan.csv.CellEncoder[A5],implicitevidence$337:kantan.csv.CellEncoder[A6],implicitevidence$338:kantan.csv.CellEncoder[A7],implicitevidence$339:kantan.csv.CellEncoder[A8],implicitevidence$340:kantan.csv.CellEncoder[A9],implicitevidence$341:kantan.csv.CellEncoder[A10],implicitevidence$342:kantan.csv.CellEncoder[A11],implicitevidence$343:kantan.csv.CellEncoder[A12],implicitevidence$344:kantan.csv.CellEncoder[A13]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder12", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11], arg11: CellEncoder[A12]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder12", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$320:kantan.csv.CellEncoder[A1],implicitevidence$321:kantan.csv.CellEncoder[A2],implicitevidence$322:kantan.csv.CellEncoder[A3],implicitevidence$323:kantan.csv.CellEncoder[A4],implicitevidence$324:kantan.csv.CellEncoder[A5],implicitevidence$325:kantan.csv.CellEncoder[A6],implicitevidence$326:kantan.csv.CellEncoder[A7],implicitevidence$327:kantan.csv.CellEncoder[A8],implicitevidence$328:kantan.csv.CellEncoder[A9],implicitevidence$329:kantan.csv.CellEncoder[A10],implicitevidence$330:kantan.csv.CellEncoder[A11],implicitevidence$331:kantan.csv.CellEncoder[A12]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder11", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10], arg10: CellEncoder[A11]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder11", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$309:kantan.csv.CellEncoder[A1],implicitevidence$310:kantan.csv.CellEncoder[A2],implicitevidence$311:kantan.csv.CellEncoder[A3],implicitevidence$312:kantan.csv.CellEncoder[A4],implicitevidence$313:kantan.csv.CellEncoder[A5],implicitevidence$314:kantan.csv.CellEncoder[A6],implicitevidence$315:kantan.csv.CellEncoder[A7],implicitevidence$316:kantan.csv.CellEncoder[A8],implicitevidence$317:kantan.csv.CellEncoder[A9],implicitevidence$318:kantan.csv.CellEncoder[A10],implicitevidence$319:kantan.csv.CellEncoder[A11]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder10", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9], arg9: CellEncoder[A10]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder10", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$299:kantan.csv.CellEncoder[A1],implicitevidence$300:kantan.csv.CellEncoder[A2],implicitevidence$301:kantan.csv.CellEncoder[A3],implicitevidence$302:kantan.csv.CellEncoder[A4],implicitevidence$303:kantan.csv.CellEncoder[A5],implicitevidence$304:kantan.csv.CellEncoder[A6],implicitevidence$305:kantan.csv.CellEncoder[A7],implicitevidence$306:kantan.csv.CellEncoder[A8],implicitevidence$307:kantan.csv.CellEncoder[A9],implicitevidence$308:kantan.csv.CellEncoder[A10]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder9", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8], arg8: CellEncoder[A9]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder9", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$290:kantan.csv.CellEncoder[A1],implicitevidence$291:kantan.csv.CellEncoder[A2],implicitevidence$292:kantan.csv.CellEncoder[A3],implicitevidence$293:kantan.csv.CellEncoder[A4],implicitevidence$294:kantan.csv.CellEncoder[A5],implicitevidence$295:kantan.csv.CellEncoder[A6],implicitevidence$296:kantan.csv.CellEncoder[A7],implicitevidence$297:kantan.csv.CellEncoder[A8],implicitevidence$298:kantan.csv.CellEncoder[A9]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder8", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7], arg7: CellEncoder[A8]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder8", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder8[A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$282:kantan.csv.CellEncoder[A1],implicitevidence$283:kantan.csv.CellEncoder[A2],implicitevidence$284:kantan.csv.CellEncoder[A3],implicitevidence$285:kantan.csv.CellEncoder[A4],implicitevidence$286:kantan.csv.CellEncoder[A5],implicitevidence$287:kantan.csv.CellEncoder[A6],implicitevidence$288:kantan.csv.CellEncoder[A7],implicitevidence$289:kantan.csv.CellEncoder[A8]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder7", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6], arg6: CellEncoder[A7]): RowEncoder[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder7", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder7[A1,A2,A3,A4,A5,A6,A7](implicitevidence$275:kantan.csv.CellEncoder[A1],implicitevidence$276:kantan.csv.CellEncoder[A2],implicitevidence$277:kantan.csv.CellEncoder[A3],implicitevidence$278:kantan.csv.CellEncoder[A4],implicitevidence$279:kantan.csv.CellEncoder[A5],implicitevidence$280:kantan.csv.CellEncoder[A6],implicitevidence$281:kantan.csv.CellEncoder[A7]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder6", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5], arg5: CellEncoder[A6]): RowEncoder[(A1, A2, A3, A4, A5, A6)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder6", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder6[A1,A2,A3,A4,A5,A6](implicitevidence$269:kantan.csv.CellEncoder[A1],implicitevidence$270:kantan.csv.CellEncoder[A2],implicitevidence$271:kantan.csv.CellEncoder[A3],implicitevidence$272:kantan.csv.CellEncoder[A4],implicitevidence$273:kantan.csv.CellEncoder[A5],implicitevidence$274:kantan.csv.CellEncoder[A6]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder5", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4], arg4: CellEncoder[A5]): RowEncoder[(A1, A2, A3, A4, A5)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder5", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder5[A1,A2,A3,A4,A5](implicitevidence$264:kantan.csv.CellEncoder[A1],implicitevidence$265:kantan.csv.CellEncoder[A2],implicitevidence$266:kantan.csv.CellEncoder[A3],implicitevidence$267:kantan.csv.CellEncoder[A4],implicitevidence$268:kantan.csv.CellEncoder[A5]):kantan.csv.RowEncoder[(A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder4", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3], arg3: CellEncoder[A4]): RowEncoder[(A1, A2, A3, A4)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder4", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder4[A1,A2,A3,A4](implicitevidence$260:kantan.csv.CellEncoder[A1],implicitevidence$261:kantan.csv.CellEncoder[A2],implicitevidence$262:kantan.csv.CellEncoder[A3],implicitevidence$263:kantan.csv.CellEncoder[A4]):kantan.csv.RowEncoder[(A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder3", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2], arg2: CellEncoder[A3]): RowEncoder[(A1, A2, A3)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder3", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder3[A1,A2,A3](implicitevidence$257:kantan.csv.CellEncoder[A1],implicitevidence$258:kantan.csv.CellEncoder[A2],implicitevidence$259:kantan.csv.CellEncoder[A3]):kantan.csv.RowEncoder[(A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder2", "tail" : "(arg0: CellEncoder[A1], arg1: CellEncoder[A2]): RowEncoder[(A1, A2)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder2", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder2[A1,A2](implicitevidence$255:kantan.csv.CellEncoder[A1],implicitevidence$256:kantan.csv.CellEncoder[A2]):kantan.csv.RowEncoder[(A1,A2)]", "kind" : "implicit def"}, {"label" : "tupleRowEncoder1", "tail" : "(arg0: CellEncoder[A1]): RowEncoder[(A1)]", "member" : "kantan.csv.TupleInstances.tupleRowEncoder1", "link" : "kantan\/csv\/TupleInstances.html#tupleRowEncoder1[A1](implicitevidence$254:kantan.csv.CellEncoder[A1]):kantan.csv.RowEncoder[(A1,)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder22", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21], arg21: CellDecoder[A22]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder22", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$232:kantan.csv.CellDecoder[A1],implicitevidence$233:kantan.csv.CellDecoder[A2],implicitevidence$234:kantan.csv.CellDecoder[A3],implicitevidence$235:kantan.csv.CellDecoder[A4],implicitevidence$236:kantan.csv.CellDecoder[A5],implicitevidence$237:kantan.csv.CellDecoder[A6],implicitevidence$238:kantan.csv.CellDecoder[A7],implicitevidence$239:kantan.csv.CellDecoder[A8],implicitevidence$240:kantan.csv.CellDecoder[A9],implicitevidence$241:kantan.csv.CellDecoder[A10],implicitevidence$242:kantan.csv.CellDecoder[A11],implicitevidence$243:kantan.csv.CellDecoder[A12],implicitevidence$244:kantan.csv.CellDecoder[A13],implicitevidence$245:kantan.csv.CellDecoder[A14],implicitevidence$246:kantan.csv.CellDecoder[A15],implicitevidence$247:kantan.csv.CellDecoder[A16],implicitevidence$248:kantan.csv.CellDecoder[A17],implicitevidence$249:kantan.csv.CellDecoder[A18],implicitevidence$250:kantan.csv.CellDecoder[A19],implicitevidence$251:kantan.csv.CellDecoder[A20],implicitevidence$252:kantan.csv.CellDecoder[A21],implicitevidence$253:kantan.csv.CellDecoder[A22]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder21", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20], arg20: CellDecoder[A21]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder21", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$211:kantan.csv.CellDecoder[A1],implicitevidence$212:kantan.csv.CellDecoder[A2],implicitevidence$213:kantan.csv.CellDecoder[A3],implicitevidence$214:kantan.csv.CellDecoder[A4],implicitevidence$215:kantan.csv.CellDecoder[A5],implicitevidence$216:kantan.csv.CellDecoder[A6],implicitevidence$217:kantan.csv.CellDecoder[A7],implicitevidence$218:kantan.csv.CellDecoder[A8],implicitevidence$219:kantan.csv.CellDecoder[A9],implicitevidence$220:kantan.csv.CellDecoder[A10],implicitevidence$221:kantan.csv.CellDecoder[A11],implicitevidence$222:kantan.csv.CellDecoder[A12],implicitevidence$223:kantan.csv.CellDecoder[A13],implicitevidence$224:kantan.csv.CellDecoder[A14],implicitevidence$225:kantan.csv.CellDecoder[A15],implicitevidence$226:kantan.csv.CellDecoder[A16],implicitevidence$227:kantan.csv.CellDecoder[A17],implicitevidence$228:kantan.csv.CellDecoder[A18],implicitevidence$229:kantan.csv.CellDecoder[A19],implicitevidence$230:kantan.csv.CellDecoder[A20],implicitevidence$231:kantan.csv.CellDecoder[A21]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder20", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19], arg19: CellDecoder[A20]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder20", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$191:kantan.csv.CellDecoder[A1],implicitevidence$192:kantan.csv.CellDecoder[A2],implicitevidence$193:kantan.csv.CellDecoder[A3],implicitevidence$194:kantan.csv.CellDecoder[A4],implicitevidence$195:kantan.csv.CellDecoder[A5],implicitevidence$196:kantan.csv.CellDecoder[A6],implicitevidence$197:kantan.csv.CellDecoder[A7],implicitevidence$198:kantan.csv.CellDecoder[A8],implicitevidence$199:kantan.csv.CellDecoder[A9],implicitevidence$200:kantan.csv.CellDecoder[A10],implicitevidence$201:kantan.csv.CellDecoder[A11],implicitevidence$202:kantan.csv.CellDecoder[A12],implicitevidence$203:kantan.csv.CellDecoder[A13],implicitevidence$204:kantan.csv.CellDecoder[A14],implicitevidence$205:kantan.csv.CellDecoder[A15],implicitevidence$206:kantan.csv.CellDecoder[A16],implicitevidence$207:kantan.csv.CellDecoder[A17],implicitevidence$208:kantan.csv.CellDecoder[A18],implicitevidence$209:kantan.csv.CellDecoder[A19],implicitevidence$210:kantan.csv.CellDecoder[A20]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder19", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18], arg18: CellDecoder[A19]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder19", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$172:kantan.csv.CellDecoder[A1],implicitevidence$173:kantan.csv.CellDecoder[A2],implicitevidence$174:kantan.csv.CellDecoder[A3],implicitevidence$175:kantan.csv.CellDecoder[A4],implicitevidence$176:kantan.csv.CellDecoder[A5],implicitevidence$177:kantan.csv.CellDecoder[A6],implicitevidence$178:kantan.csv.CellDecoder[A7],implicitevidence$179:kantan.csv.CellDecoder[A8],implicitevidence$180:kantan.csv.CellDecoder[A9],implicitevidence$181:kantan.csv.CellDecoder[A10],implicitevidence$182:kantan.csv.CellDecoder[A11],implicitevidence$183:kantan.csv.CellDecoder[A12],implicitevidence$184:kantan.csv.CellDecoder[A13],implicitevidence$185:kantan.csv.CellDecoder[A14],implicitevidence$186:kantan.csv.CellDecoder[A15],implicitevidence$187:kantan.csv.CellDecoder[A16],implicitevidence$188:kantan.csv.CellDecoder[A17],implicitevidence$189:kantan.csv.CellDecoder[A18],implicitevidence$190:kantan.csv.CellDecoder[A19]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder18", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17], arg17: CellDecoder[A18]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder18", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$154:kantan.csv.CellDecoder[A1],implicitevidence$155:kantan.csv.CellDecoder[A2],implicitevidence$156:kantan.csv.CellDecoder[A3],implicitevidence$157:kantan.csv.CellDecoder[A4],implicitevidence$158:kantan.csv.CellDecoder[A5],implicitevidence$159:kantan.csv.CellDecoder[A6],implicitevidence$160:kantan.csv.CellDecoder[A7],implicitevidence$161:kantan.csv.CellDecoder[A8],implicitevidence$162:kantan.csv.CellDecoder[A9],implicitevidence$163:kantan.csv.CellDecoder[A10],implicitevidence$164:kantan.csv.CellDecoder[A11],implicitevidence$165:kantan.csv.CellDecoder[A12],implicitevidence$166:kantan.csv.CellDecoder[A13],implicitevidence$167:kantan.csv.CellDecoder[A14],implicitevidence$168:kantan.csv.CellDecoder[A15],implicitevidence$169:kantan.csv.CellDecoder[A16],implicitevidence$170:kantan.csv.CellDecoder[A17],implicitevidence$171:kantan.csv.CellDecoder[A18]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder17", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16], arg16: CellDecoder[A17]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder17", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$137:kantan.csv.CellDecoder[A1],implicitevidence$138:kantan.csv.CellDecoder[A2],implicitevidence$139:kantan.csv.CellDecoder[A3],implicitevidence$140:kantan.csv.CellDecoder[A4],implicitevidence$141:kantan.csv.CellDecoder[A5],implicitevidence$142:kantan.csv.CellDecoder[A6],implicitevidence$143:kantan.csv.CellDecoder[A7],implicitevidence$144:kantan.csv.CellDecoder[A8],implicitevidence$145:kantan.csv.CellDecoder[A9],implicitevidence$146:kantan.csv.CellDecoder[A10],implicitevidence$147:kantan.csv.CellDecoder[A11],implicitevidence$148:kantan.csv.CellDecoder[A12],implicitevidence$149:kantan.csv.CellDecoder[A13],implicitevidence$150:kantan.csv.CellDecoder[A14],implicitevidence$151:kantan.csv.CellDecoder[A15],implicitevidence$152:kantan.csv.CellDecoder[A16],implicitevidence$153:kantan.csv.CellDecoder[A17]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder16", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15], arg15: CellDecoder[A16]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder16", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$121:kantan.csv.CellDecoder[A1],implicitevidence$122:kantan.csv.CellDecoder[A2],implicitevidence$123:kantan.csv.CellDecoder[A3],implicitevidence$124:kantan.csv.CellDecoder[A4],implicitevidence$125:kantan.csv.CellDecoder[A5],implicitevidence$126:kantan.csv.CellDecoder[A6],implicitevidence$127:kantan.csv.CellDecoder[A7],implicitevidence$128:kantan.csv.CellDecoder[A8],implicitevidence$129:kantan.csv.CellDecoder[A9],implicitevidence$130:kantan.csv.CellDecoder[A10],implicitevidence$131:kantan.csv.CellDecoder[A11],implicitevidence$132:kantan.csv.CellDecoder[A12],implicitevidence$133:kantan.csv.CellDecoder[A13],implicitevidence$134:kantan.csv.CellDecoder[A14],implicitevidence$135:kantan.csv.CellDecoder[A15],implicitevidence$136:kantan.csv.CellDecoder[A16]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder15", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14], arg14: CellDecoder[A15]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder15", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$106:kantan.csv.CellDecoder[A1],implicitevidence$107:kantan.csv.CellDecoder[A2],implicitevidence$108:kantan.csv.CellDecoder[A3],implicitevidence$109:kantan.csv.CellDecoder[A4],implicitevidence$110:kantan.csv.CellDecoder[A5],implicitevidence$111:kantan.csv.CellDecoder[A6],implicitevidence$112:kantan.csv.CellDecoder[A7],implicitevidence$113:kantan.csv.CellDecoder[A8],implicitevidence$114:kantan.csv.CellDecoder[A9],implicitevidence$115:kantan.csv.CellDecoder[A10],implicitevidence$116:kantan.csv.CellDecoder[A11],implicitevidence$117:kantan.csv.CellDecoder[A12],implicitevidence$118:kantan.csv.CellDecoder[A13],implicitevidence$119:kantan.csv.CellDecoder[A14],implicitevidence$120:kantan.csv.CellDecoder[A15]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder14", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13], arg13: CellDecoder[A14]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder14", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$92:kantan.csv.CellDecoder[A1],implicitevidence$93:kantan.csv.CellDecoder[A2],implicitevidence$94:kantan.csv.CellDecoder[A3],implicitevidence$95:kantan.csv.CellDecoder[A4],implicitevidence$96:kantan.csv.CellDecoder[A5],implicitevidence$97:kantan.csv.CellDecoder[A6],implicitevidence$98:kantan.csv.CellDecoder[A7],implicitevidence$99:kantan.csv.CellDecoder[A8],implicitevidence$100:kantan.csv.CellDecoder[A9],implicitevidence$101:kantan.csv.CellDecoder[A10],implicitevidence$102:kantan.csv.CellDecoder[A11],implicitevidence$103:kantan.csv.CellDecoder[A12],implicitevidence$104:kantan.csv.CellDecoder[A13],implicitevidence$105:kantan.csv.CellDecoder[A14]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder13", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12], arg12: CellDecoder[A13]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder13", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$79:kantan.csv.CellDecoder[A1],implicitevidence$80:kantan.csv.CellDecoder[A2],implicitevidence$81:kantan.csv.CellDecoder[A3],implicitevidence$82:kantan.csv.CellDecoder[A4],implicitevidence$83:kantan.csv.CellDecoder[A5],implicitevidence$84:kantan.csv.CellDecoder[A6],implicitevidence$85:kantan.csv.CellDecoder[A7],implicitevidence$86:kantan.csv.CellDecoder[A8],implicitevidence$87:kantan.csv.CellDecoder[A9],implicitevidence$88:kantan.csv.CellDecoder[A10],implicitevidence$89:kantan.csv.CellDecoder[A11],implicitevidence$90:kantan.csv.CellDecoder[A12],implicitevidence$91:kantan.csv.CellDecoder[A13]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder12", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11], arg11: CellDecoder[A12]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder12", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$67:kantan.csv.CellDecoder[A1],implicitevidence$68:kantan.csv.CellDecoder[A2],implicitevidence$69:kantan.csv.CellDecoder[A3],implicitevidence$70:kantan.csv.CellDecoder[A4],implicitevidence$71:kantan.csv.CellDecoder[A5],implicitevidence$72:kantan.csv.CellDecoder[A6],implicitevidence$73:kantan.csv.CellDecoder[A7],implicitevidence$74:kantan.csv.CellDecoder[A8],implicitevidence$75:kantan.csv.CellDecoder[A9],implicitevidence$76:kantan.csv.CellDecoder[A10],implicitevidence$77:kantan.csv.CellDecoder[A11],implicitevidence$78:kantan.csv.CellDecoder[A12]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder11", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10], arg10: CellDecoder[A11]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder11", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$56:kantan.csv.CellDecoder[A1],implicitevidence$57:kantan.csv.CellDecoder[A2],implicitevidence$58:kantan.csv.CellDecoder[A3],implicitevidence$59:kantan.csv.CellDecoder[A4],implicitevidence$60:kantan.csv.CellDecoder[A5],implicitevidence$61:kantan.csv.CellDecoder[A6],implicitevidence$62:kantan.csv.CellDecoder[A7],implicitevidence$63:kantan.csv.CellDecoder[A8],implicitevidence$64:kantan.csv.CellDecoder[A9],implicitevidence$65:kantan.csv.CellDecoder[A10],implicitevidence$66:kantan.csv.CellDecoder[A11]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder10", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9], arg9: CellDecoder[A10]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder10", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$46:kantan.csv.CellDecoder[A1],implicitevidence$47:kantan.csv.CellDecoder[A2],implicitevidence$48:kantan.csv.CellDecoder[A3],implicitevidence$49:kantan.csv.CellDecoder[A4],implicitevidence$50:kantan.csv.CellDecoder[A5],implicitevidence$51:kantan.csv.CellDecoder[A6],implicitevidence$52:kantan.csv.CellDecoder[A7],implicitevidence$53:kantan.csv.CellDecoder[A8],implicitevidence$54:kantan.csv.CellDecoder[A9],implicitevidence$55:kantan.csv.CellDecoder[A10]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder9", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8], arg8: CellDecoder[A9]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder9", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder9[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$37:kantan.csv.CellDecoder[A1],implicitevidence$38:kantan.csv.CellDecoder[A2],implicitevidence$39:kantan.csv.CellDecoder[A3],implicitevidence$40:kantan.csv.CellDecoder[A4],implicitevidence$41:kantan.csv.CellDecoder[A5],implicitevidence$42:kantan.csv.CellDecoder[A6],implicitevidence$43:kantan.csv.CellDecoder[A7],implicitevidence$44:kantan.csv.CellDecoder[A8],implicitevidence$45:kantan.csv.CellDecoder[A9]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder8", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7], arg7: CellDecoder[A8]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder8", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder8[A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$29:kantan.csv.CellDecoder[A1],implicitevidence$30:kantan.csv.CellDecoder[A2],implicitevidence$31:kantan.csv.CellDecoder[A3],implicitevidence$32:kantan.csv.CellDecoder[A4],implicitevidence$33:kantan.csv.CellDecoder[A5],implicitevidence$34:kantan.csv.CellDecoder[A6],implicitevidence$35:kantan.csv.CellDecoder[A7],implicitevidence$36:kantan.csv.CellDecoder[A8]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder7", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6], arg6: CellDecoder[A7]): RowDecoder[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder7", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder7[A1,A2,A3,A4,A5,A6,A7](implicitevidence$22:kantan.csv.CellDecoder[A1],implicitevidence$23:kantan.csv.CellDecoder[A2],implicitevidence$24:kantan.csv.CellDecoder[A3],implicitevidence$25:kantan.csv.CellDecoder[A4],implicitevidence$26:kantan.csv.CellDecoder[A5],implicitevidence$27:kantan.csv.CellDecoder[A6],implicitevidence$28:kantan.csv.CellDecoder[A7]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder6", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5], arg5: CellDecoder[A6]): RowDecoder[(A1, A2, A3, A4, A5, A6)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder6", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder6[A1,A2,A3,A4,A5,A6](implicitevidence$16:kantan.csv.CellDecoder[A1],implicitevidence$17:kantan.csv.CellDecoder[A2],implicitevidence$18:kantan.csv.CellDecoder[A3],implicitevidence$19:kantan.csv.CellDecoder[A4],implicitevidence$20:kantan.csv.CellDecoder[A5],implicitevidence$21:kantan.csv.CellDecoder[A6]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder5", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4], arg4: CellDecoder[A5]): RowDecoder[(A1, A2, A3, A4, A5)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder5", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder5[A1,A2,A3,A4,A5](implicitevidence$11:kantan.csv.CellDecoder[A1],implicitevidence$12:kantan.csv.CellDecoder[A2],implicitevidence$13:kantan.csv.CellDecoder[A3],implicitevidence$14:kantan.csv.CellDecoder[A4],implicitevidence$15:kantan.csv.CellDecoder[A5]):kantan.csv.RowDecoder[(A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder4", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3], arg3: CellDecoder[A4]): RowDecoder[(A1, A2, A3, A4)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder4", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder4[A1,A2,A3,A4](implicitevidence$7:kantan.csv.CellDecoder[A1],implicitevidence$8:kantan.csv.CellDecoder[A2],implicitevidence$9:kantan.csv.CellDecoder[A3],implicitevidence$10:kantan.csv.CellDecoder[A4]):kantan.csv.RowDecoder[(A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder3", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2], arg2: CellDecoder[A3]): RowDecoder[(A1, A2, A3)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder3", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder3[A1,A2,A3](implicitevidence$4:kantan.csv.CellDecoder[A1],implicitevidence$5:kantan.csv.CellDecoder[A2],implicitevidence$6:kantan.csv.CellDecoder[A3]):kantan.csv.RowDecoder[(A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder2", "tail" : "(arg0: CellDecoder[A1], arg1: CellDecoder[A2]): RowDecoder[(A1, A2)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder2", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder2[A1,A2](implicitevidence$2:kantan.csv.CellDecoder[A1],implicitevidence$3:kantan.csv.CellDecoder[A2]):kantan.csv.RowDecoder[(A1,A2)]", "kind" : "implicit def"}, {"label" : "tupleRowDecoder1", "tail" : "(arg0: CellDecoder[A1]): RowDecoder[(A1)]", "member" : "kantan.csv.TupleInstances.tupleRowDecoder1", "link" : "kantan\/csv\/TupleInstances.html#tupleRowDecoder1[A1](implicitevidence$1:kantan.csv.CellDecoder[A1]):kantan.csv.RowDecoder[(A1,)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/TupleInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/TupleInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/TupleInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/TupleInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/TupleInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/TupleInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/TupleInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/TupleInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/TupleInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/TupleInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/TupleInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/TupleInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/TupleInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/TupleInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/TupleInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/TupleInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/TupleInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/TupleInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/TupleInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides RowDecoder and RowEncoder instances for tuples of any arity."}, {"name" : "kantan.csv.VersionSpecificCsvSink", "trait" : "kantan\/csv\/VersionSpecificCsvSink.html", "kind" : "trait", "members_trait" : [{"label" : "write", "tail" : "(s: S, rows: IterableOnce[A], conf: CsvConfiguration)(arg0: HeaderEncoder[A], e: WriterEngine): Unit", "member" : "kantan.csv.VersionSpecificCsvSink.write", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#write[A](s:S,rows:IterableOnce[A],conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.HeaderEncoder[A],implicite:kantan.csv.engine.WriterEngine):Unit", "kind" : "def"}, {"label" : "write", "tail" : "(s: S, rows: IterableOnce[A], sep: Char, header: String*)(arg0: HeaderEncoder[A], e: WriterEngine): Unit", "member" : "kantan.csv.VersionSpecificCsvSink.write", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#write[A](s:S,rows:IterableOnce[A],sep:Char,header:String*)(implicitevidence$1:kantan.csv.HeaderEncoder[A],implicite:kantan.csv.engine.WriterEngine):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/VersionSpecificCsvSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/VersionSpecificCsvSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.VersionSpecificCsvWriter", "trait" : "kantan\/csv\/VersionSpecificCsvWriter.html", "kind" : "trait", "members_trait" : [{"label" : "write", "tail" : "(as: IterableOnce[A]): CsvWriter[A]", "member" : "kantan.csv.VersionSpecificCsvWriter.write", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#write(as:IterableOnce[A]):kantan.csv.CsvWriter[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/VersionSpecificCsvWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.VersionSpecificRowEncoderInstances", "trait" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "iterable", "tail" : "(arg0: CellEncoder[A]): RowEncoder[M[A]]", "member" : "kantan.csv.VersionSpecificRowEncoderInstances.iterable", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#iterable[A,M[X]<:IterableOnce[X]](implicitevidence$1:kantan.csv.CellEncoder[A]):kantan.csv.RowEncoder[M[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/VersionSpecificRowEncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.Zippable", "object" : "kantan\/csv\/Zippable$.html", "members_object" : [{"label" : "zippableLeftIdentity", "tail" : "(): Out[Unit, A, A]", "member" : "kantan.csv.Zippable.zippableLeftIdentity", "link" : "kantan\/csv\/Zippable$.html#zippableLeftIdentity[A]:kantan.csv.Zippable.Out[Unit,A,A]", "kind" : "implicit def"}, {"label" : "Out", "tail" : "", "member" : "kantan.csv.Zippable.Out", "link" : "kantan\/csv\/Zippable$.html#Out[-A,-B,C]=kantan.csv.Zippable[A,B]{typeOut=C}", "kind" : "type"}, {"label" : "zippableRightIdentity", "tail" : "(): Out[A, Unit, A]", "member" : "kantan.csv.ZippableOps1.zippableRightIdentity", "link" : "kantan\/csv\/Zippable$.html#zippableRightIdentity[A]:kantan.csv.Zippable.Out[A,Unit,A]", "kind" : "implicit def"}, {"label" : "zippable22", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "kantan.csv.ZippableOps2.zippable22", "link" : "kantan\/csv\/Zippable$.html#zippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "zippable21", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "kantan.csv.ZippableOps2.zippable21", "link" : "kantan\/csv\/Zippable$.html#zippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "zippable20", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "kantan.csv.ZippableOps2.zippable20", "link" : "kantan\/csv\/Zippable$.html#zippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "zippable19", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "kantan.csv.ZippableOps2.zippable19", "link" : "kantan\/csv\/Zippable$.html#zippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "zippable18", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "kantan.csv.ZippableOps2.zippable18", "link" : "kantan\/csv\/Zippable$.html#zippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "zippable17", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "kantan.csv.ZippableOps2.zippable17", "link" : "kantan\/csv\/Zippable$.html#zippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "zippable16", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "kantan.csv.ZippableOps2.zippable16", "link" : "kantan\/csv\/Zippable$.html#zippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "zippable15", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "kantan.csv.ZippableOps2.zippable15", "link" : "kantan\/csv\/Zippable$.html#zippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "zippable14", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "kantan.csv.ZippableOps2.zippable14", "link" : "kantan\/csv\/Zippable$.html#zippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "zippable13", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "kantan.csv.ZippableOps2.zippable13", "link" : "kantan\/csv\/Zippable$.html#zippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "zippable12", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "kantan.csv.ZippableOps2.zippable12", "link" : "kantan\/csv\/Zippable$.html#zippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "zippable11", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "kantan.csv.ZippableOps2.zippable11", "link" : "kantan\/csv\/Zippable$.html#zippable11[A,B,C,D,E,F,G,H,I,J,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "zippable10", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "kantan.csv.ZippableOps2.zippable10", "link" : "kantan\/csv\/Zippable$.html#zippable10[A,B,C,D,E,F,G,H,I,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "zippable9", "tail" : "(): Out[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "kantan.csv.ZippableOps2.zippable9", "link" : "kantan\/csv\/Zippable$.html#zippable9[A,B,C,D,E,F,G,H,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "zippable8", "tail" : "(): Out[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "kantan.csv.ZippableOps2.zippable8", "link" : "kantan\/csv\/Zippable$.html#zippable8[A,B,C,D,E,F,G,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "zippable7", "tail" : "(): Out[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "kantan.csv.ZippableOps2.zippable7", "link" : "kantan\/csv\/Zippable$.html#zippable7[A,B,C,D,E,F,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "zippable6", "tail" : "(): Out[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "kantan.csv.ZippableOps2.zippable6", "link" : "kantan\/csv\/Zippable$.html#zippable6[A,B,C,D,E,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "zippable5", "tail" : "(): Out[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "kantan.csv.ZippableOps2.zippable5", "link" : "kantan\/csv\/Zippable$.html#zippable5[A,B,C,D,Z]:kantan.csv.Zippable.Out[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "zippable4", "tail" : "(): Out[(A, B, C), Z, (A, B, C, Z)]", "member" : "kantan.csv.ZippableOps2.zippable4", "link" : "kantan\/csv\/Zippable$.html#zippable4[A,B,C,Z]:kantan.csv.Zippable.Out[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "zippable3", "tail" : "(): Out[(A, B), Z, (A, B, Z)]", "member" : "kantan.csv.ZippableOps2.zippable3", "link" : "kantan\/csv\/Zippable$.html#zippable3[A,B,Z]:kantan.csv.Zippable.Out[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "zippable2", "tail" : "(): Out[A, B, (A, B)]", "member" : "kantan.csv.ZippableOps3.zippable2", "link" : "kantan\/csv\/Zippable$.html#zippable2[A,B]:kantan.csv.Zippable.Out[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/Zippable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/Zippable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/Zippable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/Zippable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/Zippable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/Zippable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/Zippable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/Zippable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/Zippable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/Zippable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/Zippable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/Zippable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/Zippable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/Zippable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/Zippable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/Zippable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/Zippable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/Zippable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/Zippable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/Zippable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/Zippable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/Zippable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/Zippable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/Zippable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/Zippable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/Zippable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/Zippable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/Zippable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/Zippable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/Zippable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/Zippable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/Zippable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/Zippable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/Zippable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/Zippable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/Zippable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/Zippable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/Zippable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/Zippable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zip", "tail" : "(left: A, right: B): Out", "member" : "kantan.csv.Zippable.zip", "link" : "kantan\/csv\/Zippable.html#zip(left:A,right:B):Zippable.this.Out", "kind" : "abstract def"}, {"member" : "kantan.csv.Zippable.Out", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "kantan.csv.ZippableOps1", "trait" : "kantan\/csv\/ZippableOps1.html", "kind" : "trait", "members_trait" : [{"label" : "zippableRightIdentity", "tail" : "(): Out[A, Unit, A]", "member" : "kantan.csv.ZippableOps1.zippableRightIdentity", "link" : "kantan\/csv\/ZippableOps1.html#zippableRightIdentity[A]:kantan.csv.Zippable.Out[A,Unit,A]", "kind" : "implicit def"}, {"label" : "zippable22", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "kantan.csv.ZippableOps2.zippable22", "link" : "kantan\/csv\/ZippableOps1.html#zippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "zippable21", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "kantan.csv.ZippableOps2.zippable21", "link" : "kantan\/csv\/ZippableOps1.html#zippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "zippable20", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "kantan.csv.ZippableOps2.zippable20", "link" : "kantan\/csv\/ZippableOps1.html#zippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "zippable19", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "kantan.csv.ZippableOps2.zippable19", "link" : "kantan\/csv\/ZippableOps1.html#zippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "zippable18", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "kantan.csv.ZippableOps2.zippable18", "link" : "kantan\/csv\/ZippableOps1.html#zippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "zippable17", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "kantan.csv.ZippableOps2.zippable17", "link" : "kantan\/csv\/ZippableOps1.html#zippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "zippable16", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "kantan.csv.ZippableOps2.zippable16", "link" : "kantan\/csv\/ZippableOps1.html#zippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "zippable15", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "kantan.csv.ZippableOps2.zippable15", "link" : "kantan\/csv\/ZippableOps1.html#zippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "zippable14", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "kantan.csv.ZippableOps2.zippable14", "link" : "kantan\/csv\/ZippableOps1.html#zippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "zippable13", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "kantan.csv.ZippableOps2.zippable13", "link" : "kantan\/csv\/ZippableOps1.html#zippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "zippable12", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "kantan.csv.ZippableOps2.zippable12", "link" : "kantan\/csv\/ZippableOps1.html#zippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "zippable11", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "kantan.csv.ZippableOps2.zippable11", "link" : "kantan\/csv\/ZippableOps1.html#zippable11[A,B,C,D,E,F,G,H,I,J,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "zippable10", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "kantan.csv.ZippableOps2.zippable10", "link" : "kantan\/csv\/ZippableOps1.html#zippable10[A,B,C,D,E,F,G,H,I,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "zippable9", "tail" : "(): Out[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "kantan.csv.ZippableOps2.zippable9", "link" : "kantan\/csv\/ZippableOps1.html#zippable9[A,B,C,D,E,F,G,H,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "zippable8", "tail" : "(): Out[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "kantan.csv.ZippableOps2.zippable8", "link" : "kantan\/csv\/ZippableOps1.html#zippable8[A,B,C,D,E,F,G,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "zippable7", "tail" : "(): Out[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "kantan.csv.ZippableOps2.zippable7", "link" : "kantan\/csv\/ZippableOps1.html#zippable7[A,B,C,D,E,F,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "zippable6", "tail" : "(): Out[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "kantan.csv.ZippableOps2.zippable6", "link" : "kantan\/csv\/ZippableOps1.html#zippable6[A,B,C,D,E,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "zippable5", "tail" : "(): Out[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "kantan.csv.ZippableOps2.zippable5", "link" : "kantan\/csv\/ZippableOps1.html#zippable5[A,B,C,D,Z]:kantan.csv.Zippable.Out[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "zippable4", "tail" : "(): Out[(A, B, C), Z, (A, B, C, Z)]", "member" : "kantan.csv.ZippableOps2.zippable4", "link" : "kantan\/csv\/ZippableOps1.html#zippable4[A,B,C,Z]:kantan.csv.Zippable.Out[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "zippable3", "tail" : "(): Out[(A, B), Z, (A, B, Z)]", "member" : "kantan.csv.ZippableOps2.zippable3", "link" : "kantan\/csv\/ZippableOps1.html#zippable3[A,B,Z]:kantan.csv.Zippable.Out[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "zippable2", "tail" : "(): Out[A, B, (A, B)]", "member" : "kantan.csv.ZippableOps3.zippable2", "link" : "kantan\/csv\/ZippableOps1.html#zippable2[A,B]:kantan.csv.Zippable.Out[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ZippableOps1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ZippableOps1.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ZippableOps1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ZippableOps1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ZippableOps1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ZippableOps1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ZippableOps1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps1.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ZippableOps1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ZippableOps1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ZippableOps1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ZippableOps1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ZippableOps1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ZippableOps1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ZippableOps1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ZippableOps1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ZippableOps1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ZippableOps2", "trait" : "kantan\/csv\/ZippableOps2.html", "kind" : "trait", "members_trait" : [{"label" : "zippable22", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "kantan.csv.ZippableOps2.zippable22", "link" : "kantan\/csv\/ZippableOps2.html#zippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "zippable21", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "kantan.csv.ZippableOps2.zippable21", "link" : "kantan\/csv\/ZippableOps2.html#zippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "zippable20", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "kantan.csv.ZippableOps2.zippable20", "link" : "kantan\/csv\/ZippableOps2.html#zippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "zippable19", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "kantan.csv.ZippableOps2.zippable19", "link" : "kantan\/csv\/ZippableOps2.html#zippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "zippable18", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "kantan.csv.ZippableOps2.zippable18", "link" : "kantan\/csv\/ZippableOps2.html#zippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "zippable17", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "kantan.csv.ZippableOps2.zippable17", "link" : "kantan\/csv\/ZippableOps2.html#zippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "zippable16", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "kantan.csv.ZippableOps2.zippable16", "link" : "kantan\/csv\/ZippableOps2.html#zippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "zippable15", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "kantan.csv.ZippableOps2.zippable15", "link" : "kantan\/csv\/ZippableOps2.html#zippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "zippable14", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "kantan.csv.ZippableOps2.zippable14", "link" : "kantan\/csv\/ZippableOps2.html#zippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "zippable13", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "kantan.csv.ZippableOps2.zippable13", "link" : "kantan\/csv\/ZippableOps2.html#zippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "zippable12", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "kantan.csv.ZippableOps2.zippable12", "link" : "kantan\/csv\/ZippableOps2.html#zippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "zippable11", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "kantan.csv.ZippableOps2.zippable11", "link" : "kantan\/csv\/ZippableOps2.html#zippable11[A,B,C,D,E,F,G,H,I,J,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "zippable10", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "kantan.csv.ZippableOps2.zippable10", "link" : "kantan\/csv\/ZippableOps2.html#zippable10[A,B,C,D,E,F,G,H,I,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "zippable9", "tail" : "(): Out[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "kantan.csv.ZippableOps2.zippable9", "link" : "kantan\/csv\/ZippableOps2.html#zippable9[A,B,C,D,E,F,G,H,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "zippable8", "tail" : "(): Out[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "kantan.csv.ZippableOps2.zippable8", "link" : "kantan\/csv\/ZippableOps2.html#zippable8[A,B,C,D,E,F,G,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "zippable7", "tail" : "(): Out[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "kantan.csv.ZippableOps2.zippable7", "link" : "kantan\/csv\/ZippableOps2.html#zippable7[A,B,C,D,E,F,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "zippable6", "tail" : "(): Out[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "kantan.csv.ZippableOps2.zippable6", "link" : "kantan\/csv\/ZippableOps2.html#zippable6[A,B,C,D,E,Z]:kantan.csv.Zippable.Out[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "zippable5", "tail" : "(): Out[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "kantan.csv.ZippableOps2.zippable5", "link" : "kantan\/csv\/ZippableOps2.html#zippable5[A,B,C,D,Z]:kantan.csv.Zippable.Out[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "zippable4", "tail" : "(): Out[(A, B, C), Z, (A, B, C, Z)]", "member" : "kantan.csv.ZippableOps2.zippable4", "link" : "kantan\/csv\/ZippableOps2.html#zippable4[A,B,C,Z]:kantan.csv.Zippable.Out[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "zippable3", "tail" : "(): Out[(A, B), Z, (A, B, Z)]", "member" : "kantan.csv.ZippableOps2.zippable3", "link" : "kantan\/csv\/ZippableOps2.html#zippable3[A,B,Z]:kantan.csv.Zippable.Out[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "zippable2", "tail" : "(): Out[A, B, (A, B)]", "member" : "kantan.csv.ZippableOps3.zippable2", "link" : "kantan\/csv\/ZippableOps2.html#zippable2[A,B]:kantan.csv.Zippable.Out[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ZippableOps2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ZippableOps2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ZippableOps2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ZippableOps2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ZippableOps2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ZippableOps2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ZippableOps2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps2.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ZippableOps2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ZippableOps2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ZippableOps2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ZippableOps2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ZippableOps2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ZippableOps2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ZippableOps2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ZippableOps2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ZippableOps2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ZippableOps3", "trait" : "kantan\/csv\/ZippableOps3.html", "kind" : "trait", "members_trait" : [{"label" : "zippable2", "tail" : "(): Out[A, B, (A, B)]", "member" : "kantan.csv.ZippableOps3.zippable2", "link" : "kantan\/csv\/ZippableOps3.html#zippable2[A,B]:kantan.csv.Zippable.Out[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ZippableOps3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ZippableOps3.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ZippableOps3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ZippableOps3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ZippableOps3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ZippableOps3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ZippableOps3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ZippableOps3.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ZippableOps3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ZippableOps3.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ZippableOps3.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ZippableOps3.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ZippableOps3.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ZippableOps3.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ZippableOps3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ZippableOps3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ZippableOps3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.csv.engine.commons" : [{"name" : "kantan.csv.engine.commons.CsvSeq", "shortDescription" : "", "members_case class" : [{"label" : "apply", "tail" : "(idx: Int): String", "member" : "kantan.csv.engine.commons.CsvSeq.apply", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#apply(idx:Int):String", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "kantan.csv.engine.commons.CsvSeq.length", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#length:Int", "kind" : "def"}, {"member" : "kantan.csv.engine.commons.CsvSeq#<init>", "error" : "unsupported entity"}, {"label" : "rec", "tail" : ": CSVRecord", "member" : "kantan.csv.engine.commons.CsvSeq.rec", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#rec:org.apache.commons.csv.CSVRecord", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "iterableFactory", "tail" : "(): SeqFactory[IndexedSeq]", "member" : "scala.collection.immutable.IndexedSeq.iterableFactory", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#iterableFactory:scala.collection.SeqFactory[IndexedSeq]", "kind" : "def"}, {"label" : "applyPreferredMaxLength", "tail" : "(): Int", "member" : "scala.collection.immutable.IndexedSeq.applyPreferredMaxLength", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#applyPreferredMaxLength:Int", "kind" : "def"}, {"label" : "sameElements", "tail" : "(o: IterableOnce[B]): Boolean", "member" : "scala.collection.immutable.IndexedSeq.sameElements", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sameElements[B>:A](o:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.immutable.IndexedSeq.canEqual", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[String]", "member" : "scala.collection.immutable.IndexedSeq.toIndexedSeq", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toIndexedSeq:IndexedSeq[A]", "kind" : "final def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): IndexedSeq[String]", "member" : "scala.collection.immutable.IndexedSeqOps.slice", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.IndexedSeq.stringPrefix", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#stringPrefix:String", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B, from: Int, to: Int)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.IndexedSeqOps.search", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#search[B>:A](elem:B,from:Int,to:Int)(implicitord:scala.math.Ordering[B]):collection.Searching.SearchResult", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.IndexedSeqOps.search", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#search[B>:A](elem:B)(implicitord:scala.math.Ordering[B]):collection.Searching.SearchResult", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.IndexedSeqOps.lengthCompare", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lengthCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IndexedSeqOps.knownSize", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#knownSize:Int", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.IndexedSeqOps.lengthCompare", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lengthCompare(len:Int):Int", "kind" : "final def"}, {"label" : "last", "tail" : "(): String", "member" : "scala.collection.IndexedSeqOps.last", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[String]", "member" : "scala.collection.IndexedSeqOps.headOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): String", "member" : "scala.collection.IndexedSeqOps.head", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#head:A", "kind" : "def"}, {"label" : "reverse", "tail" : "(): IndexedSeq[String]", "member" : "scala.collection.IndexedSeqOps.reverse", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reverse:C", "kind" : "def"}, {"label" : "map", "tail" : "(f: (String) => B): IndexedSeq[B]", "member" : "scala.collection.IndexedSeqOps.map", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#map[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): IndexedSeq[String]", "member" : "scala.collection.IndexedSeqOps.dropRight", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): IndexedSeq[String]", "member" : "scala.collection.IndexedSeqOps.drop", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#drop(n:Int):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): IndexedSeq[String]", "member" : "scala.collection.IndexedSeqOps.takeRight", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): IndexedSeq[String]", "member" : "scala.collection.IndexedSeqOps.take", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#take(n:Int):C", "kind" : "def"}, {"label" : "prepended", "tail" : "(elem: B): IndexedSeq[B]", "member" : "scala.collection.IndexedSeqOps.prepended", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#prepended[B>:A](elem:B):CC[B]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Iterable[String]", "member" : "scala.collection.IndexedSeqOps.reversed", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IndexedSeqView[String]", "member" : "scala.collection.IndexedSeqOps.view", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#view(from:Int,until:Int):scala.collection.IndexedSeqView[A]", "kind" : "def"}, {"label" : "view", "tail" : "(): IndexedSeqView[String]", "member" : "scala.collection.IndexedSeqOps.view", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#view:scala.collection.IndexedSeqView[A]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (String, B) => B): B", "member" : "scala.collection.IndexedSeqOps.foldRight", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[String]", "member" : "scala.collection.IndexedSeqOps.reverseIterator", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[String, S]): S with EfficientSplit", "member" : "scala.collection.IndexedSeqOps.stepper", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):Swithcollection.Stepper.EfficientSplit", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[String]", "member" : "scala.collection.IndexedSeqOps.iterator", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): CsvSeq.this.type", "member" : "scala.collection.immutable.Seq.toSeq", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toSeq:Seq.this.type", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Seq.toString", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.Seq.hashCode", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "scala.collection.Seq.equals", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "occCounts", "tail" : "(sq: Seq[B]): Map[B, Int]", "member" : "scala.collection.SeqOps.occCounts", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#occCounts[B](sq:scala.collection.Seq[B]):scala.collection.mutable.Map[B,Int]", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B): IndexedSeq[B]", "member" : "scala.collection.SeqOps.updated", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#updated[B>:A](index:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, other: IterableOnce[B], replaced: Int): IndexedSeq[B]", "member" : "scala.collection.SeqOps.patch", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#patch[B>:A](from:Int,other:scala.collection.IterableOnce[B],replaced:Int):CC[B]", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: Seq[B]): IndexedSeq[String]", "member" : "scala.collection.SeqOps.intersect", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#intersect[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "diff", "tail" : "(that: Seq[B]): IndexedSeq[String]", "member" : "scala.collection.SeqOps.diff", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#diff[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: Seq[B])(p: (String, B) => Boolean): Boolean", "member" : "scala.collection.SeqOps.corresponds", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#corresponds[B](that:scala.collection.Seq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SeqOps.isEmpty", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "lengthIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.SeqOps.lengthIs", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lengthIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sizeCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sizeCompare(otherSize:Int):Int", "kind" : "final def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqOps.indices", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (String) => B)(ord: Ordering[B]): IndexedSeq[String]", "member" : "scala.collection.SeqOps.sortBy", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sortBy[B](f:A=>B)(implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (String, String) => Boolean): IndexedSeq[String]", "member" : "scala.collection.SeqOps.sortWith", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sortWith(lt:(A,A)=>Boolean):C", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): IndexedSeq[String]", "member" : "scala.collection.SeqOps.sorted", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sorted[B>:A](implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[IndexedSeq[String]]", "member" : "scala.collection.SeqOps.combinations", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#combinations(n:Int):Iterator[C]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[IndexedSeq[String]]", "member" : "scala.collection.SeqOps.permutations", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#permutations:Iterator[C]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (String) => B): IndexedSeq[B]", "member" : "scala.collection.SeqOps.reverseMap", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reverseMap[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqOps.contains", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: Seq[B]): Boolean", "member" : "scala.collection.SeqOps.containsSlice", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#containsSlice[B>:A](that:scala.collection.Seq[B]):Boolean", "kind" : "def"}, {"label" : "findLast", "tail" : "(p: (String) => Boolean): Option[String]", "member" : "scala.collection.SeqOps.findLast", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#findLast(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B], end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B],end:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#indexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B], from: Int): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#indexOfSlice[B>:A](that:scala.collection.Seq[B],from:Int):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (String) => Boolean): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (String) => Boolean, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOf", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (String) => Boolean): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (String) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (String) => Boolean): Int", "member" : "scala.collection.SeqOps.prefixLength", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#prefixLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "segmentLength", "tail" : "(p: (String) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (String) => Boolean): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#segmentLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): IndexedSeq[B]", "member" : "scala.collection.SeqOps.padTo", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#padTo[B>:A](len:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.SeqOps.isDefinedAt", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: Iterable[B]): Boolean", "member" : "scala.collection.SeqOps.endsWith", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#endsWith[B>:A](that:Iterable[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: IterableOnce[B], offset: Int): Boolean", "member" : "scala.collection.SeqOps.startsWith", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#startsWith[B>:A](that:scala.collection.IterableOnce[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (String) => B): IndexedSeq[String]", "member" : "scala.collection.SeqOps.distinctBy", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#distinctBy[B](f:A=>B):C", "kind" : "def"}, {"label" : "distinct", "tail" : "(): IndexedSeq[String]", "member" : "scala.collection.SeqOps.distinct", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#distinct:C", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqOps.size", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#size:Int", "kind" : "final def"}, {"label" : "union", "tail" : "(that: Seq[B]): IndexedSeq[B]", "member" : "scala.collection.SeqOps.union", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#union[B>:A](that:scala.collection.Seq[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: IterableOnce[B]): IndexedSeq[B]", "member" : "scala.collection.SeqOps.concat", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : ":++", "tail" : "(suffix: IterableOnce[B]): IndexedSeq[B]", "member" : "scala.collection.SeqOps.:++", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#:++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "appendedAll", "tail" : "(suffix: IterableOnce[B]): IndexedSeq[B]", "member" : "scala.collection.SeqOps.appendedAll", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#appendedAll[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "++:", "tail" : "(prefix: IterableOnce[B]): IndexedSeq[B]", "member" : "scala.collection.SeqOps.++:", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#++:[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "prependedAll", "tail" : "(prefix: IterableOnce[B]): IndexedSeq[B]", "member" : "scala.collection.SeqOps.prependedAll", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#prependedAll[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B): IndexedSeq[B]", "member" : "scala.collection.SeqOps.:+", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#:+[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "appended", "tail" : "(elem: B): IndexedSeq[B]", "member" : "scala.collection.SeqOps.appended", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#appended[B>:A](elem:B):CC[B]", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B): IndexedSeq[B]", "member" : "scala.collection.SeqOps.+:", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#+:[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "runWith", "tail" : "(action: (String) => U): (Int) => Boolean", "member" : "scala.PartialFunction.runWith", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) => B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) => Option[String]", "member" : "scala.PartialFunction.lift", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(k: PartialFunction[R, Int]): PartialFunction[R, String]", "member" : "scala.PartialFunction.compose", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#compose[R](k:PartialFunction[R,A]):PartialFunction[R,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: PartialFunction[String, C]): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#andThen[C](k:PartialFunction[B,C]):PartialFunction[A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (String) => C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "elementWise", "tail" : "(): ElementWiseExtractor[Int, String]", "member" : "scala.PartialFunction.elementWise", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#elementWise:PartialFunction.ElementWiseExtractor[A,B]", "kind" : "def"}, {"label" : "unapply", "tail" : "(a: Int): Option[String]", "member" : "scala.PartialFunction.unapply", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#unapply(a:A):Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => String", "member" : "scala.Function1.compose", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: Iterable[B]): LazyZip2[String, B, CsvSeq.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): CsvSeq.this.type", "member" : "scala.collection.Iterable.seq", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "coll", "tail" : "(): CsvSeq.this.type", "member" : "scala.collection.Iterable.coll", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): CsvSeq.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): IndexedSeq[String]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[String, IndexedSeq[String]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: IterableOnce[String]): IndexedSeq[String]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (String) => U): IndexedSeq[String]", "member" : "scala.collection.IterableOps.tapEach", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[IndexedSeq[String]]", "member" : "scala.collection.IterableOps.inits", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[IndexedSeq[String]]", "member" : "scala.collection.IterableOps.tails", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (String) => (A1, A2, A3)): (IndexedSeq[A1], IndexedSeq[A2], IndexedSeq[A3])", "member" : "scala.collection.IterableOps.unzip3", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (String) => (A1, A2)): (IndexedSeq[A1], IndexedSeq[A2])", "member" : "scala.collection.IterableOps.unzip", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterable[B], thisElem: A1, thatElem: B): IndexedSeq[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): IndexedSeq[(String, Int)]", "member" : "scala.collection.IterableOps.zipWithIndex", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#zipWithIndex:CC[(A@scala.annotation.unchecked.uncheckedVariance,Int)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): IndexedSeq[(String, B)]", "member" : "scala.collection.IterableOps.zip", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: IterableOnce[B]): IndexedSeq[B]", "member" : "scala.collection.IterableOps.++", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "partitionMap", "tail" : "(f: (String) => Either[A1, A2]): (IndexedSeq[A1], IndexedSeq[A2])", "member" : "scala.collection.IterableOps.partitionMap", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[String, B]): IndexedSeq[B]", "member" : "scala.collection.IterableOps.collect", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#collect[B](pf:PartialFunction[A,B]):CC[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asIterable: (String) => IterableOnce[B]): IndexedSeq[B]", "member" : "scala.collection.IterableOps.flatten", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#flatten[B](implicitasIterable:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (String) => IterableOnce[B]): IndexedSeq[B]", "member" : "scala.collection.IterableOps.flatMap", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (String, B) => B): IndexedSeq[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, String) => B): IndexedSeq[B]", "member" : "scala.collection.IterableOps.scanLeft", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): IndexedSeq[B]", "member" : "scala.collection.IterableOps.scan", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (String) => K)(f: (String) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (String) => K)(f: (String) => B): Map[K, IndexedSeq[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (String) => K): Map[K, IndexedSeq[String]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "init", "tail" : "(): IndexedSeq[String]", "member" : "scala.collection.IterableOps.init", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): IndexedSeq[String]", "member" : "scala.collection.IterableOps.tail", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[IndexedSeq[String]]", "member" : "scala.collection.IterableOps.sliding", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[IndexedSeq[String]]", "member" : "scala.collection.IterableOps.sliding", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[IndexedSeq[String]]", "member" : "scala.collection.IterableOps.grouped", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (String) => Boolean): IndexedSeq[String]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "span", "tail" : "(p: (String) => Boolean): (IndexedSeq[String], IndexedSeq[String])", "member" : "scala.collection.IterableOps.span", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (String) => Boolean): IndexedSeq[String]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (IndexedSeq[String], IndexedSeq[String])", "member" : "scala.collection.IterableOps.splitAt", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (String) => Boolean): (IndexedSeq[String], IndexedSeq[String])", "member" : "scala.collection.IterableOps.partition", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (String) => Boolean): WithFilter[String, [_]IndexedSeq[_]]", "member" : "scala.collection.IterableOps.withFilter", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (String) => Boolean): IndexedSeq[String]", "member" : "scala.collection.IterableOps.filterNot", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (String) => Boolean): IndexedSeq[String]", "member" : "scala.collection.IterableOps.filter", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (String) => Iterable[B]): IndexedSeq[IndexedSeq[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "lastOption", "tail" : "(): Option[String]", "member" : "scala.collection.IterableOps.lastOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[[_]IndexedSeq[_]]", "member" : "scala.collection.IterableOps.companion", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): IndexedSeq[String]", "member" : "scala.collection.IterableOps.repr", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[String]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[String]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[String, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[String]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[String]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[String]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[String, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#addString(b:StringBuilder):b.type", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#addString(b:StringBuilder,sep:String):b.type", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): b.type", "member" : "scala.collection.IterableOnceOps.addString", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#addString(b:StringBuilder,start:String,sep:String,end:String):b.type", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (String, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, String) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[String, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (String) => B)(ord: Ordering[B]): Option[String]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#minByOption[B](f:A=>B)(implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (String) => B)(ord: Ordering[B]): String", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#minBy[B](f:A=>B)(implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (String) => B)(ord: Ordering[B]): Option[String]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#maxByOption[B](f:A=>B)(implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (String) => B)(ord: Ordering[B]): String", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#maxBy[B](f:A=>B)(implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[String]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): String", "member" : "scala.collection.IterableOnceOps.max", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[String]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): String", "member" : "scala.collection.IterableOnceOps.min", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (String, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, String) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (String, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, String) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (String, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, String) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, String) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (String) => Boolean): Option[String]", "member" : "scala.collection.IterableOnceOps.find", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (String) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (String) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (String) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (String) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/engine\/commons\/CsvSeq.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/csv\/engine\/commons\/CsvSeq.html", "kind" : "case class"}], "kantan.csv.engine" : [{"name" : "kantan.csv.engine.ReaderEngine", "object" : "kantan\/csv\/engine\/ReaderEngine$.html", "members_object" : [{"label" : "internalCsvReaderEngine", "tail" : ": ReaderEngine", "member" : "kantan.csv.engine.ReaderEngine.internalCsvReaderEngine", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#internalCsvReaderEngine:kantan.csv.engine.ReaderEngine", "kind" : "implicit val"}, {"label" : "from", "tail" : "(f: (Reader, CsvConfiguration) => CsvReader[Seq[String]]): ReaderEngine", "member" : "kantan.csv.engine.ReaderEngine.from", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#from(f:(java.io.Reader,kantan.csv.CsvConfiguration)=>kantan.csv.CsvReader[Seq[String]]):kantan.csv.engine.ReaderEngine", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/engine\/ReaderEngine$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/engine\/ReaderEngine$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/engine\/ReaderEngine.html", "kind" : "trait", "members_trait" : [{"label" : "readerFor", "tail" : "(reader: => Reader, conf: CsvConfiguration): CsvReader[ReadResult[Seq[String]]]", "member" : "kantan.csv.engine.ReaderEngine.readerFor", "link" : "kantan\/csv\/engine\/ReaderEngine.html#readerFor(reader:=>java.io.Reader,conf:kantan.csv.CsvConfiguration):kantan.csv.CsvReader[kantan.csv.ReadResult[Seq[String]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/engine\/ReaderEngine.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/engine\/ReaderEngine.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/engine\/ReaderEngine.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/engine\/ReaderEngine.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/engine\/ReaderEngine.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/engine\/ReaderEngine.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/engine\/ReaderEngine.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/ReaderEngine.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/ReaderEngine.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/ReaderEngine.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/engine\/ReaderEngine.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/engine\/ReaderEngine.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/engine\/ReaderEngine.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/engine\/ReaderEngine.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/engine\/ReaderEngine.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/engine\/ReaderEngine.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/engine\/ReaderEngine.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/engine\/ReaderEngine.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/engine\/ReaderEngine.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unsafeReaderFor", "tail" : "(reader: Reader, conf: CsvConfiguration): CsvReader[Seq[String]]", "member" : "kantan.csv.engine.ReaderEngine.unsafeReaderFor", "link" : "kantan\/csv\/engine\/ReaderEngine.html#unsafeReaderFor(reader:java.io.Reader,conf:kantan.csv.CsvConfiguration):kantan.csv.CsvReader[Seq[String]]", "kind" : "abstract def"}], "shortDescription" : "Provides kantan.csv with CSV parsing functionality."}, {"name" : "kantan.csv.engine.WriterEngine", "object" : "kantan\/csv\/engine\/WriterEngine$.html", "members_object" : [{"label" : "internalCsvWriterEngine", "tail" : ": WriterEngine", "member" : "kantan.csv.engine.WriterEngine.internalCsvWriterEngine", "link" : "kantan\/csv\/engine\/WriterEngine$.html#internalCsvWriterEngine:kantan.csv.engine.WriterEngine", "kind" : "implicit val"}, {"label" : "from", "tail" : "(f: (Writer, CsvConfiguration) => CsvWriter[Seq[String]]): WriterEngine", "member" : "kantan.csv.engine.WriterEngine.from", "link" : "kantan\/csv\/engine\/WriterEngine$.html#from(f:(java.io.Writer,kantan.csv.CsvConfiguration)=>kantan.csv.CsvWriter[Seq[String]]):kantan.csv.engine.WriterEngine", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/engine\/WriterEngine$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/engine\/WriterEngine$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/engine\/WriterEngine$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/engine\/WriterEngine$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/engine\/WriterEngine$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/engine\/WriterEngine$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/engine\/WriterEngine$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/WriterEngine$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/WriterEngine$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/WriterEngine$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/engine\/WriterEngine$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/engine\/WriterEngine$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/engine\/WriterEngine$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/engine\/WriterEngine$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/engine\/WriterEngine$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/engine\/WriterEngine$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/engine\/WriterEngine$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/engine\/WriterEngine$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/engine\/WriterEngine$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/engine\/WriterEngine.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/engine\/WriterEngine.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/engine\/WriterEngine.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/engine\/WriterEngine.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/engine\/WriterEngine.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/engine\/WriterEngine.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/engine\/WriterEngine.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/engine\/WriterEngine.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/WriterEngine.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/WriterEngine.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/engine\/WriterEngine.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/engine\/WriterEngine.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/engine\/WriterEngine.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/engine\/WriterEngine.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/engine\/WriterEngine.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/engine\/WriterEngine.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/engine\/WriterEngine.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/engine\/WriterEngine.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/engine\/WriterEngine.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/engine\/WriterEngine.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "writerFor", "tail" : "(writer: Writer, conf: CsvConfiguration): CsvWriter[Seq[String]]", "member" : "kantan.csv.engine.WriterEngine.writerFor", "link" : "kantan\/csv\/engine\/WriterEngine.html#writerFor(writer:java.io.Writer,conf:kantan.csv.CsvConfiguration):kantan.csv.CsvWriter[Seq[String]]", "kind" : "abstract def"}], "shortDescription" : "Provides factory-like services for CsvWriter."}], "kantan.csv.ops" : [{"name" : "kantan.csv.ops.cellDecoder", "shortDescription" : "", "object" : "kantan\/csv\/ops\/cellDecoder$.html", "members_object" : [{"label" : "toCsvCellDecoderOps", "tail" : "(s: String): CsvCellDecoderOps", "member" : "kantan.csv.ops.ToCsvCellDecoderOps.toCsvCellDecoderOps", "link" : "kantan\/csv\/ops\/cellDecoder$.html#toCsvCellDecoderOps(s:String):kantan.csv.ops.CsvCellDecoderOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/cellDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/cellDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/cellDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/cellDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/cellDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/cellDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/cellDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/cellDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/cellDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/cellDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/cellDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/cellDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/cellDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/cellDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/cellDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/cellDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/cellDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/cellDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/cellDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.ops.cellEncoder", "shortDescription" : "", "object" : "kantan\/csv\/ops\/cellEncoder$.html", "members_object" : [{"label" : "toCsvCellEncoderOps", "tail" : "(a: A)(arg0: CellEncoder[A]): CsvCellEncoderOps[A]", "member" : "kantan.csv.ops.ToCsvCellEncoderOps.toCsvCellEncoderOps", "link" : "kantan\/csv\/ops\/cellEncoder$.html#toCsvCellEncoderOps[A](a:A)(implicitevidence$2:kantan.csv.CellEncoder[A]):kantan.csv.ops.CsvCellEncoderOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/cellEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/cellEncoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/cellEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/cellEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/cellEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/cellEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/cellEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/cellEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/cellEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/cellEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/cellEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/cellEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/cellEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/cellEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/cellEncoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/cellEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/cellEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/cellEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/cellEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.ops.CsvCellDecoderOps", "shortDescription" : "Provides syntax for decoding CSV cells as values.", "members_class" : [{"label" : "unsafeDecodeCsv", "tail" : "(arg0: CellDecoder[A]): A", "member" : "kantan.csv.ops.CsvCellDecoderOps.unsafeDecodeCsv", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#unsafeDecodeCsv[A](implicitevidence$2:kantan.csv.CellDecoder[A]):A", "kind" : "def"}, {"label" : "decodeCsv", "tail" : "(arg0: CellDecoder[A]): DecodeResult[A]", "member" : "kantan.csv.ops.CsvCellDecoderOps.decodeCsv", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#decodeCsv[A](implicitevidence$1:kantan.csv.CellDecoder[A]):kantan.csv.DecodeResult[A]", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvCellDecoderOps#<init>", "error" : "unsupported entity"}, {"label" : "s", "tail" : ": String", "member" : "kantan.csv.ops.CsvCellDecoderOps.s", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#s:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvCellDecoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvCellDecoderOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.CsvCellEncoderOps", "shortDescription" : "Provides syntax for encoding values as CSV cells.", "members_class" : [{"label" : "asCsvCell", "tail" : "(): String", "member" : "kantan.csv.ops.CsvCellEncoderOps.asCsvCell", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#asCsvCell:String", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvCellEncoderOps#<init>", "error" : "unsupported entity"}, {"label" : "a", "tail" : ": A", "member" : "kantan.csv.ops.CsvCellEncoderOps.a", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#a:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvCellEncoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvCellEncoderOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.CsvRowDecoderOps", "shortDescription" : "Provides syntax for decoding CSV rows as values.", "members_class" : [{"label" : "unsafeDecodeCsv", "tail" : "(arg0: RowDecoder[A]): A", "member" : "kantan.csv.ops.CsvRowDecoderOps.unsafeDecodeCsv", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#unsafeDecodeCsv[A](implicitevidence$2:kantan.csv.RowDecoder[A]):A", "kind" : "def"}, {"label" : "decodeCsv", "tail" : "(arg0: RowDecoder[A]): DecodeResult[A]", "member" : "kantan.csv.ops.CsvRowDecoderOps.decodeCsv", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#decodeCsv[A](implicitevidence$1:kantan.csv.RowDecoder[A]):kantan.csv.DecodeResult[A]", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvRowDecoderOps#<init>", "error" : "unsupported entity"}, {"label" : "ss", "tail" : ": Seq[String]", "member" : "kantan.csv.ops.CsvRowDecoderOps.ss", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#ss:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowDecoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvRowDecoderOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.CsvRowEncoderOps", "shortDescription" : "Provides syntax for encoding values as CSV rows.", "members_class" : [{"label" : "asCsvRow", "tail" : "(): Seq[String]", "member" : "kantan.csv.ops.CsvRowEncoderOps.asCsvRow", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#asCsvRow:Seq[String]", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvRowEncoderOps#<init>", "error" : "unsupported entity"}, {"label" : "a", "tail" : ": A", "member" : "kantan.csv.ops.CsvRowEncoderOps.a", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#a:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowEncoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvRowEncoderOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.CsvRowReadingOps", "shortDescription" : "Provides syntax for decoding a string as a CSV row.", "members_class" : [{"label" : "unsafeReadCsvRow", "tail" : "(conf: CsvConfiguration)(arg0: RowDecoder[B], e: ReaderEngine): B", "member" : "kantan.csv.ops.CsvRowReadingOps.unsafeReadCsvRow", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#unsafeReadCsvRow[B](conf:kantan.csv.CsvConfiguration)(implicitevidence$3:kantan.csv.RowDecoder[B],implicite:kantan.csv.engine.ReaderEngine):B", "kind" : "def"}, {"label" : "readCsvRow", "tail" : "(conf: CsvConfiguration)(arg0: RowDecoder[B], e: ReaderEngine): ReadResult[B]", "member" : "kantan.csv.ops.CsvRowReadingOps.readCsvRow", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#readCsvRow[B](conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.RowDecoder[B],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.ReadResult[B]", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvRowReadingOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowReadingOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvRowReadingOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.csvRows", "shortDescription" : "", "object" : "kantan\/csv\/ops\/csvRows$.html", "members_object" : [{"label" : "toCsvRowsOps", "tail" : "(as: IterableOnce[A])(arg0: HeaderEncoder[A]): CsvRowsOps[A]", "member" : "kantan.csv.ops.ToCsvRowsOps.toCsvRowsOps", "link" : "kantan\/csv\/ops\/csvRows$.html#toCsvRowsOps[A](as:IterableOnce[A])(implicitevidence$2:kantan.csv.HeaderEncoder[A]):kantan.csv.ops.CsvRowsOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/csvRows$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/csvRows$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/csvRows$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/csvRows$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/csvRows$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/csvRows$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/csvRows$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/csvRows$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/csvRows$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/csvRows$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/csvRows$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/csvRows$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/csvRows$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/csvRows$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/csvRows$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/csvRows$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/csvRows$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/csvRows$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/csvRows$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.ops.CsvRowsOps", "shortDescription" : "Provides syntax for turning collections into CSV strings.", "members_class" : [{"label" : "asCsv", "tail" : "(conf: CsvConfiguration)(e: WriterEngine): String", "member" : "kantan.csv.ops.CsvRowsOps.asCsv", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#asCsv(conf:kantan.csv.CsvConfiguration)(implicite:kantan.csv.engine.WriterEngine):String", "kind" : "def"}, {"label" : "asCsv", "tail" : "(sep: Char, header: String*)(e: WriterEngine): String", "member" : "kantan.csv.ops.CsvRowsOps.asCsv", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#asCsv(sep:Char,header:String*)(implicite:kantan.csv.engine.WriterEngine):String", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvRowsOps#<init>", "error" : "unsupported entity"}, {"label" : "as", "tail" : ": IterableOnce[A]", "member" : "kantan.csv.ops.CsvRowsOps.as", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#as:IterableOnce[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvRowsOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowsOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvRowsOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.CsvRowWritingOps", "shortDescription" : "Provides syntax for encoding single CSV rows as a string.", "members_class" : [{"label" : "writeCsvRow", "tail" : "(conf: CsvConfiguration)(e: WriterEngine): String", "member" : "kantan.csv.ops.CsvRowWritingOps.writeCsvRow", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#writeCsvRow(conf:kantan.csv.CsvConfiguration)(implicite:kantan.csv.engine.WriterEngine):String", "kind" : "def"}, {"label" : "writeCsvRow", "tail" : "(sep: Char)(e: WriterEngine): String", "member" : "kantan.csv.ops.CsvRowWritingOps.writeCsvRow", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#writeCsvRow(sep:Char)(implicite:kantan.csv.engine.WriterEngine):String", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvRowWritingOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvRowWritingOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvRowWritingOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.CsvSinkOps", "shortDescription" : "Provides useful syntax for types that have implicit instances of CsvSink in scope.", "members_class" : [{"label" : "asCsvWriter", "tail" : "(conf: CsvConfiguration)(arg0: HeaderEncoder[B], e: WriterEngine): CsvWriter[B]", "member" : "kantan.csv.ops.CsvSinkOps.asCsvWriter", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#asCsvWriter[B](conf:kantan.csv.CsvConfiguration)(implicitevidence$3:kantan.csv.HeaderEncoder[B],implicite:kantan.csv.engine.WriterEngine):kantan.csv.CsvWriter[B]", "kind" : "def"}, {"label" : "asCsvWriter", "tail" : "(sep: Char, header: String*)(arg0: HeaderEncoder[B], e: WriterEngine): CsvWriter[B]", "member" : "kantan.csv.ops.CsvSinkOps.asCsvWriter", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#asCsvWriter[B](sep:Char,header:String*)(implicitevidence$2:kantan.csv.HeaderEncoder[B],implicite:kantan.csv.engine.WriterEngine):kantan.csv.CsvWriter[B]", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvSinkOps#<init>", "error" : "unsupported entity"}, {"label" : "a", "tail" : ": A", "member" : "kantan.csv.ops.CsvSinkOps.a", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#a:A", "kind" : "val"}, {"label" : "writeCsv", "tail" : "(rows: IterableOnce[B], conf: CsvConfiguration)(arg0: HeaderEncoder[B], e: WriterEngine, sa: CsvSink[A]): Unit", "member" : "kantan.csv.ops.VersionSpecificCsvSinkOps.writeCsv", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#writeCsv[B](rows:IterableOnce[B],conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.HeaderEncoder[B],implicite:kantan.csv.engine.WriterEngine,implicitsa:kantan.csv.CsvSink[A]):Unit", "kind" : "def"}, {"label" : "writeCsv", "tail" : "(rows: IterableOnce[B], sep: Char, header: String*)(arg0: HeaderEncoder[B], e: WriterEngine, sa: CsvSink[A]): Unit", "member" : "kantan.csv.ops.VersionSpecificCsvSinkOps.writeCsv", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#writeCsv[B](rows:IterableOnce[B],sep:Char,header:String*)(implicitevidence$1:kantan.csv.HeaderEncoder[B],implicite:kantan.csv.engine.WriterEngine,implicitsa:kantan.csv.CsvSink[A]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvSinkOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvSinkOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvSinkOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.CsvSourceOps", "shortDescription" : "Provides useful syntax for types that have implicit instances of CsvSource in scope.", "members_class" : [{"label" : "unsafeReadCsv", "tail" : "(conf: CsvConfiguration)(arg0: HeaderDecoder[B], e: ReaderEngine, factory: Factory[B, C[B]]): C[B]", "member" : "kantan.csv.ops.CsvSourceOps.unsafeReadCsv", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#unsafeReadCsv[C[_],B](conf:kantan.csv.CsvConfiguration)(implicitevidence$9:kantan.csv.HeaderDecoder[B],implicite:kantan.csv.engine.ReaderEngine,implicitfactory:kantan.codecs.collection.Factory[B,C[B]]):C[B]", "kind" : "def"}, {"label" : "unsafeReadCsv", "tail" : "(sep: Char, header: Boolean)(e: ReaderEngine, factory: Factory[B, C[B]])(arg0: HeaderDecoder[B]): C[B]", "member" : "kantan.csv.ops.CsvSourceOps.unsafeReadCsv", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#unsafeReadCsv[C[_],B](sep:Char,header:Boolean)(e:kantan.csv.engine.ReaderEngine,factory:kantan.codecs.collection.Factory[B,C[B]])(implicitevidence$8:kantan.csv.HeaderDecoder[B]):C[B]", "kind" : "def"}, {"label" : "readCsv", "tail" : "(conf: CsvConfiguration)(arg0: HeaderDecoder[B], e: ReaderEngine, factory: Factory[ReadResult[B], C[ReadResult[B]]]): C[ReadResult[B]]", "member" : "kantan.csv.ops.CsvSourceOps.readCsv", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#readCsv[C[_],B](conf:kantan.csv.CsvConfiguration)(implicitevidence$7:kantan.csv.HeaderDecoder[B],implicite:kantan.csv.engine.ReaderEngine,implicitfactory:kantan.codecs.collection.Factory[kantan.csv.ReadResult[B],C[kantan.csv.ReadResult[B]]]):C[kantan.csv.ReadResult[B]]", "kind" : "def"}, {"label" : "readCsv", "tail" : "(sep: Char, header: Boolean)(arg0: HeaderDecoder[B], e: ReaderEngine, factory: Factory[ReadResult[B], C[ReadResult[B]]]): C[ReadResult[B]]", "member" : "kantan.csv.ops.CsvSourceOps.readCsv", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#readCsv[C[_],B](sep:Char,header:Boolean)(implicitevidence$6:kantan.csv.HeaderDecoder[B],implicite:kantan.csv.engine.ReaderEngine,implicitfactory:kantan.codecs.collection.Factory[kantan.csv.ReadResult[B],C[kantan.csv.ReadResult[B]]]):C[kantan.csv.ReadResult[B]]", "kind" : "def"}, {"label" : "asUnsafeCsvReader", "tail" : "(conf: CsvConfiguration)(arg0: HeaderDecoder[B], e: ReaderEngine): CsvReader[B]", "member" : "kantan.csv.ops.CsvSourceOps.asUnsafeCsvReader", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#asUnsafeCsvReader[B](conf:kantan.csv.CsvConfiguration)(implicitevidence$5:kantan.csv.HeaderDecoder[B],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[B]", "kind" : "def"}, {"label" : "asUnsafeCsvReader", "tail" : "(sep: Char, header: Boolean)(arg0: HeaderDecoder[B], e: ReaderEngine): CsvReader[B]", "member" : "kantan.csv.ops.CsvSourceOps.asUnsafeCsvReader", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#asUnsafeCsvReader[B](sep:Char,header:Boolean)(implicitevidence$4:kantan.csv.HeaderDecoder[B],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[B]", "kind" : "def"}, {"label" : "asCsvReader", "tail" : "(conf: CsvConfiguration)(arg0: HeaderDecoder[B], e: ReaderEngine): CsvReader[ReadResult[B]]", "member" : "kantan.csv.ops.CsvSourceOps.asCsvReader", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#asCsvReader[B](conf:kantan.csv.CsvConfiguration)(implicitevidence$3:kantan.csv.HeaderDecoder[B],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[kantan.csv.ReadResult[B]]", "kind" : "def"}, {"label" : "asCsvReader", "tail" : "(sep: Char, header: Boolean)(arg0: HeaderDecoder[B], e: ReaderEngine): CsvReader[ReadResult[B]]", "member" : "kantan.csv.ops.CsvSourceOps.asCsvReader", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#asCsvReader[B](sep:Char,header:Boolean)(implicitevidence$2:kantan.csv.HeaderDecoder[B],implicite:kantan.csv.engine.ReaderEngine):kantan.csv.CsvReader[kantan.csv.ReadResult[B]]", "kind" : "def"}, {"member" : "kantan.csv.ops.CsvSourceOps#<init>", "error" : "unsupported entity"}, {"label" : "a", "tail" : ": A", "member" : "kantan.csv.ops.CsvSourceOps.a", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#a:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/CsvSourceOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/CsvSourceOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/csv\/ops\/CsvSourceOps.html", "kind" : "class"}, {"name" : "kantan.csv.ops.rowDecoder", "shortDescription" : "", "object" : "kantan\/csv\/ops\/rowDecoder$.html", "members_object" : [{"label" : "toCsvRowDecoderOps", "tail" : "(ss: Seq[String]): CsvRowDecoderOps", "member" : "kantan.csv.ops.ToCsvRowDecoderOps.toCsvRowDecoderOps", "link" : "kantan\/csv\/ops\/rowDecoder$.html#toCsvRowDecoderOps(ss:Seq[String]):kantan.csv.ops.CsvRowDecoderOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/rowDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/rowDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/rowDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/rowDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/rowDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/rowDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/rowDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/rowDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/rowDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/rowDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/rowDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/rowDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/rowDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/rowDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/rowDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/rowDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/rowDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/rowDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/rowDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.ops.rowEncoder", "shortDescription" : "", "object" : "kantan\/csv\/ops\/rowEncoder$.html", "members_object" : [{"label" : "toCsvRowEncoderOps", "tail" : "(a: A)(arg0: HeaderEncoder[A]): CsvRowEncoderOps[A]", "member" : "kantan.csv.ops.ToCsvRowEncoderOps.toCsvRowEncoderOps", "link" : "kantan\/csv\/ops\/rowEncoder$.html#toCsvRowEncoderOps[A](a:A)(implicitevidence$2:kantan.csv.HeaderEncoder[A]):kantan.csv.ops.CsvRowEncoderOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/rowEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/rowEncoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/rowEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/rowEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/rowEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/rowEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/rowEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/rowEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/rowEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/rowEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/rowEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/rowEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/rowEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/rowEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/rowEncoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/rowEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/rowEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/rowEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/rowEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.ops.sink", "shortDescription" : "", "object" : "kantan\/csv\/ops\/sink$.html", "members_object" : [{"label" : "toCsvOutputOps", "tail" : "(a: A)(arg0: CsvSink[A]): CsvSinkOps[A]", "member" : "kantan.csv.ops.ToCsvSinkOps.toCsvOutputOps", "link" : "kantan\/csv\/ops\/sink$.html#toCsvOutputOps[A](a:A)(implicitevidence$4:kantan.csv.CsvSink[A]):kantan.csv.ops.CsvSinkOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/sink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/sink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/sink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/sink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/sink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/sink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/sink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/sink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/sink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/sink$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/sink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/sink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/sink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/sink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/sink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/sink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/sink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/sink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/sink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.ops.source", "shortDescription" : "", "object" : "kantan\/csv\/ops\/source$.html", "members_object" : [{"label" : "toCsvInputOps", "tail" : "(a: A)(arg0: CsvSource[A]): CsvSourceOps[A]", "member" : "kantan.csv.ops.ToCsvSourceOps.toCsvInputOps", "link" : "kantan\/csv\/ops\/source$.html#toCsvInputOps[A](a:A)(implicitevidence$10:kantan.csv.CsvSource[A]):kantan.csv.ops.CsvSourceOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/source$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/source$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/source$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/source$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/source$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/source$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/source$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/source$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/source$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/source$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/source$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/source$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/source$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/source$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/source$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/source$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/source$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/source$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/source$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.csv.ops.ToCsvCellDecoderOps", "trait" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvCellDecoderOps", "tail" : "(s: String): CsvCellDecoderOps", "member" : "kantan.csv.ops.ToCsvCellDecoderOps.toCsvCellDecoderOps", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#toCsvCellDecoderOps(s:String):kantan.csv.ops.CsvCellDecoderOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvCellDecoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.ToCsvCellEncoderOps", "trait" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvCellEncoderOps", "tail" : "(a: A)(arg0: CellEncoder[A]): CsvCellEncoderOps[A]", "member" : "kantan.csv.ops.ToCsvCellEncoderOps.toCsvCellEncoderOps", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#toCsvCellEncoderOps[A](a:A)(implicitevidence$2:kantan.csv.CellEncoder[A]):kantan.csv.ops.CsvCellEncoderOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvCellEncoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.ToCsvRowDecoderOps", "trait" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvRowDecoderOps", "tail" : "(ss: Seq[String]): CsvRowDecoderOps", "member" : "kantan.csv.ops.ToCsvRowDecoderOps.toCsvRowDecoderOps", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#toCsvRowDecoderOps(ss:Seq[String]):kantan.csv.ops.CsvRowDecoderOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowDecoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.ToCsvRowEncoderOps", "trait" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvRowEncoderOps", "tail" : "(a: A)(arg0: HeaderEncoder[A]): CsvRowEncoderOps[A]", "member" : "kantan.csv.ops.ToCsvRowEncoderOps.toCsvRowEncoderOps", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#toCsvRowEncoderOps[A](a:A)(implicitevidence$2:kantan.csv.HeaderEncoder[A]):kantan.csv.ops.CsvRowEncoderOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowEncoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.ToCsvRowReadingOps", "trait" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvRowReadingOps", "tail" : "(a: A)(arg0: CsvSource[A]): CsvRowReadingOps[A]", "member" : "kantan.csv.ops.ToCsvRowReadingOps.toCsvRowReadingOps", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#toCsvRowReadingOps[A](a:A)(implicitevidence$4:kantan.csv.CsvSource[A]):kantan.csv.ops.CsvRowReadingOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowReadingOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.ToCsvRowsOps", "trait" : "kantan\/csv\/ops\/ToCsvRowsOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvRowsOps", "tail" : "(as: IterableOnce[A])(arg0: HeaderEncoder[A]): CsvRowsOps[A]", "member" : "kantan.csv.ops.ToCsvRowsOps.toCsvRowsOps", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#toCsvRowsOps[A](as:IterableOnce[A])(implicitevidence$2:kantan.csv.HeaderEncoder[A]):kantan.csv.ops.CsvRowsOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowsOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.ToCsvRowWritingOps", "trait" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvRowWritingOps", "tail" : "(a: A)(arg0: RowEncoder[A]): CsvRowWritingOps[A]", "member" : "kantan.csv.ops.ToCsvRowWritingOps.toCsvRowWritingOps", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#toCsvRowWritingOps[A](a:A)(implicitevidence$2:kantan.csv.RowEncoder[A]):kantan.csv.ops.CsvRowWritingOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvRowWritingOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.ToCsvSinkOps", "trait" : "kantan\/csv\/ops\/ToCsvSinkOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvOutputOps", "tail" : "(a: A)(arg0: CsvSink[A]): CsvSinkOps[A]", "member" : "kantan.csv.ops.ToCsvSinkOps.toCsvOutputOps", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#toCsvOutputOps[A](a:A)(implicitevidence$4:kantan.csv.CsvSink[A]):kantan.csv.ops.CsvSinkOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvSinkOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.ToCsvSourceOps", "trait" : "kantan\/csv\/ops\/ToCsvSourceOps.html", "kind" : "trait", "members_trait" : [{"label" : "toCsvInputOps", "tail" : "(a: A)(arg0: CsvSource[A]): CsvSourceOps[A]", "member" : "kantan.csv.ops.ToCsvSourceOps.toCsvInputOps", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#toCsvInputOps[A](a:A)(implicitevidence$10:kantan.csv.CsvSource[A]):kantan.csv.ops.CsvSourceOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/ToCsvSourceOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.ops.VersionSpecificCsvSinkOps", "trait" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html", "kind" : "trait", "members_trait" : [{"label" : "writeCsv", "tail" : "(rows: IterableOnce[B], conf: CsvConfiguration)(arg0: HeaderEncoder[B], e: WriterEngine, sa: CsvSink[A]): Unit", "member" : "kantan.csv.ops.VersionSpecificCsvSinkOps.writeCsv", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#writeCsv[B](rows:IterableOnce[B],conf:kantan.csv.CsvConfiguration)(implicitevidence$2:kantan.csv.HeaderEncoder[B],implicite:kantan.csv.engine.WriterEngine,implicitsa:kantan.csv.CsvSink[A]):Unit", "kind" : "def"}, {"label" : "writeCsv", "tail" : "(rows: IterableOnce[B], sep: Char, header: String*)(arg0: HeaderEncoder[B], e: WriterEngine, sa: CsvSink[A]): Unit", "member" : "kantan.csv.ops.VersionSpecificCsvSinkOps.writeCsv", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#writeCsv[B](rows:IterableOnce[B],sep:Char,header:String*)(implicitevidence$1:kantan.csv.HeaderEncoder[B],implicite:kantan.csv.engine.WriterEngine,implicitsa:kantan.csv.CsvSink[A]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/ops\/VersionSpecificCsvSinkOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.csv.generic" : [{"name" : "kantan.csv.generic.GenericInstances", "trait" : "kantan\/csv\/generic\/GenericInstances.html", "kind" : "trait", "members_trait" : [{"label" : "hnilRowEncoder", "tail" : ": RowEncoder[HNil]", "member" : "kantan.csv.generic.GenericInstances.hnilRowEncoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#hnilRowEncoder:kantan.csv.RowEncoder[shapeless.HNil]", "kind" : "implicit val"}, {"label" : "hlistCellEncoder", "tail" : "(arg0: CellEncoder[H]): CellEncoder[::[H, HNil]]", "member" : "kantan.csv.generic.GenericInstances.hlistCellEncoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#hlistCellEncoder[H](implicitevidence$8:kantan.csv.CellEncoder[H]):kantan.csv.CellEncoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "hlistRowEncoder", "tail" : "(arg0: CellEncoder[H], arg1: RowEncoder[T]): RowEncoder[::[H, T]]", "member" : "kantan.csv.generic.GenericInstances.hlistRowEncoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#hlistRowEncoder[H,T<:shapeless.HList](implicitevidence$6:kantan.csv.CellEncoder[H],implicitevidence$7:kantan.csv.RowEncoder[T]):kantan.csv.RowEncoder[H::T]", "kind" : "implicit def"}, {"label" : "hlistSingletonRowEncoder", "tail" : "(arg0: RowEncoder[H]): RowEncoder[::[H, HNil]]", "member" : "kantan.csv.generic.GenericInstances.hlistSingletonRowEncoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#hlistSingletonRowEncoder[H](implicitevidence$5:kantan.csv.RowEncoder[H]):kantan.csv.RowEncoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "hnilRowDecoder", "tail" : ": RowDecoder[HNil]", "member" : "kantan.csv.generic.GenericInstances.hnilRowDecoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#hnilRowDecoder:kantan.csv.RowDecoder[shapeless.HNil]", "kind" : "implicit val"}, {"label" : "hlistCellDecoder", "tail" : "(arg0: CellDecoder[H]): CellDecoder[::[H, HNil]]", "member" : "kantan.csv.generic.GenericInstances.hlistCellDecoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#hlistCellDecoder[H](implicitevidence$4:kantan.csv.CellDecoder[H]):kantan.csv.CellDecoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "hlistRowDecoder", "tail" : "(arg0: CellDecoder[H], arg1: RowDecoder[T]): RowDecoder[::[H, T]]", "member" : "kantan.csv.generic.GenericInstances.hlistRowDecoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#hlistRowDecoder[H,T<:shapeless.HList](implicitevidence$2:kantan.csv.CellDecoder[H],implicitevidence$3:kantan.csv.RowDecoder[T]):kantan.csv.RowDecoder[H::T]", "kind" : "implicit def"}, {"label" : "hlistSingletonRowDecoder", "tail" : "(arg0: RowDecoder[H]): RowDecoder[::[H, HNil]]", "member" : "kantan.csv.generic.GenericInstances.hlistSingletonRowDecoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#hlistSingletonRowDecoder[H](implicitevidence$1:kantan.csv.RowDecoder[H]):kantan.csv.RowDecoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "coproductEncoder", "tail" : "(eh: Encoder[E, H, T], ed: Encoder[E, D, T]): Encoder[E, :+:[H, D], T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.coproductEncoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#coproductEncoder[E,H,D<:shapeless.Coproduct,T](impliciteh:kantan.codecs.Encoder[E,H,T],implicited:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,H:+:D,T]", "kind" : "implicit def"}, {"label" : "cnilEncoder", "tail" : "(): Encoder[E, CNil, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.cnilEncoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#cnilEncoder[E,D,T]:kantan.codecs.Encoder[E,shapeless.CNil,T]", "kind" : "implicit def"}, {"label" : "coproductDecoder", "tail" : "(dh: Decoder[E, H, F, T], dt: Decoder[E, D, F, T]): Decoder[E, :+:[H, D], F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.coproductDecoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#coproductDecoder[E,H,D<:shapeless.Coproduct,F,T](implicitdh:kantan.codecs.Decoder[E,H,F,T],implicitdt:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,H:+:D,F,T]", "kind" : "implicit def"}, {"label" : "cnilDecoder", "tail" : "(arg0: IsError[F]): Decoder[E, CNil, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.cnilDecoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#cnilDecoder[E,F,T](implicitevidence$1:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,shapeless.CNil,F,T]", "kind" : "implicit def"}, {"label" : "sumTypeDecoder", "tail" : "(gen: Aux[D, C], dr: Lazy[Decoder[E, C, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.sumTypeDecoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#sumTypeDecoder[E,D,F,T,C<:shapeless.Coproduct](implicitgen:shapeless.Generic.Aux[D,C],implicitdr:shapeless.Lazy[kantan.codecs.Decoder[E,C,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "sumTypeEncoder", "tail" : "(gen: Aux[D, C], er: Lazy[Encoder[E, C, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.sumTypeEncoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#sumTypeEncoder[E,D,T,C<:shapeless.Coproduct](implicitgen:shapeless.Generic.Aux[D,C],impliciter:shapeless.Lazy[kantan.codecs.Encoder[E,C,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "caseClassDecoderFromLabelled", "tail" : "(generic: Aux[D, H], hDecoder: Lazy[Decoder[E, H, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassDecoderFromLabelled", "link" : "kantan\/csv\/generic\/GenericInstances.html#caseClassDecoderFromLabelled[E,D,F,T,H<:shapeless.HList](implicitgeneric:shapeless.LabelledGeneric.Aux[D,H],implicithDecoder:shapeless.Lazy[kantan.codecs.Decoder[E,H,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "caseClassDecoder", "tail" : "(gen: Aux[D, H], dr: Lazy[Decoder[E, H, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassDecoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#caseClassDecoder[E,D,F,T,H<:shapeless.HList](implicitgen:shapeless.Generic.Aux[D,H],implicitdr:shapeless.Lazy[kantan.codecs.Decoder[E,H,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "caseClassEncoderFromLabelled", "tail" : "(generic: Aux[D, H], hEncoder: Lazy[Encoder[E, H, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassEncoderFromLabelled", "link" : "kantan\/csv\/generic\/GenericInstances.html#caseClassEncoderFromLabelled[E,D,T,H<:shapeless.HList](implicitgeneric:shapeless.LabelledGeneric.Aux[D,H],implicithEncoder:shapeless.Lazy[kantan.codecs.Encoder[E,H,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "caseClassEncoder", "tail" : "(gen: Aux[D, H], er: Lazy[Encoder[E, H, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassEncoder", "link" : "kantan\/csv\/generic\/GenericInstances.html#caseClassEncoder[E,D,T,H<:shapeless.HList](implicitgen:shapeless.Generic.Aux[D,H],impliciter:shapeless.Lazy[kantan.codecs.Encoder[E,H,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/generic\/GenericInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/generic\/GenericInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/generic\/GenericInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/generic\/GenericInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/generic\/GenericInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/generic\/GenericInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/generic\/GenericInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/generic\/GenericInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/generic\/GenericInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/generic\/GenericInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/generic\/GenericInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/generic\/GenericInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/generic\/GenericInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/generic\/GenericInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/generic\/GenericInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/generic\/GenericInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/generic\/GenericInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/generic\/GenericInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/generic\/GenericInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.csv.laws" : [{"name" : "kantan.csv.laws.Cell", "object" : "kantan\/csv\/laws\/Cell$.html", "members_object" : [{"label" : "arbCsv", "tail" : ": Arbitrary[List[List[Cell]]]", "member" : "kantan.csv.laws.Cell.arbCsv", "link" : "kantan\/csv\/laws\/Cell$.html#arbCsv:org.scalacheck.Arbitrary[List[List[kantan.csv.laws.Cell]]]", "kind" : "implicit val"}, {"label" : "arbNonEscapedCsv", "tail" : ": Arbitrary[List[List[NonEscaped]]]", "member" : "kantan.csv.laws.Cell.arbNonEscapedCsv", "link" : "kantan\/csv\/laws\/Cell$.html#arbNonEscapedCsv:org.scalacheck.Arbitrary[List[List[kantan.csv.laws.Cell.NonEscaped]]]", "kind" : "implicit val"}, {"label" : "arbEscapedCsv", "tail" : ": Arbitrary[List[List[Escaped]]]", "member" : "kantan.csv.laws.Cell.arbEscapedCsv", "link" : "kantan\/csv\/laws\/Cell$.html#arbEscapedCsv:org.scalacheck.Arbitrary[List[List[kantan.csv.laws.Cell.Escaped]]]", "kind" : "implicit val"}, {"label" : "csvOf", "tail" : "(gen: Gen[C]): Gen[List[List[C]]]", "member" : "kantan.csv.laws.Cell.csvOf", "link" : "kantan\/csv\/laws\/Cell$.html#csvOf[C<:kantan.csv.laws.Cell](gen:org.scalacheck.Gen[C]):org.scalacheck.Gen[List[List[C]]]", "kind" : "def"}, {"label" : "rowShrink", "tail" : ": Shrink[List[Cell]]", "member" : "kantan.csv.laws.Cell.rowShrink", "link" : "kantan\/csv\/laws\/Cell$.html#rowShrink:org.scalacheck.Shrink[List[kantan.csv.laws.Cell]]", "kind" : "implicit val"}, {"label" : "arbRow", "tail" : ": Arbitrary[List[Cell]]", "member" : "kantan.csv.laws.Cell.arbRow", "link" : "kantan\/csv\/laws\/Cell$.html#arbRow:org.scalacheck.Arbitrary[List[kantan.csv.laws.Cell]]", "kind" : "implicit val"}, {"label" : "arbNonEscapedRow", "tail" : ": Arbitrary[List[NonEscaped]]", "member" : "kantan.csv.laws.Cell.arbNonEscapedRow", "link" : "kantan\/csv\/laws\/Cell$.html#arbNonEscapedRow:org.scalacheck.Arbitrary[List[kantan.csv.laws.Cell.NonEscaped]]", "kind" : "implicit val"}, {"label" : "arbEscapedRow", "tail" : ": Arbitrary[List[Escaped]]", "member" : "kantan.csv.laws.Cell.arbEscapedRow", "link" : "kantan\/csv\/laws\/Cell$.html#arbEscapedRow:org.scalacheck.Arbitrary[List[kantan.csv.laws.Cell.Escaped]]", "kind" : "implicit val"}, {"label" : "row", "tail" : ": Gen[List[Cell]]", "member" : "kantan.csv.laws.Cell.row", "link" : "kantan\/csv\/laws\/Cell$.html#row:org.scalacheck.Gen[List[kantan.csv.laws.Cell]]", "kind" : "val"}, {"label" : "rowOf", "tail" : "(gen: Gen[C]): Gen[List[C]]", "member" : "kantan.csv.laws.Cell.rowOf", "link" : "kantan\/csv\/laws\/Cell$.html#rowOf[C<:kantan.csv.laws.Cell](gen:org.scalacheck.Gen[C]):org.scalacheck.Gen[List[C]]", "kind" : "def"}, {"label" : "cellShrink", "tail" : ": Shrink[Cell]", "member" : "kantan.csv.laws.Cell.cellShrink", "link" : "kantan\/csv\/laws\/Cell$.html#cellShrink:org.scalacheck.Shrink[kantan.csv.laws.Cell]", "kind" : "implicit val"}, {"label" : "cogenCell", "tail" : ": Cogen[Cell]", "member" : "kantan.csv.laws.Cell.cogenCell", "link" : "kantan\/csv\/laws\/Cell$.html#cogenCell:org.scalacheck.Cogen[kantan.csv.laws.Cell]", "kind" : "implicit val"}, {"label" : "arbCell", "tail" : ": Arbitrary[Cell]", "member" : "kantan.csv.laws.Cell.arbCell", "link" : "kantan\/csv\/laws\/Cell$.html#arbCell:org.scalacheck.Arbitrary[kantan.csv.laws.Cell]", "kind" : "implicit val"}, {"label" : "arbNonEscaped", "tail" : ": Arbitrary[NonEscaped]", "member" : "kantan.csv.laws.Cell.arbNonEscaped", "link" : "kantan\/csv\/laws\/Cell$.html#arbNonEscaped:org.scalacheck.Arbitrary[kantan.csv.laws.Cell.NonEscaped]", "kind" : "implicit val"}, {"label" : "arbEscaped", "tail" : ": Arbitrary[Escaped]", "member" : "kantan.csv.laws.Cell.arbEscaped", "link" : "kantan\/csv\/laws\/Cell$.html#arbEscaped:org.scalacheck.Arbitrary[kantan.csv.laws.Cell.Escaped]", "kind" : "implicit val"}, {"label" : "nonEmptyCell", "tail" : ": Gen[Cell]", "member" : "kantan.csv.laws.Cell.nonEmptyCell", "link" : "kantan\/csv\/laws\/Cell$.html#nonEmptyCell:org.scalacheck.Gen[kantan.csv.laws.Cell]", "kind" : "val"}, {"label" : "cell", "tail" : ": Gen[Cell]", "member" : "kantan.csv.laws.Cell.cell", "link" : "kantan\/csv\/laws\/Cell$.html#cell:org.scalacheck.Gen[kantan.csv.laws.Cell]", "kind" : "val"}, {"label" : "nonEscaped", "tail" : ": Gen[NonEscaped]", "member" : "kantan.csv.laws.Cell.nonEscaped", "link" : "kantan\/csv\/laws\/Cell$.html#nonEscaped:org.scalacheck.Gen[kantan.csv.laws.Cell.NonEscaped]", "kind" : "val"}, {"label" : "escaped", "tail" : ": Gen[Escaped]", "member" : "kantan.csv.laws.Cell.escaped", "link" : "kantan\/csv\/laws\/Cell$.html#escaped:org.scalacheck.Gen[kantan.csv.laws.Cell.Escaped]", "kind" : "val"}, {"label" : "escapedChar", "tail" : ": Gen[Char]", "member" : "kantan.csv.laws.Cell.escapedChar", "link" : "kantan\/csv\/laws\/Cell$.html#escapedChar:org.scalacheck.Gen[Char]", "kind" : "val"}, {"label" : "nonEscapedChar", "tail" : ": Gen[Char]", "member" : "kantan.csv.laws.Cell.nonEscapedChar", "link" : "kantan\/csv\/laws\/Cell$.html#nonEscapedChar:org.scalacheck.Gen[Char]", "kind" : "val"}, {"label" : "apply", "tail" : "(value: String): Cell", "member" : "kantan.csv.laws.Cell.apply", "link" : "kantan\/csv\/laws\/Cell$.html#apply(value:String):kantan.csv.laws.Cell", "kind" : "def"}, {"label" : "nonEscapedCellEncoder", "tail" : ": CellEncoder[NonEscaped]", "member" : "kantan.csv.laws.Cell.nonEscapedCellEncoder", "link" : "kantan\/csv\/laws\/Cell$.html#nonEscapedCellEncoder:kantan.csv.CellEncoder[kantan.csv.laws.Cell.NonEscaped]", "kind" : "implicit val"}, {"label" : "cellDecoder", "tail" : ": CellDecoder[Cell]", "member" : "kantan.csv.laws.Cell.cellDecoder", "link" : "kantan\/csv\/laws\/Cell$.html#cellDecoder:kantan.csv.CellDecoder[kantan.csv.laws.Cell]", "kind" : "implicit val"}, {"label" : "cellEncoder", "tail" : ": CellEncoder[Cell]", "member" : "kantan.csv.laws.Cell.cellEncoder", "link" : "kantan\/csv\/laws\/Cell$.html#cellEncoder:kantan.csv.CellEncoder[kantan.csv.laws.Cell]", "kind" : "implicit val"}, {"label" : "Empty", "tail" : "", "member" : "kantan.csv.laws.Cell.Empty", "link" : "kantan\/csv\/laws\/Cell$.html#Empty", "kind" : "case object"}, {"label" : "NonEscaped", "tail" : "", "member" : "kantan.csv.laws.Cell.NonEscaped", "link" : "kantan\/csv\/laws\/Cell$.html#NonEscapedextendsCellwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Escaped", "tail" : "", "member" : "kantan.csv.laws.Cell.Escaped", "link" : "kantan\/csv\/laws\/Cell$.html#EscapedextendsCellwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/Cell$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/Cell$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/Cell$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/Cell$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/Cell$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/Cell$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/Cell$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/Cell$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/Cell$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/Cell$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/Cell$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/Cell$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/Cell$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/Cell$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/Cell$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/Cell$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/Cell$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/Cell$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/Cell$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/laws\/Cell.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(f: (String) => String): Cell", "member" : "kantan.csv.laws.Cell.map", "link" : "kantan\/csv\/laws\/Cell.html#map(f:String=>String):kantan.csv.laws.Cell", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/csv\/laws\/Cell.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/csv\/laws\/Cell.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/csv\/laws\/Cell.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/csv\/laws\/Cell.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/Cell.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/Cell.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/Cell.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/Cell.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/Cell.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/Cell.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/Cell.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/Cell.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/Cell.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/Cell.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/Cell.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/Cell.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/Cell.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/Cell.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/Cell.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/Cell.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/Cell.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/Cell.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/Cell.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encoded", "tail" : "(): String", "member" : "kantan.csv.laws.Cell.encoded", "link" : "kantan\/csv\/laws\/Cell.html#encoded:String", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): String", "member" : "kantan.csv.laws.Cell.value", "link" : "kantan\/csv\/laws\/Cell.html#value:String", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/csv\/laws\/Cell.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/csv\/laws\/Cell.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/csv\/laws\/Cell.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.KnownFormatsReaderLaws", "object" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html", "members_object" : [{"label" : "Car", "tail" : "", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.Car", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#CarextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html", "kind" : "trait", "members_trait" : [{"label" : "googleDocs", "tail" : "(): Boolean", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.googleDocs", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#googleDocs:Boolean", "kind" : "def"}, {"label" : "numbers103", "tail" : "(): Boolean", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.numbers103", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#numbers103:Boolean", "kind" : "def"}, {"label" : "excelMac120", "tail" : "(): Boolean", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.excelMac120", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#excelMac120:Boolean", "kind" : "def"}, {"label" : "reference", "tail" : ": List[Car]", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.reference", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#reference:List[kantan.csv.laws.KnownFormatsReaderLaws.Car]", "kind" : "lazy val"}, {"label" : "read", "tail" : "(res: String): List[Car]", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.read", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#read(res:String):List[kantan.csv.laws.KnownFormatsReaderLaws.Car]", "kind" : "def"}, {"label" : "carFormat", "tail" : ": RowCodec[Car]", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.carFormat", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#carFormat:kantan.csv.RowCodec[kantan.csv.laws.KnownFormatsReaderLaws.Car]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "engine", "tail" : "(): ReaderEngine", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.engine", "link" : "kantan\/csv\/laws\/KnownFormatsReaderLaws.html#engine:kantan.csv.engine.ReaderEngine", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.ReaderEngineLaws", "object" : "kantan\/csv\/laws\/ReaderEngineLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(e: ReaderEngine): ReaderEngineLaws", "member" : "kantan.csv.laws.ReaderEngineLaws.apply", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#apply(e:kantan.csv.engine.ReaderEngine):kantan.csv.laws.ReaderEngineLaws", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/ReaderEngineLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/laws\/ReaderEngineLaws.html", "kind" : "trait", "members_trait" : [{"label" : "flatMap", "tail" : "(csv: List[List[Cell]], f: (List[Cell]) => List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.flatMap", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#flatMap(csv:List[List[kantan.csv.laws.Cell]],f:List[kantan.csv.laws.Cell]=>List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "map", "tail" : "(csv: List[List[Cell]], f: (List[Cell]) => Int): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.map", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#map(csv:List[List[kantan.csv.laws.Cell]],f:List[kantan.csv.laws.Cell]=>Int):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.isEmpty", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#isEmpty(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.hasDefiniteSize", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#hasDefiniteSize(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.isTraversableAgain", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#isTraversableAgain(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(csv: List[List[Cell]], f: (List[Cell]) => Boolean): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.filter", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#filter(csv:List[List[kantan.csv.laws.Cell]],f:List[kantan.csv.laws.Cell]=>Boolean):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(csv: List[List[Cell]], f: (List[Cell]) => Boolean): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.exists", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#exists(csv:List[List[kantan.csv.laws.Cell]],f:List[kantan.csv.laws.Cell]=>Boolean):Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(csv: List[List[Cell]], f: (List[Cell]) => Boolean): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.find", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#find(csv:List[List[kantan.csv.laws.Cell]],f:List[kantan.csv.laws.Cell]=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(csv: List[List[Cell]], f: (List[Cell]) => Boolean): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.forall", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#forall(csv:List[List[kantan.csv.laws.Cell]],f:List[kantan.csv.laws.Cell]=>Boolean):Boolean", "kind" : "def"}, {"label" : "take", "tail" : "(csv: List[List[Cell]], i: Int): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.take", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#take(csv:List[List[kantan.csv.laws.Cell]],i:Int):Boolean", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(csv: List[List[Cell]], f: (List[Cell]) => Boolean): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.dropWhile", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#dropWhile(csv:List[List[kantan.csv.laws.Cell]],f:List[kantan.csv.laws.Cell]=>Boolean):Boolean", "kind" : "def"}, {"label" : "drop", "tail" : "(csv: List[List[Cell]], i: Int): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.drop", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#drop(csv:List[List[kantan.csv.laws.Cell]],i:Int):Boolean", "kind" : "def"}, {"label" : "nextOnEmptyTake", "tail" : "(csv: List[List[Cell]], i: Int): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.nextOnEmptyTake", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#nextOnEmptyTake(csv:List[List[kantan.csv.laws.Cell]],i:Int):Boolean", "kind" : "def"}, {"label" : "nextOnEmpty", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.ReaderEngineLaws.nextOnEmpty", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#nextOnEmpty(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "asReader", "tail" : "(csv: List[List[Cell]]): CsvReader[List[Cell]]", "member" : "kantan.csv.laws.ReaderEngineLaws.asReader", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#asReader(csv:List[List[kantan.csv.laws.Cell]]):kantan.csv.CsvReader[List[kantan.csv.laws.Cell]]", "kind" : "def"}, {"label" : "iterator", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.VersionSpecificReaderEngineLaws.iterator", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#iterator(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "toLazyList", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.VersionSpecificReaderEngineLaws.toLazyList", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#toLazyList(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "googleDocs", "tail" : "(): Boolean", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.googleDocs", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#googleDocs:Boolean", "kind" : "def"}, {"label" : "numbers103", "tail" : "(): Boolean", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.numbers103", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#numbers103:Boolean", "kind" : "def"}, {"label" : "excelMac120", "tail" : "(): Boolean", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.excelMac120", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#excelMac120:Boolean", "kind" : "def"}, {"label" : "reference", "tail" : ": List[Car]", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.reference", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#reference:List[kantan.csv.laws.KnownFormatsReaderLaws.Car]", "kind" : "lazy val"}, {"label" : "read", "tail" : "(res: String): List[Car]", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.read", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#read(res:String):List[kantan.csv.laws.KnownFormatsReaderLaws.Car]", "kind" : "def"}, {"label" : "carFormat", "tail" : ": RowCodec[Car]", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.carFormat", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#carFormat:kantan.csv.RowCodec[kantan.csv.laws.KnownFormatsReaderLaws.Car]", "kind" : "implicit val"}, {"label" : "utf8", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.utf8", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#utf8:Boolean", "kind" : "def"}, {"label" : "simpleCRLF", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.simpleCRLF", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#simpleCRLF:Boolean", "kind" : "def"}, {"label" : "simple", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.simple", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#simple:Boolean", "kind" : "def"}, {"label" : "quotesAndNewLines", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.quotesAndNewLines", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#quotesAndNewLines:Boolean", "kind" : "def"}, {"label" : "newLinesCRLF", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.newLinesCRLF", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#newLinesCRLF:Boolean", "kind" : "def"}, {"label" : "newLines", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.newLines", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#newLines:Boolean", "kind" : "def"}, {"label" : "json", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.json", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#json:Boolean", "kind" : "def"}, {"label" : "escapedQuotes", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.escapedQuotes", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#escapedQuotes:Boolean", "kind" : "def"}, {"label" : "emptyCRLF", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.emptyCRLF", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#emptyCRLF:Boolean", "kind" : "def"}, {"label" : "empty", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.empty", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#empty:Boolean", "kind" : "def"}, {"label" : "commaInQuotes", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.commaInQuotes", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#commaInQuotes:Boolean", "kind" : "def"}, {"label" : "escapedCells", "tail" : "(csv: List[List[Escaped]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.escapedCells", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#escapedCells(csv:List[List[kantan.csv.laws.Cell.Escaped]]):Boolean", "kind" : "def"}, {"label" : "unescapedDoubleQuotes", "tail" : "(csv: List[List[NonEscaped]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.unescapedDoubleQuotes", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#unescapedDoubleQuotes(csv:List[List[kantan.csv.laws.Cell.NonEscaped]]):Boolean", "kind" : "def"}, {"label" : "unnecessaryDoubleQuotes", "tail" : "(csv: List[List[NonEscaped]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.unnecessaryDoubleQuotes", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#unnecessaryDoubleQuotes(csv:List[List[kantan.csv.laws.Cell.NonEscaped]]):Boolean", "kind" : "def"}, {"label" : "trailingComma", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.trailingComma", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#trailingComma(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "trailingWhitespace", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.trailingWhitespace", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#trailingWhitespace(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "leadingWhitespace", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.leadingWhitespace", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#leadingWhitespace(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "emptyEnding", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.emptyEnding", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#emptyEnding(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "lfEnding", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.lfEnding", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#lfEnding(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "crlfEnding", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.crlfEnding", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#crlfEnding(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "lfRowSeparator", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.lfRowSeparator", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#lfRowSeparator(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "crlfRowSeparator", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.crlfRowSeparator", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#crlfRowSeparator(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "engine", "tail" : "(): ReaderEngine", "member" : "kantan.csv.laws.KnownFormatsReaderLaws.engine", "link" : "kantan\/csv\/laws\/ReaderEngineLaws.html#engine:kantan.csv.engine.ReaderEngine", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.RfcReaderLaws", "trait" : "kantan\/csv\/laws\/RfcReaderLaws.html", "kind" : "trait", "members_trait" : [{"label" : "escapedCells", "tail" : "(csv: List[List[Escaped]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.escapedCells", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#escapedCells(csv:List[List[kantan.csv.laws.Cell.Escaped]]):Boolean", "kind" : "def"}, {"label" : "unescapedDoubleQuotes", "tail" : "(csv: List[List[NonEscaped]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.unescapedDoubleQuotes", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#unescapedDoubleQuotes(csv:List[List[kantan.csv.laws.Cell.NonEscaped]]):Boolean", "kind" : "def"}, {"label" : "unnecessaryDoubleQuotes", "tail" : "(csv: List[List[NonEscaped]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.unnecessaryDoubleQuotes", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#unnecessaryDoubleQuotes(csv:List[List[kantan.csv.laws.Cell.NonEscaped]]):Boolean", "kind" : "def"}, {"label" : "trailingComma", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.trailingComma", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#trailingComma(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "trailingWhitespace", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.trailingWhitespace", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#trailingWhitespace(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "leadingWhitespace", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.leadingWhitespace", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#leadingWhitespace(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "emptyEnding", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.emptyEnding", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#emptyEnding(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "lfEnding", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.lfEnding", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#lfEnding(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "crlfEnding", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.crlfEnding", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#crlfEnding(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "lfRowSeparator", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.lfRowSeparator", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#lfRowSeparator(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "crlfRowSeparator", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcReaderLaws.crlfRowSeparator", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#crlfRowSeparator(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "engine", "tail" : "(): ReaderEngine", "member" : "kantan.csv.laws.RfcReaderLaws.engine", "link" : "kantan\/csv\/laws\/RfcReaderLaws.html#engine:kantan.csv.engine.ReaderEngine", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.RfcWriterLaws", "trait" : "kantan\/csv\/laws\/RfcWriterLaws.html", "kind" : "trait", "members_trait" : [{"label" : "crlfAsRowSeparator", "tail" : "(csv: List[List[NonEscaped]]): Boolean", "member" : "kantan.csv.laws.RfcWriterLaws.crlfAsRowSeparator", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#crlfAsRowSeparator(csv:List[List[kantan.csv.laws.Cell.NonEscaped]]):Boolean", "kind" : "def"}, {"label" : "noTrailingSeparator", "tail" : "(csv: List[List[NonEscaped]]): Boolean", "member" : "kantan.csv.laws.RfcWriterLaws.noTrailingSeparator", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#noTrailingSeparator(csv:List[List[kantan.csv.laws.Cell.NonEscaped]]):Boolean", "kind" : "def"}, {"label" : "roundTrip", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcWriterLaws.roundTrip", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#roundTrip(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "roundTripFor", "tail" : "(csv: List[List[A]], conf: CsvConfiguration)(arg0: CellEncoder[A], arg1: CellDecoder[A]): Boolean", "member" : "kantan.csv.laws.RfcWriterLaws.roundTripFor", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#roundTripFor[A](csv:List[List[A]],conf:kantan.csv.CsvConfiguration)(implicitevidence$1:kantan.csv.CellEncoder[A],implicitevidence$2:kantan.csv.CellDecoder[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "engine", "tail" : "(): WriterEngine", "member" : "kantan.csv.laws.RfcWriterLaws.engine", "link" : "kantan\/csv\/laws\/RfcWriterLaws.html#engine:kantan.csv.engine.WriterEngine", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.SpectrumReaderLaws", "trait" : "kantan\/csv\/laws\/SpectrumReaderLaws.html", "kind" : "trait", "members_trait" : [{"label" : "utf8", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.utf8", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#utf8:Boolean", "kind" : "def"}, {"label" : "simpleCRLF", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.simpleCRLF", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#simpleCRLF:Boolean", "kind" : "def"}, {"label" : "simple", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.simple", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#simple:Boolean", "kind" : "def"}, {"label" : "quotesAndNewLines", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.quotesAndNewLines", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#quotesAndNewLines:Boolean", "kind" : "def"}, {"label" : "newLinesCRLF", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.newLinesCRLF", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#newLinesCRLF:Boolean", "kind" : "def"}, {"label" : "newLines", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.newLines", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#newLines:Boolean", "kind" : "def"}, {"label" : "json", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.json", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#json:Boolean", "kind" : "def"}, {"label" : "escapedQuotes", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.escapedQuotes", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#escapedQuotes:Boolean", "kind" : "def"}, {"label" : "emptyCRLF", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.emptyCRLF", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#emptyCRLF:Boolean", "kind" : "def"}, {"label" : "empty", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.empty", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#empty:Boolean", "kind" : "def"}, {"label" : "commaInQuotes", "tail" : "(): Boolean", "member" : "kantan.csv.laws.SpectrumReaderLaws.commaInQuotes", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#commaInQuotes:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "engine", "tail" : "(): ReaderEngine", "member" : "kantan.csv.laws.SpectrumReaderLaws.engine", "link" : "kantan\/csv\/laws\/SpectrumReaderLaws.html#engine:kantan.csv.engine.ReaderEngine", "kind" : "implicit abstract def"}], "shortDescription" : "Laws based on csv-pectrum."}, {"name" : "kantan.csv.laws.VersionSpecificReaderEngineLaws", "trait" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html", "kind" : "trait", "members_trait" : [{"label" : "iterator", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.VersionSpecificReaderEngineLaws.iterator", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#iterator(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "toLazyList", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.VersionSpecificReaderEngineLaws.toLazyList", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#toLazyList(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/VersionSpecificReaderEngineLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.csv.laws.WriterEngineLaws", "object" : "kantan\/csv\/laws\/WriterEngineLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(e: WriterEngine): WriterEngineLaws", "member" : "kantan.csv.laws.WriterEngineLaws.apply", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#apply(e:kantan.csv.engine.WriterEngine):kantan.csv.laws.WriterEngineLaws", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/WriterEngineLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/csv\/laws\/WriterEngineLaws.html", "kind" : "trait", "members_trait" : [{"label" : "columnSeparator", "tail" : "(csv: List[List[Cell]], c: Char): Boolean", "member" : "kantan.csv.laws.WriterEngineLaws.columnSeparator", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#columnSeparator(csv:List[List[kantan.csv.laws.Cell]],c:Char):Boolean", "kind" : "def"}, {"label" : "quoteAll", "tail" : "(csv: List[List[Int]]): Boolean", "member" : "kantan.csv.laws.WriterEngineLaws.quoteAll", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#quoteAll(csv:List[List[Int]]):Boolean", "kind" : "def"}, {"label" : "crlfAsRowSeparator", "tail" : "(csv: List[List[NonEscaped]]): Boolean", "member" : "kantan.csv.laws.RfcWriterLaws.crlfAsRowSeparator", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#crlfAsRowSeparator(csv:List[List[kantan.csv.laws.Cell.NonEscaped]]):Boolean", "kind" : "def"}, {"label" : "noTrailingSeparator", "tail" : "(csv: List[List[NonEscaped]]): Boolean", "member" : "kantan.csv.laws.RfcWriterLaws.noTrailingSeparator", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#noTrailingSeparator(csv:List[List[kantan.csv.laws.Cell.NonEscaped]]):Boolean", "kind" : "def"}, {"label" : "roundTrip", "tail" : "(csv: List[List[Cell]]): Boolean", "member" : "kantan.csv.laws.RfcWriterLaws.roundTrip", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#roundTrip(csv:List[List[kantan.csv.laws.Cell]]):Boolean", "kind" : "def"}, {"label" : "roundTripFor", "tail" : "(csv: List[List[A]], conf: CsvConfiguration)(arg0: CellEncoder[A], arg1: CellDecoder[A]): Boolean", "member" : "kantan.csv.laws.RfcWriterLaws.roundTripFor", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#roundTripFor[A](csv:List[List[A]],conf:kantan.csv.CsvConfiguration)(implicitevidence$1:kantan.csv.CellEncoder[A],implicitevidence$2:kantan.csv.CellDecoder[A]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "engine", "tail" : "(): WriterEngine", "member" : "kantan.csv.laws.RfcWriterLaws.engine", "link" : "kantan\/csv\/laws\/WriterEngineLaws.html#engine:kantan.csv.engine.WriterEngine", "kind" : "implicit abstract def"}], "shortDescription" : ""}], "libra" : []};